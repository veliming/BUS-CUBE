
BUS-HARD-CUBE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b044  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000900  0800b230  0800b230  0001b230  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bb30  0800bb30  00020200  2**0
                  CONTENTS
  4 .ARM          00000000  0800bb30  0800bb30  00020200  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bb30  0800bb30  00020200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bb30  0800bb30  0001bb30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bb34  0800bb34  0001bb34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  0800bb38  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000734  20000200  0800bd38  00020200  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000934  0800bd38  00020934  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008bec  00000000  00000000  00020229  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a1f  00000000  00000000  00028e15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007c0  00000000  00000000  0002a838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006f8  00000000  00000000  0002aff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019d69  00000000  00000000  0002b6f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008b19  00000000  00000000  00045459  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092305  00000000  00000000  0004df72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e0277  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036b0  00000000  00000000  000e02cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000200 	.word	0x20000200
 8000204:	00000000 	.word	0x00000000
 8000208:	0800b214 	.word	0x0800b214

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000204 	.word	0x20000204
 8000224:	0800b214 	.word	0x0800b214

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_frsub>:
 8000c40:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c44:	e002      	b.n	8000c4c <__addsf3>
 8000c46:	bf00      	nop

08000c48 <__aeabi_fsub>:
 8000c48:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c4c <__addsf3>:
 8000c4c:	0042      	lsls	r2, r0, #1
 8000c4e:	bf1f      	itttt	ne
 8000c50:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c54:	ea92 0f03 	teqne	r2, r3
 8000c58:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c5c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c60:	d06a      	beq.n	8000d38 <__addsf3+0xec>
 8000c62:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c66:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c6a:	bfc1      	itttt	gt
 8000c6c:	18d2      	addgt	r2, r2, r3
 8000c6e:	4041      	eorgt	r1, r0
 8000c70:	4048      	eorgt	r0, r1
 8000c72:	4041      	eorgt	r1, r0
 8000c74:	bfb8      	it	lt
 8000c76:	425b      	neglt	r3, r3
 8000c78:	2b19      	cmp	r3, #25
 8000c7a:	bf88      	it	hi
 8000c7c:	4770      	bxhi	lr
 8000c7e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c86:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c8a:	bf18      	it	ne
 8000c8c:	4240      	negne	r0, r0
 8000c8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c92:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c96:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c9a:	bf18      	it	ne
 8000c9c:	4249      	negne	r1, r1
 8000c9e:	ea92 0f03 	teq	r2, r3
 8000ca2:	d03f      	beq.n	8000d24 <__addsf3+0xd8>
 8000ca4:	f1a2 0201 	sub.w	r2, r2, #1
 8000ca8:	fa41 fc03 	asr.w	ip, r1, r3
 8000cac:	eb10 000c 	adds.w	r0, r0, ip
 8000cb0:	f1c3 0320 	rsb	r3, r3, #32
 8000cb4:	fa01 f103 	lsl.w	r1, r1, r3
 8000cb8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cbc:	d502      	bpl.n	8000cc4 <__addsf3+0x78>
 8000cbe:	4249      	negs	r1, r1
 8000cc0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cc4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cc8:	d313      	bcc.n	8000cf2 <__addsf3+0xa6>
 8000cca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cce:	d306      	bcc.n	8000cde <__addsf3+0x92>
 8000cd0:	0840      	lsrs	r0, r0, #1
 8000cd2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cd6:	f102 0201 	add.w	r2, r2, #1
 8000cda:	2afe      	cmp	r2, #254	; 0xfe
 8000cdc:	d251      	bcs.n	8000d82 <__addsf3+0x136>
 8000cde:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ce2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ce6:	bf08      	it	eq
 8000ce8:	f020 0001 	biceq.w	r0, r0, #1
 8000cec:	ea40 0003 	orr.w	r0, r0, r3
 8000cf0:	4770      	bx	lr
 8000cf2:	0049      	lsls	r1, r1, #1
 8000cf4:	eb40 0000 	adc.w	r0, r0, r0
 8000cf8:	3a01      	subs	r2, #1
 8000cfa:	bf28      	it	cs
 8000cfc:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d00:	d2ed      	bcs.n	8000cde <__addsf3+0x92>
 8000d02:	fab0 fc80 	clz	ip, r0
 8000d06:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d0a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d0e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d12:	bfaa      	itet	ge
 8000d14:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d18:	4252      	neglt	r2, r2
 8000d1a:	4318      	orrge	r0, r3
 8000d1c:	bfbc      	itt	lt
 8000d1e:	40d0      	lsrlt	r0, r2
 8000d20:	4318      	orrlt	r0, r3
 8000d22:	4770      	bx	lr
 8000d24:	f092 0f00 	teq	r2, #0
 8000d28:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d2c:	bf06      	itte	eq
 8000d2e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d32:	3201      	addeq	r2, #1
 8000d34:	3b01      	subne	r3, #1
 8000d36:	e7b5      	b.n	8000ca4 <__addsf3+0x58>
 8000d38:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d40:	bf18      	it	ne
 8000d42:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d46:	d021      	beq.n	8000d8c <__addsf3+0x140>
 8000d48:	ea92 0f03 	teq	r2, r3
 8000d4c:	d004      	beq.n	8000d58 <__addsf3+0x10c>
 8000d4e:	f092 0f00 	teq	r2, #0
 8000d52:	bf08      	it	eq
 8000d54:	4608      	moveq	r0, r1
 8000d56:	4770      	bx	lr
 8000d58:	ea90 0f01 	teq	r0, r1
 8000d5c:	bf1c      	itt	ne
 8000d5e:	2000      	movne	r0, #0
 8000d60:	4770      	bxne	lr
 8000d62:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d66:	d104      	bne.n	8000d72 <__addsf3+0x126>
 8000d68:	0040      	lsls	r0, r0, #1
 8000d6a:	bf28      	it	cs
 8000d6c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d70:	4770      	bx	lr
 8000d72:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d76:	bf3c      	itt	cc
 8000d78:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d7c:	4770      	bxcc	lr
 8000d7e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d82:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d86:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d8a:	4770      	bx	lr
 8000d8c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d90:	bf16      	itet	ne
 8000d92:	4608      	movne	r0, r1
 8000d94:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d98:	4601      	movne	r1, r0
 8000d9a:	0242      	lsls	r2, r0, #9
 8000d9c:	bf06      	itte	eq
 8000d9e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000da2:	ea90 0f01 	teqeq	r0, r1
 8000da6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000daa:	4770      	bx	lr

08000dac <__aeabi_ui2f>:
 8000dac:	f04f 0300 	mov.w	r3, #0
 8000db0:	e004      	b.n	8000dbc <__aeabi_i2f+0x8>
 8000db2:	bf00      	nop

08000db4 <__aeabi_i2f>:
 8000db4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000db8:	bf48      	it	mi
 8000dba:	4240      	negmi	r0, r0
 8000dbc:	ea5f 0c00 	movs.w	ip, r0
 8000dc0:	bf08      	it	eq
 8000dc2:	4770      	bxeq	lr
 8000dc4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000dc8:	4601      	mov	r1, r0
 8000dca:	f04f 0000 	mov.w	r0, #0
 8000dce:	e01c      	b.n	8000e0a <__aeabi_l2f+0x2a>

08000dd0 <__aeabi_ul2f>:
 8000dd0:	ea50 0201 	orrs.w	r2, r0, r1
 8000dd4:	bf08      	it	eq
 8000dd6:	4770      	bxeq	lr
 8000dd8:	f04f 0300 	mov.w	r3, #0
 8000ddc:	e00a      	b.n	8000df4 <__aeabi_l2f+0x14>
 8000dde:	bf00      	nop

08000de0 <__aeabi_l2f>:
 8000de0:	ea50 0201 	orrs.w	r2, r0, r1
 8000de4:	bf08      	it	eq
 8000de6:	4770      	bxeq	lr
 8000de8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000dec:	d502      	bpl.n	8000df4 <__aeabi_l2f+0x14>
 8000dee:	4240      	negs	r0, r0
 8000df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000df4:	ea5f 0c01 	movs.w	ip, r1
 8000df8:	bf02      	ittt	eq
 8000dfa:	4684      	moveq	ip, r0
 8000dfc:	4601      	moveq	r1, r0
 8000dfe:	2000      	moveq	r0, #0
 8000e00:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e04:	bf08      	it	eq
 8000e06:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e0a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e0e:	fabc f28c 	clz	r2, ip
 8000e12:	3a08      	subs	r2, #8
 8000e14:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e18:	db10      	blt.n	8000e3c <__aeabi_l2f+0x5c>
 8000e1a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e1e:	4463      	add	r3, ip
 8000e20:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e24:	f1c2 0220 	rsb	r2, r2, #32
 8000e28:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e2c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e30:	eb43 0002 	adc.w	r0, r3, r2
 8000e34:	bf08      	it	eq
 8000e36:	f020 0001 	biceq.w	r0, r0, #1
 8000e3a:	4770      	bx	lr
 8000e3c:	f102 0220 	add.w	r2, r2, #32
 8000e40:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e44:	f1c2 0220 	rsb	r2, r2, #32
 8000e48:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e4c:	fa21 f202 	lsr.w	r2, r1, r2
 8000e50:	eb43 0002 	adc.w	r0, r3, r2
 8000e54:	bf08      	it	eq
 8000e56:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5a:	4770      	bx	lr

08000e5c <__aeabi_fmul>:
 8000e5c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e60:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e64:	bf1e      	ittt	ne
 8000e66:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e6a:	ea92 0f0c 	teqne	r2, ip
 8000e6e:	ea93 0f0c 	teqne	r3, ip
 8000e72:	d06f      	beq.n	8000f54 <__aeabi_fmul+0xf8>
 8000e74:	441a      	add	r2, r3
 8000e76:	ea80 0c01 	eor.w	ip, r0, r1
 8000e7a:	0240      	lsls	r0, r0, #9
 8000e7c:	bf18      	it	ne
 8000e7e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e82:	d01e      	beq.n	8000ec2 <__aeabi_fmul+0x66>
 8000e84:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e88:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e8c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e90:	fba0 3101 	umull	r3, r1, r0, r1
 8000e94:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e98:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e9c:	bf3e      	ittt	cc
 8000e9e:	0049      	lslcc	r1, r1, #1
 8000ea0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ea4:	005b      	lslcc	r3, r3, #1
 8000ea6:	ea40 0001 	orr.w	r0, r0, r1
 8000eaa:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000eae:	2afd      	cmp	r2, #253	; 0xfd
 8000eb0:	d81d      	bhi.n	8000eee <__aeabi_fmul+0x92>
 8000eb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000eb6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eba:	bf08      	it	eq
 8000ebc:	f020 0001 	biceq.w	r0, r0, #1
 8000ec0:	4770      	bx	lr
 8000ec2:	f090 0f00 	teq	r0, #0
 8000ec6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000eca:	bf08      	it	eq
 8000ecc:	0249      	lsleq	r1, r1, #9
 8000ece:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ed2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ed6:	3a7f      	subs	r2, #127	; 0x7f
 8000ed8:	bfc2      	ittt	gt
 8000eda:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ede:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ee2:	4770      	bxgt	lr
 8000ee4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee8:	f04f 0300 	mov.w	r3, #0
 8000eec:	3a01      	subs	r2, #1
 8000eee:	dc5d      	bgt.n	8000fac <__aeabi_fmul+0x150>
 8000ef0:	f112 0f19 	cmn.w	r2, #25
 8000ef4:	bfdc      	itt	le
 8000ef6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000efa:	4770      	bxle	lr
 8000efc:	f1c2 0200 	rsb	r2, r2, #0
 8000f00:	0041      	lsls	r1, r0, #1
 8000f02:	fa21 f102 	lsr.w	r1, r1, r2
 8000f06:	f1c2 0220 	rsb	r2, r2, #32
 8000f0a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f0e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f12:	f140 0000 	adc.w	r0, r0, #0
 8000f16:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f1a:	bf08      	it	eq
 8000f1c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f20:	4770      	bx	lr
 8000f22:	f092 0f00 	teq	r2, #0
 8000f26:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f2a:	bf02      	ittt	eq
 8000f2c:	0040      	lsleq	r0, r0, #1
 8000f2e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f32:	3a01      	subeq	r2, #1
 8000f34:	d0f9      	beq.n	8000f2a <__aeabi_fmul+0xce>
 8000f36:	ea40 000c 	orr.w	r0, r0, ip
 8000f3a:	f093 0f00 	teq	r3, #0
 8000f3e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f42:	bf02      	ittt	eq
 8000f44:	0049      	lsleq	r1, r1, #1
 8000f46:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f4a:	3b01      	subeq	r3, #1
 8000f4c:	d0f9      	beq.n	8000f42 <__aeabi_fmul+0xe6>
 8000f4e:	ea41 010c 	orr.w	r1, r1, ip
 8000f52:	e78f      	b.n	8000e74 <__aeabi_fmul+0x18>
 8000f54:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f58:	ea92 0f0c 	teq	r2, ip
 8000f5c:	bf18      	it	ne
 8000f5e:	ea93 0f0c 	teqne	r3, ip
 8000f62:	d00a      	beq.n	8000f7a <__aeabi_fmul+0x11e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1d8      	bne.n	8000f22 <__aeabi_fmul+0xc6>
 8000f70:	ea80 0001 	eor.w	r0, r0, r1
 8000f74:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f78:	4770      	bx	lr
 8000f7a:	f090 0f00 	teq	r0, #0
 8000f7e:	bf17      	itett	ne
 8000f80:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f84:	4608      	moveq	r0, r1
 8000f86:	f091 0f00 	teqne	r1, #0
 8000f8a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f8e:	d014      	beq.n	8000fba <__aeabi_fmul+0x15e>
 8000f90:	ea92 0f0c 	teq	r2, ip
 8000f94:	d101      	bne.n	8000f9a <__aeabi_fmul+0x13e>
 8000f96:	0242      	lsls	r2, r0, #9
 8000f98:	d10f      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000f9a:	ea93 0f0c 	teq	r3, ip
 8000f9e:	d103      	bne.n	8000fa8 <__aeabi_fmul+0x14c>
 8000fa0:	024b      	lsls	r3, r1, #9
 8000fa2:	bf18      	it	ne
 8000fa4:	4608      	movne	r0, r1
 8000fa6:	d108      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000fa8:	ea80 0001 	eor.w	r0, r0, r1
 8000fac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000fb0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fb4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fb8:	4770      	bx	lr
 8000fba:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fbe:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000fc2:	4770      	bx	lr

08000fc4 <__aeabi_fdiv>:
 8000fc4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000fc8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000fcc:	bf1e      	ittt	ne
 8000fce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000fd2:	ea92 0f0c 	teqne	r2, ip
 8000fd6:	ea93 0f0c 	teqne	r3, ip
 8000fda:	d069      	beq.n	80010b0 <__aeabi_fdiv+0xec>
 8000fdc:	eba2 0203 	sub.w	r2, r2, r3
 8000fe0:	ea80 0c01 	eor.w	ip, r0, r1
 8000fe4:	0249      	lsls	r1, r1, #9
 8000fe6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fea:	d037      	beq.n	800105c <__aeabi_fdiv+0x98>
 8000fec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ff0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ff4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ff8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ffc:	428b      	cmp	r3, r1
 8000ffe:	bf38      	it	cc
 8001000:	005b      	lslcc	r3, r3, #1
 8001002:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8001006:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800100a:	428b      	cmp	r3, r1
 800100c:	bf24      	itt	cs
 800100e:	1a5b      	subcs	r3, r3, r1
 8001010:	ea40 000c 	orrcs.w	r0, r0, ip
 8001014:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001018:	bf24      	itt	cs
 800101a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800101e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8001022:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8001026:	bf24      	itt	cs
 8001028:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800102c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001030:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001034:	bf24      	itt	cs
 8001036:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800103a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800103e:	011b      	lsls	r3, r3, #4
 8001040:	bf18      	it	ne
 8001042:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8001046:	d1e0      	bne.n	800100a <__aeabi_fdiv+0x46>
 8001048:	2afd      	cmp	r2, #253	; 0xfd
 800104a:	f63f af50 	bhi.w	8000eee <__aeabi_fmul+0x92>
 800104e:	428b      	cmp	r3, r1
 8001050:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001054:	bf08      	it	eq
 8001056:	f020 0001 	biceq.w	r0, r0, #1
 800105a:	4770      	bx	lr
 800105c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001060:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001064:	327f      	adds	r2, #127	; 0x7f
 8001066:	bfc2      	ittt	gt
 8001068:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800106c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001070:	4770      	bxgt	lr
 8001072:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001076:	f04f 0300 	mov.w	r3, #0
 800107a:	3a01      	subs	r2, #1
 800107c:	e737      	b.n	8000eee <__aeabi_fmul+0x92>
 800107e:	f092 0f00 	teq	r2, #0
 8001082:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8001086:	bf02      	ittt	eq
 8001088:	0040      	lsleq	r0, r0, #1
 800108a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800108e:	3a01      	subeq	r2, #1
 8001090:	d0f9      	beq.n	8001086 <__aeabi_fdiv+0xc2>
 8001092:	ea40 000c 	orr.w	r0, r0, ip
 8001096:	f093 0f00 	teq	r3, #0
 800109a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800109e:	bf02      	ittt	eq
 80010a0:	0049      	lsleq	r1, r1, #1
 80010a2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80010a6:	3b01      	subeq	r3, #1
 80010a8:	d0f9      	beq.n	800109e <__aeabi_fdiv+0xda>
 80010aa:	ea41 010c 	orr.w	r1, r1, ip
 80010ae:	e795      	b.n	8000fdc <__aeabi_fdiv+0x18>
 80010b0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80010b4:	ea92 0f0c 	teq	r2, ip
 80010b8:	d108      	bne.n	80010cc <__aeabi_fdiv+0x108>
 80010ba:	0242      	lsls	r2, r0, #9
 80010bc:	f47f af7d 	bne.w	8000fba <__aeabi_fmul+0x15e>
 80010c0:	ea93 0f0c 	teq	r3, ip
 80010c4:	f47f af70 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010c8:	4608      	mov	r0, r1
 80010ca:	e776      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010cc:	ea93 0f0c 	teq	r3, ip
 80010d0:	d104      	bne.n	80010dc <__aeabi_fdiv+0x118>
 80010d2:	024b      	lsls	r3, r1, #9
 80010d4:	f43f af4c 	beq.w	8000f70 <__aeabi_fmul+0x114>
 80010d8:	4608      	mov	r0, r1
 80010da:	e76e      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010dc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80010e0:	bf18      	it	ne
 80010e2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80010e6:	d1ca      	bne.n	800107e <__aeabi_fdiv+0xba>
 80010e8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80010ec:	f47f af5c 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010f0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80010f4:	f47f af3c 	bne.w	8000f70 <__aeabi_fmul+0x114>
 80010f8:	e75f      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010fa:	bf00      	nop

080010fc <__aeabi_f2uiz>:
 80010fc:	0042      	lsls	r2, r0, #1
 80010fe:	d20e      	bcs.n	800111e <__aeabi_f2uiz+0x22>
 8001100:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001104:	d30b      	bcc.n	800111e <__aeabi_f2uiz+0x22>
 8001106:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800110a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800110e:	d409      	bmi.n	8001124 <__aeabi_f2uiz+0x28>
 8001110:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001114:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001118:	fa23 f002 	lsr.w	r0, r3, r2
 800111c:	4770      	bx	lr
 800111e:	f04f 0000 	mov.w	r0, #0
 8001122:	4770      	bx	lr
 8001124:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001128:	d101      	bne.n	800112e <__aeabi_f2uiz+0x32>
 800112a:	0242      	lsls	r2, r0, #9
 800112c:	d102      	bne.n	8001134 <__aeabi_f2uiz+0x38>
 800112e:	f04f 30ff 	mov.w	r0, #4294967295
 8001132:	4770      	bx	lr
 8001134:	f04f 0000 	mov.w	r0, #0
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop

0800113c <__aeabi_d2lz>:
 800113c:	b538      	push	{r3, r4, r5, lr}
 800113e:	460c      	mov	r4, r1
 8001140:	4605      	mov	r5, r0
 8001142:	4621      	mov	r1, r4
 8001144:	4628      	mov	r0, r5
 8001146:	2200      	movs	r2, #0
 8001148:	2300      	movs	r3, #0
 800114a:	f7ff fca3 	bl	8000a94 <__aeabi_dcmplt>
 800114e:	b928      	cbnz	r0, 800115c <__aeabi_d2lz+0x20>
 8001150:	4628      	mov	r0, r5
 8001152:	4621      	mov	r1, r4
 8001154:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001158:	f000 b80a 	b.w	8001170 <__aeabi_d2ulz>
 800115c:	4628      	mov	r0, r5
 800115e:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001162:	f000 f805 	bl	8001170 <__aeabi_d2ulz>
 8001166:	4240      	negs	r0, r0
 8001168:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800116c:	bd38      	pop	{r3, r4, r5, pc}
 800116e:	bf00      	nop

08001170 <__aeabi_d2ulz>:
 8001170:	b5d0      	push	{r4, r6, r7, lr}
 8001172:	2200      	movs	r2, #0
 8001174:	4b0b      	ldr	r3, [pc, #44]	; (80011a4 <__aeabi_d2ulz+0x34>)
 8001176:	4606      	mov	r6, r0
 8001178:	460f      	mov	r7, r1
 800117a:	f7ff fa19 	bl	80005b0 <__aeabi_dmul>
 800117e:	f7ff fcef 	bl	8000b60 <__aeabi_d2uiz>
 8001182:	4604      	mov	r4, r0
 8001184:	f7ff f99a 	bl	80004bc <__aeabi_ui2d>
 8001188:	2200      	movs	r2, #0
 800118a:	4b07      	ldr	r3, [pc, #28]	; (80011a8 <__aeabi_d2ulz+0x38>)
 800118c:	f7ff fa10 	bl	80005b0 <__aeabi_dmul>
 8001190:	4602      	mov	r2, r0
 8001192:	460b      	mov	r3, r1
 8001194:	4630      	mov	r0, r6
 8001196:	4639      	mov	r1, r7
 8001198:	f7ff f852 	bl	8000240 <__aeabi_dsub>
 800119c:	f7ff fce0 	bl	8000b60 <__aeabi_d2uiz>
 80011a0:	4621      	mov	r1, r4
 80011a2:	bdd0      	pop	{r4, r6, r7, pc}
 80011a4:	3df00000 	.word	0x3df00000
 80011a8:	41f00000 	.word	0x41f00000
 80011ac:	00000000 	.word	0x00000000

080011b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80011b4:	b084      	sub	sp, #16
 80011b6:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011b8:	f002 f996 	bl	80034e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011bc:	f000 fce2 	bl	8001b84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011c0:	f000 fd6c 	bl	8001c9c <MX_GPIO_Init>
  MX_DMA_Init();
 80011c4:	f000 fd44 	bl	8001c50 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80011c8:	f000 fd18 	bl	8001bfc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart1,USART_RX_BUF, sizeof(USART_RX_BUF));
 80011cc:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80011d0:	49a1      	ldr	r1, [pc, #644]	; (8001458 <main+0x2a8>)
 80011d2:	48a2      	ldr	r0, [pc, #648]	; (800145c <main+0x2ac>)
 80011d4:	f003 fe1e 	bl	8004e14 <HAL_UART_Receive_DMA>
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);
 80011d8:	2201      	movs	r2, #1
 80011da:	2120      	movs	r1, #32
 80011dc:	48a0      	ldr	r0, [pc, #640]	; (8001460 <main+0x2b0>)
 80011de:	f003 f92d 	bl	800443c <HAL_GPIO_WritePin>
  HAL_Delay(10000);
 80011e2:	f242 7010 	movw	r0, #10000	; 0x2710
 80011e6:	f002 f9e1 	bl	80035ac <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_RESET);
 80011ea:	2200      	movs	r2, #0
 80011ec:	2120      	movs	r1, #32
 80011ee:	489c      	ldr	r0, [pc, #624]	; (8001460 <main+0x2b0>)
 80011f0:	f003 f924 	bl	800443c <HAL_GPIO_WritePin>

  first:
  	  firstgo=0;
 80011f4:	4b9b      	ldr	r3, [pc, #620]	; (8001464 <main+0x2b4>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
  	if(firstgo!=0){
 80011fa:	4b9a      	ldr	r3, [pc, #616]	; (8001464 <main+0x2b4>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d00d      	beq.n	800121e <main+0x6e>
  			HAL_Delay(500);
 8001202:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001206:	f002 f9d1 	bl	80035ac <HAL_Delay>

  			n58_normal_check("AT+XIIC=0\r\n");
 800120a:	4897      	ldr	r0, [pc, #604]	; (8001468 <main+0x2b8>)
 800120c:	f001 fe1a 	bl	8002e44 <n58_normal_check>

  			HAL_Delay(500);
 8001210:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001214:	f002 f9ca 	bl	80035ac <HAL_Delay>

  			n58_normal_check("AT+CGATT=0\r\n");
 8001218:	4894      	ldr	r0, [pc, #592]	; (800146c <main+0x2bc>)
 800121a:	f001 fe13 	bl	8002e44 <n58_normal_check>
  	}
  	firstgo=1;
 800121e:	4b91      	ldr	r3, [pc, #580]	; (8001464 <main+0x2b4>)
 8001220:	2201      	movs	r2, #1
 8001222:	601a      	str	r2, [r3, #0]
  	iter = 0;
 8001224:	4b92      	ldr	r3, [pc, #584]	; (8001470 <main+0x2c0>)
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
      while(iter++ <10) {
 800122a:	e00c      	b.n	8001246 <main+0x96>
          ret = n58_normal_check("AT\r\n");
 800122c:	4891      	ldr	r0, [pc, #580]	; (8001474 <main+0x2c4>)
 800122e:	f001 fe09 	bl	8002e44 <n58_normal_check>
 8001232:	4603      	mov	r3, r0
 8001234:	4a90      	ldr	r2, [pc, #576]	; (8001478 <main+0x2c8>)
 8001236:	6013      	str	r3, [r2, #0]
          if(ret == 0) {
 8001238:	4b8f      	ldr	r3, [pc, #572]	; (8001478 <main+0x2c8>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d00a      	beq.n	8001256 <main+0xa6>
              break;
          }
          HAL_Delay(200);
 8001240:	20c8      	movs	r0, #200	; 0xc8
 8001242:	f002 f9b3 	bl	80035ac <HAL_Delay>
      while(iter++ <10) {
 8001246:	4b8a      	ldr	r3, [pc, #552]	; (8001470 <main+0x2c0>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	1c5a      	adds	r2, r3, #1
 800124c:	4988      	ldr	r1, [pc, #544]	; (8001470 <main+0x2c0>)
 800124e:	600a      	str	r2, [r1, #0]
 8001250:	2b09      	cmp	r3, #9
 8001252:	ddeb      	ble.n	800122c <main+0x7c>
 8001254:	e000      	b.n	8001258 <main+0xa8>
              break;
 8001256:	bf00      	nop
      }
      if(ret == -1) {
 8001258:	4b87      	ldr	r3, [pc, #540]	; (8001478 <main+0x2c8>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001260:	d100      	bne.n	8001264 <main+0xb4>
          goto first ;
 8001262:	e7c7      	b.n	80011f4 <main+0x44>
      }
      HAL_Delay(150);
 8001264:	2096      	movs	r0, #150	; 0x96
 8001266:	f002 f9a1 	bl	80035ac <HAL_Delay>

      iter = 0;
 800126a:	4b81      	ldr	r3, [pc, #516]	; (8001470 <main+0x2c0>)
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
      while(iter++ <10) {
 8001270:	e00c      	b.n	800128c <main+0xdc>
          ret = n58_normal_check("ATE0\r\n");
 8001272:	4882      	ldr	r0, [pc, #520]	; (800147c <main+0x2cc>)
 8001274:	f001 fde6 	bl	8002e44 <n58_normal_check>
 8001278:	4603      	mov	r3, r0
 800127a:	4a7f      	ldr	r2, [pc, #508]	; (8001478 <main+0x2c8>)
 800127c:	6013      	str	r3, [r2, #0]
          if(ret == 0) {
 800127e:	4b7e      	ldr	r3, [pc, #504]	; (8001478 <main+0x2c8>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d00a      	beq.n	800129c <main+0xec>
              break;
          }
          HAL_Delay(200);
 8001286:	20c8      	movs	r0, #200	; 0xc8
 8001288:	f002 f990 	bl	80035ac <HAL_Delay>
      while(iter++ <10) {
 800128c:	4b78      	ldr	r3, [pc, #480]	; (8001470 <main+0x2c0>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	1c5a      	adds	r2, r3, #1
 8001292:	4977      	ldr	r1, [pc, #476]	; (8001470 <main+0x2c0>)
 8001294:	600a      	str	r2, [r1, #0]
 8001296:	2b09      	cmp	r3, #9
 8001298:	ddeb      	ble.n	8001272 <main+0xc2>
 800129a:	e000      	b.n	800129e <main+0xee>
              break;
 800129c:	bf00      	nop
      }
      if(ret == -1) {
 800129e:	4b76      	ldr	r3, [pc, #472]	; (8001478 <main+0x2c8>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012a6:	d100      	bne.n	80012aa <main+0xfa>
          goto first ;
 80012a8:	e7a4      	b.n	80011f4 <main+0x44>
      }
      HAL_Delay(150);
 80012aa:	2096      	movs	r0, #150	; 0x96
 80012ac:	f002 f97e 	bl	80035ac <HAL_Delay>


      iter = 0;
 80012b0:	4b6f      	ldr	r3, [pc, #444]	; (8001470 <main+0x2c0>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
      while(iter++ <10) {
 80012b6:	e00c      	b.n	80012d2 <main+0x122>
          ret = n58_normal_check("AT+CGSN\r\n");
 80012b8:	4871      	ldr	r0, [pc, #452]	; (8001480 <main+0x2d0>)
 80012ba:	f001 fdc3 	bl	8002e44 <n58_normal_check>
 80012be:	4603      	mov	r3, r0
 80012c0:	4a6d      	ldr	r2, [pc, #436]	; (8001478 <main+0x2c8>)
 80012c2:	6013      	str	r3, [r2, #0]
          if(ret == 0) {
 80012c4:	4b6c      	ldr	r3, [pc, #432]	; (8001478 <main+0x2c8>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d00a      	beq.n	80012e2 <main+0x132>
              break;
          }
          HAL_Delay(10);
 80012cc:	200a      	movs	r0, #10
 80012ce:	f002 f96d 	bl	80035ac <HAL_Delay>
      while(iter++ <10) {
 80012d2:	4b67      	ldr	r3, [pc, #412]	; (8001470 <main+0x2c0>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	1c5a      	adds	r2, r3, #1
 80012d8:	4965      	ldr	r1, [pc, #404]	; (8001470 <main+0x2c0>)
 80012da:	600a      	str	r2, [r1, #0]
 80012dc:	2b09      	cmp	r3, #9
 80012de:	ddeb      	ble.n	80012b8 <main+0x108>
 80012e0:	e000      	b.n	80012e4 <main+0x134>
              break;
 80012e2:	bf00      	nop
      }
      if(ret == -1) {
 80012e4:	4b64      	ldr	r3, [pc, #400]	; (8001478 <main+0x2c8>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012ec:	d100      	bne.n	80012f0 <main+0x140>
          goto first ;
 80012ee:	e781      	b.n	80011f4 <main+0x44>
      }
      HAL_Delay(150);
 80012f0:	2096      	movs	r0, #150	; 0x96
 80012f2:	f002 f95b 	bl	80035ac <HAL_Delay>


      iter = 0;
 80012f6:	4b5e      	ldr	r3, [pc, #376]	; (8001470 <main+0x2c0>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
      while(iter++ <10) {
 80012fc:	e00b      	b.n	8001316 <main+0x166>
          ret = n58_check_sim_card();
 80012fe:	f001 fdd7 	bl	8002eb0 <n58_check_sim_card>
 8001302:	4603      	mov	r3, r0
 8001304:	4a5c      	ldr	r2, [pc, #368]	; (8001478 <main+0x2c8>)
 8001306:	6013      	str	r3, [r2, #0]
          if(ret == 0) {
 8001308:	4b5b      	ldr	r3, [pc, #364]	; (8001478 <main+0x2c8>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d00a      	beq.n	8001326 <main+0x176>
              break;
          }
          HAL_Delay(200);
 8001310:	20c8      	movs	r0, #200	; 0xc8
 8001312:	f002 f94b 	bl	80035ac <HAL_Delay>
      while(iter++ <10) {
 8001316:	4b56      	ldr	r3, [pc, #344]	; (8001470 <main+0x2c0>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	1c5a      	adds	r2, r3, #1
 800131c:	4954      	ldr	r1, [pc, #336]	; (8001470 <main+0x2c0>)
 800131e:	600a      	str	r2, [r1, #0]
 8001320:	2b09      	cmp	r3, #9
 8001322:	ddec      	ble.n	80012fe <main+0x14e>
 8001324:	e000      	b.n	8001328 <main+0x178>
              break;
 8001326:	bf00      	nop
      }
      if(ret == -1) {
 8001328:	4b53      	ldr	r3, [pc, #332]	; (8001478 <main+0x2c8>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001330:	d100      	bne.n	8001334 <main+0x184>
          goto first;
 8001332:	e75f      	b.n	80011f4 <main+0x44>
      }
      HAL_Delay(150);
 8001334:	2096      	movs	r0, #150	; 0x96
 8001336:	f002 f939 	bl	80035ac <HAL_Delay>


      iter = 0;
 800133a:	4b4d      	ldr	r3, [pc, #308]	; (8001470 <main+0x2c0>)
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
      while(iter++ <10) {
 8001340:	e00c      	b.n	800135c <main+0x1ac>
          ret = n58_normal_check("AT+CIMI\r\n");
 8001342:	4850      	ldr	r0, [pc, #320]	; (8001484 <main+0x2d4>)
 8001344:	f001 fd7e 	bl	8002e44 <n58_normal_check>
 8001348:	4603      	mov	r3, r0
 800134a:	4a4b      	ldr	r2, [pc, #300]	; (8001478 <main+0x2c8>)
 800134c:	6013      	str	r3, [r2, #0]
          if(ret == 0) {
 800134e:	4b4a      	ldr	r3, [pc, #296]	; (8001478 <main+0x2c8>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d00a      	beq.n	800136c <main+0x1bc>
              break;
          }
          HAL_Delay(200);
 8001356:	20c8      	movs	r0, #200	; 0xc8
 8001358:	f002 f928 	bl	80035ac <HAL_Delay>
      while(iter++ <10) {
 800135c:	4b44      	ldr	r3, [pc, #272]	; (8001470 <main+0x2c0>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	1c5a      	adds	r2, r3, #1
 8001362:	4943      	ldr	r1, [pc, #268]	; (8001470 <main+0x2c0>)
 8001364:	600a      	str	r2, [r1, #0]
 8001366:	2b09      	cmp	r3, #9
 8001368:	ddeb      	ble.n	8001342 <main+0x192>
 800136a:	e000      	b.n	800136e <main+0x1be>
              break;
 800136c:	bf00      	nop
      }
      if(ret == -1) {
 800136e:	4b42      	ldr	r3, [pc, #264]	; (8001478 <main+0x2c8>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001376:	d100      	bne.n	800137a <main+0x1ca>
          goto first ;
 8001378:	e73c      	b.n	80011f4 <main+0x44>
      }
      HAL_Delay(150);
 800137a:	2096      	movs	r0, #150	; 0x96
 800137c:	f002 f916 	bl	80035ac <HAL_Delay>


      iter = 0;
 8001380:	4b3b      	ldr	r3, [pc, #236]	; (8001470 <main+0x2c0>)
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
      while(iter++ <10) {
 8001386:	e00c      	b.n	80013a2 <main+0x1f2>
          ret = n58_normal_check("AT+CREG=2\r\n");
 8001388:	483f      	ldr	r0, [pc, #252]	; (8001488 <main+0x2d8>)
 800138a:	f001 fd5b 	bl	8002e44 <n58_normal_check>
 800138e:	4603      	mov	r3, r0
 8001390:	4a39      	ldr	r2, [pc, #228]	; (8001478 <main+0x2c8>)
 8001392:	6013      	str	r3, [r2, #0]
          if(ret == 0) {
 8001394:	4b38      	ldr	r3, [pc, #224]	; (8001478 <main+0x2c8>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d00a      	beq.n	80013b2 <main+0x202>
              break;
          }
          HAL_Delay(200);
 800139c:	20c8      	movs	r0, #200	; 0xc8
 800139e:	f002 f905 	bl	80035ac <HAL_Delay>
      while(iter++ <10) {
 80013a2:	4b33      	ldr	r3, [pc, #204]	; (8001470 <main+0x2c0>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	1c5a      	adds	r2, r3, #1
 80013a8:	4931      	ldr	r1, [pc, #196]	; (8001470 <main+0x2c0>)
 80013aa:	600a      	str	r2, [r1, #0]
 80013ac:	2b09      	cmp	r3, #9
 80013ae:	ddeb      	ble.n	8001388 <main+0x1d8>
 80013b0:	e000      	b.n	80013b4 <main+0x204>
              break;
 80013b2:	bf00      	nop
      }
      if(ret == -1) {
 80013b4:	4b30      	ldr	r3, [pc, #192]	; (8001478 <main+0x2c8>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013bc:	d100      	bne.n	80013c0 <main+0x210>
          goto first ;
 80013be:	e719      	b.n	80011f4 <main+0x44>
      }
      HAL_Delay(150);
 80013c0:	2096      	movs	r0, #150	; 0x96
 80013c2:	f002 f8f3 	bl	80035ac <HAL_Delay>


      iter = 0;
 80013c6:	4b2a      	ldr	r3, [pc, #168]	; (8001470 <main+0x2c0>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
      while(iter++ <10) {
 80013cc:	e00b      	b.n	80013e6 <main+0x236>
          ret = n58_check_creg();
 80013ce:	f001 fde9 	bl	8002fa4 <n58_check_creg>
 80013d2:	4603      	mov	r3, r0
 80013d4:	4a28      	ldr	r2, [pc, #160]	; (8001478 <main+0x2c8>)
 80013d6:	6013      	str	r3, [r2, #0]
          if(ret == 0) {
 80013d8:	4b27      	ldr	r3, [pc, #156]	; (8001478 <main+0x2c8>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d00a      	beq.n	80013f6 <main+0x246>
              break;
          }
          HAL_Delay(200);
 80013e0:	20c8      	movs	r0, #200	; 0xc8
 80013e2:	f002 f8e3 	bl	80035ac <HAL_Delay>
      while(iter++ <10) {
 80013e6:	4b22      	ldr	r3, [pc, #136]	; (8001470 <main+0x2c0>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	1c5a      	adds	r2, r3, #1
 80013ec:	4920      	ldr	r1, [pc, #128]	; (8001470 <main+0x2c0>)
 80013ee:	600a      	str	r2, [r1, #0]
 80013f0:	2b09      	cmp	r3, #9
 80013f2:	ddec      	ble.n	80013ce <main+0x21e>
 80013f4:	e000      	b.n	80013f8 <main+0x248>
              break;
 80013f6:	bf00      	nop
      }
      if(ret == -1) {
 80013f8:	4b1f      	ldr	r3, [pc, #124]	; (8001478 <main+0x2c8>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001400:	d100      	bne.n	8001404 <main+0x254>
          goto first ;
 8001402:	e6f7      	b.n	80011f4 <main+0x44>
      }



      HAL_Delay(150);
 8001404:	2096      	movs	r0, #150	; 0x96
 8001406:	f002 f8d1 	bl	80035ac <HAL_Delay>
      iter = 0;
 800140a:	4b19      	ldr	r3, [pc, #100]	; (8001470 <main+0x2c0>)
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
      while(iter++ <10) {
 8001410:	e00c      	b.n	800142c <main+0x27c>
          ret = n58_normal_check("AT+CREG=0\r\n");
 8001412:	481e      	ldr	r0, [pc, #120]	; (800148c <main+0x2dc>)
 8001414:	f001 fd16 	bl	8002e44 <n58_normal_check>
 8001418:	4603      	mov	r3, r0
 800141a:	4a17      	ldr	r2, [pc, #92]	; (8001478 <main+0x2c8>)
 800141c:	6013      	str	r3, [r2, #0]
          if(ret == 0) {
 800141e:	4b16      	ldr	r3, [pc, #88]	; (8001478 <main+0x2c8>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d00a      	beq.n	800143c <main+0x28c>
              break;
          }
          HAL_Delay(200);
 8001426:	20c8      	movs	r0, #200	; 0xc8
 8001428:	f002 f8c0 	bl	80035ac <HAL_Delay>
      while(iter++ <10) {
 800142c:	4b10      	ldr	r3, [pc, #64]	; (8001470 <main+0x2c0>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	1c5a      	adds	r2, r3, #1
 8001432:	490f      	ldr	r1, [pc, #60]	; (8001470 <main+0x2c0>)
 8001434:	600a      	str	r2, [r1, #0]
 8001436:	2b09      	cmp	r3, #9
 8001438:	ddeb      	ble.n	8001412 <main+0x262>
 800143a:	e000      	b.n	800143e <main+0x28e>
              break;
 800143c:	bf00      	nop
      }
      if(ret == -1) {
 800143e:	4b0e      	ldr	r3, [pc, #56]	; (8001478 <main+0x2c8>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001446:	d100      	bne.n	800144a <main+0x29a>
          goto first ;
 8001448:	e6d4      	b.n	80011f4 <main+0x44>
      }
      HAL_Delay(150);
 800144a:	2096      	movs	r0, #150	; 0x96
 800144c:	f002 f8ae 	bl	80035ac <HAL_Delay>


      iter = 0;
 8001450:	4b07      	ldr	r3, [pc, #28]	; (8001470 <main+0x2c0>)
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
      while(iter++ <10) {
 8001456:	e028      	b.n	80014aa <main+0x2fa>
 8001458:	20000470 	.word	0x20000470
 800145c:	200003ac 	.word	0x200003ac
 8001460:	40010c00 	.word	0x40010c00
 8001464:	2000030c 	.word	0x2000030c
 8001468:	0800b230 	.word	0x0800b230
 800146c:	0800b23c 	.word	0x0800b23c
 8001470:	2000021c 	.word	0x2000021c
 8001474:	0800b24c 	.word	0x0800b24c
 8001478:	20000018 	.word	0x20000018
 800147c:	0800b254 	.word	0x0800b254
 8001480:	0800b25c 	.word	0x0800b25c
 8001484:	0800b268 	.word	0x0800b268
 8001488:	0800b274 	.word	0x0800b274
 800148c:	0800b280 	.word	0x0800b280
          ret = n58_normal_check("AT+CGATT=1\r\n");
 8001490:	489c      	ldr	r0, [pc, #624]	; (8001704 <main+0x554>)
 8001492:	f001 fcd7 	bl	8002e44 <n58_normal_check>
 8001496:	4603      	mov	r3, r0
 8001498:	4a9b      	ldr	r2, [pc, #620]	; (8001708 <main+0x558>)
 800149a:	6013      	str	r3, [r2, #0]
          if(ret == 0) {
 800149c:	4b9a      	ldr	r3, [pc, #616]	; (8001708 <main+0x558>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d00a      	beq.n	80014ba <main+0x30a>
              break;
          }
          HAL_Delay(200);
 80014a4:	20c8      	movs	r0, #200	; 0xc8
 80014a6:	f002 f881 	bl	80035ac <HAL_Delay>
      while(iter++ <10) {
 80014aa:	4b98      	ldr	r3, [pc, #608]	; (800170c <main+0x55c>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	1c5a      	adds	r2, r3, #1
 80014b0:	4996      	ldr	r1, [pc, #600]	; (800170c <main+0x55c>)
 80014b2:	600a      	str	r2, [r1, #0]
 80014b4:	2b09      	cmp	r3, #9
 80014b6:	ddeb      	ble.n	8001490 <main+0x2e0>
 80014b8:	e000      	b.n	80014bc <main+0x30c>
              break;
 80014ba:	bf00      	nop
      }
      if(ret == -1) {
 80014bc:	4b92      	ldr	r3, [pc, #584]	; (8001708 <main+0x558>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014c4:	d100      	bne.n	80014c8 <main+0x318>
          goto first ;
 80014c6:	e695      	b.n	80011f4 <main+0x44>
      }
      HAL_Delay(150);
 80014c8:	2096      	movs	r0, #150	; 0x96
 80014ca:	f002 f86f 	bl	80035ac <HAL_Delay>



      iter = 0;
 80014ce:	4b8f      	ldr	r3, [pc, #572]	; (800170c <main+0x55c>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
      while(iter++ <10) {
 80014d4:	e00b      	b.n	80014ee <main+0x33e>
          ret = n58_check_cgatt();
 80014d6:	f001 fd29 	bl	8002f2c <n58_check_cgatt>
 80014da:	4603      	mov	r3, r0
 80014dc:	4a8a      	ldr	r2, [pc, #552]	; (8001708 <main+0x558>)
 80014de:	6013      	str	r3, [r2, #0]
          if(ret == 0) {
 80014e0:	4b89      	ldr	r3, [pc, #548]	; (8001708 <main+0x558>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d00a      	beq.n	80014fe <main+0x34e>
              break;
          }
          HAL_Delay(200);
 80014e8:	20c8      	movs	r0, #200	; 0xc8
 80014ea:	f002 f85f 	bl	80035ac <HAL_Delay>
      while(iter++ <10) {
 80014ee:	4b87      	ldr	r3, [pc, #540]	; (800170c <main+0x55c>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	1c5a      	adds	r2, r3, #1
 80014f4:	4985      	ldr	r1, [pc, #532]	; (800170c <main+0x55c>)
 80014f6:	600a      	str	r2, [r1, #0]
 80014f8:	2b09      	cmp	r3, #9
 80014fa:	ddec      	ble.n	80014d6 <main+0x326>
 80014fc:	e000      	b.n	8001500 <main+0x350>
              break;
 80014fe:	bf00      	nop
      }
      if(ret == -1) {
 8001500:	4b81      	ldr	r3, [pc, #516]	; (8001708 <main+0x558>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001508:	d100      	bne.n	800150c <main+0x35c>
          goto first;
 800150a:	e673      	b.n	80011f4 <main+0x44>
      }
      HAL_Delay(150);
 800150c:	2096      	movs	r0, #150	; 0x96
 800150e:	f002 f84d 	bl	80035ac <HAL_Delay>


      iter = 0;
 8001512:	4b7e      	ldr	r3, [pc, #504]	; (800170c <main+0x55c>)
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
      while(iter++ <10) {
 8001518:	e00c      	b.n	8001534 <main+0x384>
          ret = n58_normal_check("AT+CGDCONT=1,\"IP\", \"CMIOT\"\r\n");
 800151a:	487d      	ldr	r0, [pc, #500]	; (8001710 <main+0x560>)
 800151c:	f001 fc92 	bl	8002e44 <n58_normal_check>
 8001520:	4603      	mov	r3, r0
 8001522:	4a79      	ldr	r2, [pc, #484]	; (8001708 <main+0x558>)
 8001524:	6013      	str	r3, [r2, #0]
          if(ret == 0) {
 8001526:	4b78      	ldr	r3, [pc, #480]	; (8001708 <main+0x558>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d00a      	beq.n	8001544 <main+0x394>
              break;
          }
          HAL_Delay(200);
 800152e:	20c8      	movs	r0, #200	; 0xc8
 8001530:	f002 f83c 	bl	80035ac <HAL_Delay>
      while(iter++ <10) {
 8001534:	4b75      	ldr	r3, [pc, #468]	; (800170c <main+0x55c>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	1c5a      	adds	r2, r3, #1
 800153a:	4974      	ldr	r1, [pc, #464]	; (800170c <main+0x55c>)
 800153c:	600a      	str	r2, [r1, #0]
 800153e:	2b09      	cmp	r3, #9
 8001540:	ddeb      	ble.n	800151a <main+0x36a>
 8001542:	e000      	b.n	8001546 <main+0x396>
              break;
 8001544:	bf00      	nop
      }
      if(ret == -1) {
 8001546:	4b70      	ldr	r3, [pc, #448]	; (8001708 <main+0x558>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800154e:	d100      	bne.n	8001552 <main+0x3a2>
          goto first ;
 8001550:	e650      	b.n	80011f4 <main+0x44>
      }
      HAL_Delay(150);
 8001552:	2096      	movs	r0, #150	; 0x96
 8001554:	f002 f82a 	bl	80035ac <HAL_Delay>



      iter = 0;
 8001558:	4b6c      	ldr	r3, [pc, #432]	; (800170c <main+0x55c>)
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
      while(iter++ <10) {
 800155e:	e00c      	b.n	800157a <main+0x3ca>
          ret = n58_normal_check("AT+XIIC=1\r\n");
 8001560:	486c      	ldr	r0, [pc, #432]	; (8001714 <main+0x564>)
 8001562:	f001 fc6f 	bl	8002e44 <n58_normal_check>
 8001566:	4603      	mov	r3, r0
 8001568:	4a67      	ldr	r2, [pc, #412]	; (8001708 <main+0x558>)
 800156a:	6013      	str	r3, [r2, #0]
          if(ret == 0) {
 800156c:	4b66      	ldr	r3, [pc, #408]	; (8001708 <main+0x558>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d00a      	beq.n	800158a <main+0x3da>
              break;
          }
          HAL_Delay(200);
 8001574:	20c8      	movs	r0, #200	; 0xc8
 8001576:	f002 f819 	bl	80035ac <HAL_Delay>
      while(iter++ <10) {
 800157a:	4b64      	ldr	r3, [pc, #400]	; (800170c <main+0x55c>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	1c5a      	adds	r2, r3, #1
 8001580:	4962      	ldr	r1, [pc, #392]	; (800170c <main+0x55c>)
 8001582:	600a      	str	r2, [r1, #0]
 8001584:	2b09      	cmp	r3, #9
 8001586:	ddeb      	ble.n	8001560 <main+0x3b0>
 8001588:	e000      	b.n	800158c <main+0x3dc>
              break;
 800158a:	bf00      	nop
      }
      if(ret == -1) {
 800158c:	4b5e      	ldr	r3, [pc, #376]	; (8001708 <main+0x558>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001594:	d100      	bne.n	8001598 <main+0x3e8>
          goto first ;
 8001596:	e62d      	b.n	80011f4 <main+0x44>
      }
      HAL_Delay(150);
 8001598:	2096      	movs	r0, #150	; 0x96
 800159a:	f002 f807 	bl	80035ac <HAL_Delay>



      iter = 0;
 800159e:	4b5b      	ldr	r3, [pc, #364]	; (800170c <main+0x55c>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
      while(iter++ <100) {
 80015a4:	e00b      	b.n	80015be <main+0x40e>
          ret = n58_check_xiic();
 80015a6:	f001 fd3b 	bl	8003020 <n58_check_xiic>
 80015aa:	4603      	mov	r3, r0
 80015ac:	4a56      	ldr	r2, [pc, #344]	; (8001708 <main+0x558>)
 80015ae:	6013      	str	r3, [r2, #0]
          if(ret == 0) {
 80015b0:	4b55      	ldr	r3, [pc, #340]	; (8001708 <main+0x558>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d00a      	beq.n	80015ce <main+0x41e>
              break;
          }
          HAL_Delay(200);
 80015b8:	20c8      	movs	r0, #200	; 0xc8
 80015ba:	f001 fff7 	bl	80035ac <HAL_Delay>
      while(iter++ <100) {
 80015be:	4b53      	ldr	r3, [pc, #332]	; (800170c <main+0x55c>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	1c5a      	adds	r2, r3, #1
 80015c4:	4951      	ldr	r1, [pc, #324]	; (800170c <main+0x55c>)
 80015c6:	600a      	str	r2, [r1, #0]
 80015c8:	2b63      	cmp	r3, #99	; 0x63
 80015ca:	ddec      	ble.n	80015a6 <main+0x3f6>
 80015cc:	e000      	b.n	80015d0 <main+0x420>
              break;
 80015ce:	bf00      	nop
      }

      if(ret == -1) {
 80015d0:	4b4d      	ldr	r3, [pc, #308]	; (8001708 <main+0x558>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015d8:	d100      	bne.n	80015dc <main+0x42c>
          goto first ;
 80015da:	e60b      	b.n	80011f4 <main+0x44>
      }


      HAL_Delay(150);
 80015dc:	2096      	movs	r0, #150	; 0x96
 80015de:	f001 ffe5 	bl	80035ac <HAL_Delay>
      iter = 0;
 80015e2:	4b4a      	ldr	r3, [pc, #296]	; (800170c <main+0x55c>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
      while(iter++ <10) {
 80015e8:	e00c      	b.n	8001604 <main+0x454>
          ret = n58_normal_check("AT+HTTPSCFG=\"sslversion\",3\r\n");
 80015ea:	484b      	ldr	r0, [pc, #300]	; (8001718 <main+0x568>)
 80015ec:	f001 fc2a 	bl	8002e44 <n58_normal_check>
 80015f0:	4603      	mov	r3, r0
 80015f2:	4a45      	ldr	r2, [pc, #276]	; (8001708 <main+0x558>)
 80015f4:	6013      	str	r3, [r2, #0]
          if(ret == 0) {
 80015f6:	4b44      	ldr	r3, [pc, #272]	; (8001708 <main+0x558>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d00a      	beq.n	8001614 <main+0x464>
              break;
          }
          HAL_Delay(200);
 80015fe:	20c8      	movs	r0, #200	; 0xc8
 8001600:	f001 ffd4 	bl	80035ac <HAL_Delay>
      while(iter++ <10) {
 8001604:	4b41      	ldr	r3, [pc, #260]	; (800170c <main+0x55c>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	1c5a      	adds	r2, r3, #1
 800160a:	4940      	ldr	r1, [pc, #256]	; (800170c <main+0x55c>)
 800160c:	600a      	str	r2, [r1, #0]
 800160e:	2b09      	cmp	r3, #9
 8001610:	ddeb      	ble.n	80015ea <main+0x43a>
 8001612:	e000      	b.n	8001616 <main+0x466>
              break;
 8001614:	bf00      	nop
      }
      if(ret == -1) {
 8001616:	4b3c      	ldr	r3, [pc, #240]	; (8001708 <main+0x558>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800161e:	d100      	bne.n	8001622 <main+0x472>
          goto first ;
 8001620:	e5e8      	b.n	80011f4 <main+0x44>
      }


      HAL_Delay(150);
 8001622:	2096      	movs	r0, #150	; 0x96
 8001624:	f001 ffc2 	bl	80035ac <HAL_Delay>
      iter = 0;
 8001628:	4b38      	ldr	r3, [pc, #224]	; (800170c <main+0x55c>)
 800162a:	2200      	movs	r2, #0
 800162c:	601a      	str	r2, [r3, #0]
      while(iter++ <10) {
 800162e:	e00c      	b.n	800164a <main+0x49a>
          ret = n58_normal_check("AT+HTTPSCFG =\"authmode\",0\r\n");
 8001630:	483a      	ldr	r0, [pc, #232]	; (800171c <main+0x56c>)
 8001632:	f001 fc07 	bl	8002e44 <n58_normal_check>
 8001636:	4603      	mov	r3, r0
 8001638:	4a33      	ldr	r2, [pc, #204]	; (8001708 <main+0x558>)
 800163a:	6013      	str	r3, [r2, #0]
          if(ret == 0) {
 800163c:	4b32      	ldr	r3, [pc, #200]	; (8001708 <main+0x558>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d00a      	beq.n	800165a <main+0x4aa>
              break;
          }
          HAL_Delay(200);
 8001644:	20c8      	movs	r0, #200	; 0xc8
 8001646:	f001 ffb1 	bl	80035ac <HAL_Delay>
      while(iter++ <10) {
 800164a:	4b30      	ldr	r3, [pc, #192]	; (800170c <main+0x55c>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	1c5a      	adds	r2, r3, #1
 8001650:	492e      	ldr	r1, [pc, #184]	; (800170c <main+0x55c>)
 8001652:	600a      	str	r2, [r1, #0]
 8001654:	2b09      	cmp	r3, #9
 8001656:	ddeb      	ble.n	8001630 <main+0x480>
 8001658:	e000      	b.n	800165c <main+0x4ac>
              break;
 800165a:	bf00      	nop
      }
      if(ret == -1) {
 800165c:	4b2a      	ldr	r3, [pc, #168]	; (8001708 <main+0x558>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001664:	d100      	bne.n	8001668 <main+0x4b8>
          goto first ;
 8001666:	e5c5      	b.n	80011f4 <main+0x44>
      }


  		HAL_Delay(150);
 8001668:	2096      	movs	r0, #150	; 0x96
 800166a:	f001 ff9f 	bl	80035ac <HAL_Delay>
      iter = 0;
 800166e:	4b27      	ldr	r3, [pc, #156]	; (800170c <main+0x55c>)
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
      while(iter++ <10) {
 8001674:	e00d      	b.n	8001692 <main+0x4e2>
          ret = n58_normal_check("AT$MYGPSPWR=1\r\n");
 8001676:	482a      	ldr	r0, [pc, #168]	; (8001720 <main+0x570>)
 8001678:	f001 fbe4 	bl	8002e44 <n58_normal_check>
 800167c:	4603      	mov	r3, r0
 800167e:	4a22      	ldr	r2, [pc, #136]	; (8001708 <main+0x558>)
 8001680:	6013      	str	r3, [r2, #0]
          if(ret == 0) {
 8001682:	4b21      	ldr	r3, [pc, #132]	; (8001708 <main+0x558>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d00b      	beq.n	80016a2 <main+0x4f2>
              break;
          }
          HAL_Delay(1000);
 800168a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800168e:	f001 ff8d 	bl	80035ac <HAL_Delay>
      while(iter++ <10) {
 8001692:	4b1e      	ldr	r3, [pc, #120]	; (800170c <main+0x55c>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	1c5a      	adds	r2, r3, #1
 8001698:	491c      	ldr	r1, [pc, #112]	; (800170c <main+0x55c>)
 800169a:	600a      	str	r2, [r1, #0]
 800169c:	2b09      	cmp	r3, #9
 800169e:	ddea      	ble.n	8001676 <main+0x4c6>
 80016a0:	e000      	b.n	80016a4 <main+0x4f4>
              break;
 80016a2:	bf00      	nop
      }
      if(ret == -1) {
 80016a4:	4b18      	ldr	r3, [pc, #96]	; (8001708 <main+0x558>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016ac:	d100      	bne.n	80016b0 <main+0x500>
          goto first ;
 80016ae:	e5a1      	b.n	80011f4 <main+0x44>
      }
  	HAL_Delay(150);
 80016b0:	2096      	movs	r0, #150	; 0x96
 80016b2:	f001 ff7b 	bl	80035ac <HAL_Delay>


    iter = 0;
 80016b6:	4b15      	ldr	r3, [pc, #84]	; (800170c <main+0x55c>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
    while(iter++ <10) {
 80016bc:	e00c      	b.n	80016d8 <main+0x528>
        ret = n58_normal_check("AT$MYGNSSSEL=0\r\n");
 80016be:	4819      	ldr	r0, [pc, #100]	; (8001724 <main+0x574>)
 80016c0:	f001 fbc0 	bl	8002e44 <n58_normal_check>
 80016c4:	4603      	mov	r3, r0
 80016c6:	4a10      	ldr	r2, [pc, #64]	; (8001708 <main+0x558>)
 80016c8:	6013      	str	r3, [r2, #0]
        if(ret == 0) {
 80016ca:	4b0f      	ldr	r3, [pc, #60]	; (8001708 <main+0x558>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d00a      	beq.n	80016e8 <main+0x538>
            break;
        }
        HAL_Delay(200);
 80016d2:	20c8      	movs	r0, #200	; 0xc8
 80016d4:	f001 ff6a 	bl	80035ac <HAL_Delay>
    while(iter++ <10) {
 80016d8:	4b0c      	ldr	r3, [pc, #48]	; (800170c <main+0x55c>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	1c5a      	adds	r2, r3, #1
 80016de:	490b      	ldr	r1, [pc, #44]	; (800170c <main+0x55c>)
 80016e0:	600a      	str	r2, [r1, #0]
 80016e2:	2b09      	cmp	r3, #9
 80016e4:	ddeb      	ble.n	80016be <main+0x50e>
 80016e6:	e000      	b.n	80016ea <main+0x53a>
            break;
 80016e8:	bf00      	nop
    }
    if(ret == -1) {
 80016ea:	4b07      	ldr	r3, [pc, #28]	; (8001708 <main+0x558>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016f2:	d100      	bne.n	80016f6 <main+0x546>
        goto first;
 80016f4:	e57e      	b.n	80011f4 <main+0x44>
    }
  	HAL_Delay(150);
 80016f6:	2096      	movs	r0, #150	; 0x96
 80016f8:	f001 ff58 	bl	80035ac <HAL_Delay>


      iter = 0;
 80016fc:	4b03      	ldr	r3, [pc, #12]	; (800170c <main+0x55c>)
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
      while(iter++ <10) {
 8001702:	e01e      	b.n	8001742 <main+0x592>
 8001704:	0800b28c 	.word	0x0800b28c
 8001708:	20000018 	.word	0x20000018
 800170c:	2000021c 	.word	0x2000021c
 8001710:	0800b29c 	.word	0x0800b29c
 8001714:	0800b2bc 	.word	0x0800b2bc
 8001718:	0800b2c8 	.word	0x0800b2c8
 800171c:	0800b2e8 	.word	0x0800b2e8
 8001720:	0800b304 	.word	0x0800b304
 8001724:	0800b314 	.word	0x0800b314
          ret = n58_normal_check("AT+HTTPSPARA=url,\"bus.bitworkshop.cn/bus/position\"\r\n");
 8001728:	48b1      	ldr	r0, [pc, #708]	; (80019f0 <main+0x840>)
 800172a:	f001 fb8b 	bl	8002e44 <n58_normal_check>
 800172e:	4603      	mov	r3, r0
 8001730:	4ab0      	ldr	r2, [pc, #704]	; (80019f4 <main+0x844>)
 8001732:	6013      	str	r3, [r2, #0]
          if(ret == 0) {
 8001734:	4baf      	ldr	r3, [pc, #700]	; (80019f4 <main+0x844>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d00a      	beq.n	8001752 <main+0x5a2>
              break;
          }
          HAL_Delay(200);
 800173c:	20c8      	movs	r0, #200	; 0xc8
 800173e:	f001 ff35 	bl	80035ac <HAL_Delay>
      while(iter++ <10) {
 8001742:	4bad      	ldr	r3, [pc, #692]	; (80019f8 <main+0x848>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	1c5a      	adds	r2, r3, #1
 8001748:	49ab      	ldr	r1, [pc, #684]	; (80019f8 <main+0x848>)
 800174a:	600a      	str	r2, [r1, #0]
 800174c:	2b09      	cmp	r3, #9
 800174e:	ddeb      	ble.n	8001728 <main+0x578>
 8001750:	e000      	b.n	8001754 <main+0x5a4>
              break;
 8001752:	bf00      	nop
      }
      if(ret == -1) {
 8001754:	4ba7      	ldr	r3, [pc, #668]	; (80019f4 <main+0x844>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800175c:	d100      	bne.n	8001760 <main+0x5b0>
          goto first ;
 800175e:	e549      	b.n	80011f4 <main+0x44>
      }
      HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);
 8001760:	2201      	movs	r2, #1
 8001762:	2120      	movs	r1, #32
 8001764:	48a5      	ldr	r0, [pc, #660]	; (80019fc <main+0x84c>)
 8001766:	f002 fe69 	bl	800443c <HAL_GPIO_WritePin>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_5,GPIO_PIN_RESET);
 800176a:	2200      	movs	r2, #0
 800176c:	2120      	movs	r1, #32
 800176e:	48a4      	ldr	r0, [pc, #656]	; (8001a00 <main+0x850>)
 8001770:	f002 fe64 	bl	800443c <HAL_GPIO_WritePin>
	  			GNSSopen:
				HAL_Delay(1000);
 8001774:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001778:	f001 ff18 	bl	80035ac <HAL_Delay>
	  			memset(USART_RX_BUF, 0, sizeof(USART_RX_BUF));
 800177c:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8001780:	2100      	movs	r1, #0
 8001782:	48a0      	ldr	r0, [pc, #640]	; (8001a04 <main+0x854>)
 8001784:	f003 fff8 	bl	8005778 <memset>
	  		    HAL_UART_DMAStop(&huart1);
 8001788:	489f      	ldr	r0, [pc, #636]	; (8001a08 <main+0x858>)
 800178a:	f003 fbc3 	bl	8004f14 <HAL_UART_DMAStop>
	  		    HAL_UART_Receive_DMA(&huart1,USART_RX_BUF, sizeof(USART_RX_BUF));
 800178e:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8001792:	499c      	ldr	r1, [pc, #624]	; (8001a04 <main+0x854>)
 8001794:	489c      	ldr	r0, [pc, #624]	; (8001a08 <main+0x858>)
 8001796:	f003 fb3d 	bl	8004e14 <HAL_UART_Receive_DMA>
	  			strcpy((char *)n58_sdata,"AT$MYGNSSMSG\r\n");
 800179a:	4a9c      	ldr	r2, [pc, #624]	; (8001a0c <main+0x85c>)
 800179c:	4b9c      	ldr	r3, [pc, #624]	; (8001a10 <main+0x860>)
 800179e:	4614      	mov	r4, r2
 80017a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017a2:	c407      	stmia	r4!, {r0, r1, r2}
 80017a4:	8023      	strh	r3, [r4, #0]
 80017a6:	3402      	adds	r4, #2
 80017a8:	0c1b      	lsrs	r3, r3, #16
 80017aa:	7023      	strb	r3, [r4, #0]
	  			HAL_UART_Transmit_DMA(&huart1, (uint8_t*)n58_sdata,strlen(n58_sdata));//发�??
 80017ac:	4897      	ldr	r0, [pc, #604]	; (8001a0c <main+0x85c>)
 80017ae:	f7fe fd3b 	bl	8000228 <strlen>
 80017b2:	4603      	mov	r3, r0
 80017b4:	b29b      	uxth	r3, r3
 80017b6:	461a      	mov	r2, r3
 80017b8:	4994      	ldr	r1, [pc, #592]	; (8001a0c <main+0x85c>)
 80017ba:	4893      	ldr	r0, [pc, #588]	; (8001a08 <main+0x858>)
 80017bc:	f003 fabe 	bl	8004d3c <HAL_UART_Transmit_DMA>
	  			HAL_Delay(1000);
 80017c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017c4:	f001 fef2 	bl	80035ac <HAL_Delay>
	  			GNSS_Analysis(&gnssx,USART_RX_BUF);//GNSS分析
 80017c8:	498e      	ldr	r1, [pc, #568]	; (8001a04 <main+0x854>)
 80017ca:	4892      	ldr	r0, [pc, #584]	; (8001a14 <main+0x864>)
 80017cc:	f000 fe68 	bl	80024a0 <GNSS_Analysis>
	  			Speed=gnssx.speed;								//速度
 80017d0:	4b90      	ldr	r3, [pc, #576]	; (8001a14 <main+0x864>)
 80017d2:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff fae8 	bl	8000dac <__aeabi_ui2f>
 80017dc:	4603      	mov	r3, r0
 80017de:	4a8e      	ldr	r2, [pc, #568]	; (8001a18 <main+0x868>)
 80017e0:	6013      	str	r3, [r2, #0]
	  			InLon=gnssx.longitude;
 80017e2:	4b8c      	ldr	r3, [pc, #560]	; (8001a14 <main+0x864>)
 80017e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7fe fe68 	bl	80004bc <__aeabi_ui2d>
 80017ec:	4602      	mov	r2, r0
 80017ee:	460b      	mov	r3, r1
 80017f0:	498a      	ldr	r1, [pc, #552]	; (8001a1c <main+0x86c>)
 80017f2:	e9c1 2300 	strd	r2, r3, [r1]
	  			InLat=gnssx.latitude;			//经纬
 80017f6:	4b87      	ldr	r3, [pc, #540]	; (8001a14 <main+0x864>)
 80017f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7fe fe5e 	bl	80004bc <__aeabi_ui2d>
 8001800:	4602      	mov	r2, r0
 8001802:	460b      	mov	r3, r1
 8001804:	4986      	ldr	r1, [pc, #536]	; (8001a20 <main+0x870>)
 8001806:	e9c1 2300 	strd	r2, r3, [r1]
	  			wgs2gcj(InLat/100000,InLon/100000, &OutLat,&OutLon);  //坐标系转�??????
 800180a:	4b85      	ldr	r3, [pc, #532]	; (8001a20 <main+0x870>)
 800180c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001810:	a375      	add	r3, pc, #468	; (adr r3, 80019e8 <main+0x838>)
 8001812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001816:	f7fe fff5 	bl	8000804 <__aeabi_ddiv>
 800181a:	4602      	mov	r2, r0
 800181c:	460b      	mov	r3, r1
 800181e:	4614      	mov	r4, r2
 8001820:	461d      	mov	r5, r3
 8001822:	4b7e      	ldr	r3, [pc, #504]	; (8001a1c <main+0x86c>)
 8001824:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001828:	a36f      	add	r3, pc, #444	; (adr r3, 80019e8 <main+0x838>)
 800182a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800182e:	f7fe ffe9 	bl	8000804 <__aeabi_ddiv>
 8001832:	4602      	mov	r2, r0
 8001834:	460b      	mov	r3, r1
 8001836:	497b      	ldr	r1, [pc, #492]	; (8001a24 <main+0x874>)
 8001838:	9101      	str	r1, [sp, #4]
 800183a:	497b      	ldr	r1, [pc, #492]	; (8001a28 <main+0x878>)
 800183c:	9100      	str	r1, [sp, #0]
 800183e:	4620      	mov	r0, r4
 8001840:	4629      	mov	r1, r5
 8001842:	f001 f9d7 	bl	8002bf4 <wgs2gcj>
	  			if(OutLat==0.0||OutLon==0.0)
 8001846:	4b78      	ldr	r3, [pc, #480]	; (8001a28 <main+0x878>)
 8001848:	e9d3 0100 	ldrd	r0, r1, [r3]
 800184c:	f04f 0200 	mov.w	r2, #0
 8001850:	f04f 0300 	mov.w	r3, #0
 8001854:	f7ff f914 	bl	8000a80 <__aeabi_dcmpeq>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d10b      	bne.n	8001876 <main+0x6c6>
 800185e:	4b71      	ldr	r3, [pc, #452]	; (8001a24 <main+0x874>)
 8001860:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001864:	f04f 0200 	mov.w	r2, #0
 8001868:	f04f 0300 	mov.w	r3, #0
 800186c:	f7ff f908 	bl	8000a80 <__aeabi_dcmpeq>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d003      	beq.n	800187e <main+0x6ce>
	  					{ firstgnss=1;goto GNSSopen;}
 8001876:	4b6d      	ldr	r3, [pc, #436]	; (8001a2c <main+0x87c>)
 8001878:	2201      	movs	r2, #1
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	e77a      	b.n	8001774 <main+0x5c4>

	  			HAL_GPIO_WritePin(GPIOE,GPIO_PIN_5,GPIO_PIN_SET);
 800187e:	2201      	movs	r2, #1
 8001880:	2120      	movs	r1, #32
 8001882:	485f      	ldr	r0, [pc, #380]	; (8001a00 <main+0x850>)
 8001884:	f002 fdda 	bl	800443c <HAL_GPIO_WritePin>
	  			HAL_Delay (100);
 8001888:	2064      	movs	r0, #100	; 0x64
 800188a:	f001 fe8f 	bl	80035ac <HAL_Delay>
	  			i=0;
 800188e:	4b68      	ldr	r3, [pc, #416]	; (8001a30 <main+0x880>)
 8001890:	2200      	movs	r2, #0
 8001892:	801a      	strh	r2, [r3, #0]
	  			memset(n58_sdata, 0, sizeof(n58_sdata));
 8001894:	2264      	movs	r2, #100	; 0x64
 8001896:	2100      	movs	r1, #0
 8001898:	485c      	ldr	r0, [pc, #368]	; (8001a0c <main+0x85c>)
 800189a:	f003 ff6d 	bl	8005778 <memset>
	  			strcpy((char *)n58_sdata,"AT+HTTPSCLOSE\r\n");
 800189e:	4a5b      	ldr	r2, [pc, #364]	; (8001a0c <main+0x85c>)
 80018a0:	4b64      	ldr	r3, [pc, #400]	; (8001a34 <main+0x884>)
 80018a2:	4614      	mov	r4, r2
 80018a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  			HAL_UART_Transmit_DMA(&huart1, (uint8_t*)n58_sdata,strlen(n58_sdata));//�??????
 80018aa:	4858      	ldr	r0, [pc, #352]	; (8001a0c <main+0x85c>)
 80018ac:	f7fe fcbc 	bl	8000228 <strlen>
 80018b0:	4603      	mov	r3, r0
 80018b2:	b29b      	uxth	r3, r3
 80018b4:	461a      	mov	r2, r3
 80018b6:	4955      	ldr	r1, [pc, #340]	; (8001a0c <main+0x85c>)
 80018b8:	4853      	ldr	r0, [pc, #332]	; (8001a08 <main+0x858>)
 80018ba:	f003 fa3f 	bl	8004d3c <HAL_UART_Transmit_DMA>

	  			memset(USART_RX_BUF, 0, sizeof(USART_RX_BUF));
 80018be:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80018c2:	2100      	movs	r1, #0
 80018c4:	484f      	ldr	r0, [pc, #316]	; (8001a04 <main+0x854>)
 80018c6:	f003 ff57 	bl	8005778 <memset>
	  		    HAL_UART_DMAStop(&huart1);
 80018ca:	484f      	ldr	r0, [pc, #316]	; (8001a08 <main+0x858>)
 80018cc:	f003 fb22 	bl	8004f14 <HAL_UART_DMAStop>
	  		    HAL_UART_Receive_DMA(&huart1,USART_RX_BUF, sizeof(USART_RX_BUF));
 80018d0:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80018d4:	494b      	ldr	r1, [pc, #300]	; (8001a04 <main+0x854>)
 80018d6:	484c      	ldr	r0, [pc, #304]	; (8001a08 <main+0x858>)
 80018d8:	f003 fa9c 	bl	8004e14 <HAL_UART_Receive_DMA>

	  		    memset(n58_sdata, 0, sizeof(n58_sdata));
 80018dc:	2264      	movs	r2, #100	; 0x64
 80018de:	2100      	movs	r1, #0
 80018e0:	484a      	ldr	r0, [pc, #296]	; (8001a0c <main+0x85c>)
 80018e2:	f003 ff49 	bl	8005778 <memset>
	  			strcpy((char *)n58_sdata,"AT+HTTPSSETUP\r\n");
 80018e6:	4a49      	ldr	r2, [pc, #292]	; (8001a0c <main+0x85c>)
 80018e8:	4b53      	ldr	r3, [pc, #332]	; (8001a38 <main+0x888>)
 80018ea:	4614      	mov	r4, r2
 80018ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  			HAL_UART_Transmit_DMA(&huart1, (uint8_t*)n58_sdata,strlen(n58_sdata));//�??????
 80018f2:	4846      	ldr	r0, [pc, #280]	; (8001a0c <main+0x85c>)
 80018f4:	f7fe fc98 	bl	8000228 <strlen>
 80018f8:	4603      	mov	r3, r0
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	461a      	mov	r2, r3
 80018fe:	4943      	ldr	r1, [pc, #268]	; (8001a0c <main+0x85c>)
 8001900:	4841      	ldr	r0, [pc, #260]	; (8001a08 <main+0x858>)
 8001902:	f003 fa1b 	bl	8004d3c <HAL_UART_Transmit_DMA>

	  			SETUP:

	  					if(i<500)
 8001906:	4b4a      	ldr	r3, [pc, #296]	; (8001a30 <main+0x880>)
 8001908:	881b      	ldrh	r3, [r3, #0]
 800190a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800190e:	f080 809f 	bcs.w	8001a50 <main+0x8a0>
	  						{
	  							HAL_Delay (10);
 8001912:	200a      	movs	r0, #10
 8001914:	f001 fe4a 	bl	80035ac <HAL_Delay>
	  							if(!strstr((char*)USART_RX_BUF, "OK"))
 8001918:	4948      	ldr	r1, [pc, #288]	; (8001a3c <main+0x88c>)
 800191a:	483a      	ldr	r0, [pc, #232]	; (8001a04 <main+0x854>)
 800191c:	f004 fdd7 	bl	80064ce <strstr>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d106      	bne.n	8001934 <main+0x784>
	  							{
	  								i++;
 8001926:	4b42      	ldr	r3, [pc, #264]	; (8001a30 <main+0x880>)
 8001928:	881b      	ldrh	r3, [r3, #0]
 800192a:	3301      	adds	r3, #1
 800192c:	b29a      	uxth	r2, r3
 800192e:	4b40      	ldr	r3, [pc, #256]	; (8001a30 <main+0x880>)
 8001930:	801a      	strh	r2, [r3, #0]
	  								goto SETUP;
 8001932:	e7e8      	b.n	8001906 <main+0x756>
	  							}
	  							else{i=0;goto next;	}
 8001934:	4b3e      	ldr	r3, [pc, #248]	; (8001a30 <main+0x880>)
 8001936:	2200      	movs	r2, #0
 8001938:	801a      	strh	r2, [r3, #0]
 800193a:	bf00      	nop



	  				next:

	  					HAL_Delay (300);
 800193c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001940:	f001 fe34 	bl	80035ac <HAL_Delay>
	  				memset(n58_sdataLAS, 0, sizeof(n58_sdataLAS));
 8001944:	2264      	movs	r2, #100	; 0x64
 8001946:	2100      	movs	r1, #0
 8001948:	483d      	ldr	r0, [pc, #244]	; (8001a40 <main+0x890>)
 800194a:	f003 ff15 	bl	8005778 <memset>
	  				sprintf((char *)n58_sdataLAS,"{\"i\":\"606c7c1a25985565e23f18a7\",\"p\":{\"la\":%.6f,\"lo\":%.6f},\"s\":%.2f}\r\n",OutLat,OutLon,Speed/=1000);//OutLat,OutLon  InLatb/100000,InLonb/100000
 800194e:	4b36      	ldr	r3, [pc, #216]	; (8001a28 <main+0x878>)
 8001950:	e9d3 8900 	ldrd	r8, r9, [r3]
 8001954:	4b33      	ldr	r3, [pc, #204]	; (8001a24 <main+0x874>)
 8001956:	e9d3 4500 	ldrd	r4, r5, [r3]
 800195a:	4b2f      	ldr	r3, [pc, #188]	; (8001a18 <main+0x868>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4939      	ldr	r1, [pc, #228]	; (8001a44 <main+0x894>)
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff fb2f 	bl	8000fc4 <__aeabi_fdiv>
 8001966:	4603      	mov	r3, r0
 8001968:	461a      	mov	r2, r3
 800196a:	4b2b      	ldr	r3, [pc, #172]	; (8001a18 <main+0x868>)
 800196c:	601a      	str	r2, [r3, #0]
 800196e:	4b2a      	ldr	r3, [pc, #168]	; (8001a18 <main+0x868>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4618      	mov	r0, r3
 8001974:	f7fe fdc4 	bl	8000500 <__aeabi_f2d>
 8001978:	4602      	mov	r2, r0
 800197a:	460b      	mov	r3, r1
 800197c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001980:	e9cd 4500 	strd	r4, r5, [sp]
 8001984:	4642      	mov	r2, r8
 8001986:	464b      	mov	r3, r9
 8001988:	492f      	ldr	r1, [pc, #188]	; (8001a48 <main+0x898>)
 800198a:	482d      	ldr	r0, [pc, #180]	; (8001a40 <main+0x890>)
 800198c:	f004 fd72 	bl	8006474 <siprintf>

	  				memset(n58_sdata, 0, sizeof(n58_sdata));
 8001990:	2264      	movs	r2, #100	; 0x64
 8001992:	2100      	movs	r1, #0
 8001994:	481d      	ldr	r0, [pc, #116]	; (8001a0c <main+0x85c>)
 8001996:	f003 feef 	bl	8005778 <memset>
	  				sprintf((char *)n58_sdata,"AT+HTTPSACTION=2,%d,2\r\n",strlen(n58_sdataLAS)-2);//OutLat,OutLon  InLatb/100000,InLonb/100000
 800199a:	4829      	ldr	r0, [pc, #164]	; (8001a40 <main+0x890>)
 800199c:	f7fe fc44 	bl	8000228 <strlen>
 80019a0:	4603      	mov	r3, r0
 80019a2:	3b02      	subs	r3, #2
 80019a4:	461a      	mov	r2, r3
 80019a6:	4929      	ldr	r1, [pc, #164]	; (8001a4c <main+0x89c>)
 80019a8:	4818      	ldr	r0, [pc, #96]	; (8001a0c <main+0x85c>)
 80019aa:	f004 fd63 	bl	8006474 <siprintf>

	  				memset(USART_RX_BUF, 0, sizeof(USART_RX_BUF));
 80019ae:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80019b2:	2100      	movs	r1, #0
 80019b4:	4813      	ldr	r0, [pc, #76]	; (8001a04 <main+0x854>)
 80019b6:	f003 fedf 	bl	8005778 <memset>
	  			    HAL_UART_DMAStop(&huart1);
 80019ba:	4813      	ldr	r0, [pc, #76]	; (8001a08 <main+0x858>)
 80019bc:	f003 faaa 	bl	8004f14 <HAL_UART_DMAStop>
	  			    HAL_UART_Receive_DMA(&huart1,USART_RX_BUF, sizeof(USART_RX_BUF));
 80019c0:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80019c4:	490f      	ldr	r1, [pc, #60]	; (8001a04 <main+0x854>)
 80019c6:	4810      	ldr	r0, [pc, #64]	; (8001a08 <main+0x858>)
 80019c8:	f003 fa24 	bl	8004e14 <HAL_UART_Receive_DMA>
	  				HAL_UART_Transmit_DMA(&huart1, (uint8_t*)n58_sdata,strlen(n58_sdata));//发�??
 80019cc:	480f      	ldr	r0, [pc, #60]	; (8001a0c <main+0x85c>)
 80019ce:	f7fe fc2b 	bl	8000228 <strlen>
 80019d2:	4603      	mov	r3, r0
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	461a      	mov	r2, r3
 80019d8:	490c      	ldr	r1, [pc, #48]	; (8001a0c <main+0x85c>)
 80019da:	480b      	ldr	r0, [pc, #44]	; (8001a08 <main+0x858>)
 80019dc:	f003 f9ae 	bl	8004d3c <HAL_UART_Transmit_DMA>
	  				//user_send_data(n58_sdata);//发�?�请�????????????2
	  				HAL_Delay (100);
 80019e0:	2064      	movs	r0, #100	; 0x64
 80019e2:	f001 fde3 	bl	80035ac <HAL_Delay>
 80019e6:	e057      	b.n	8001a98 <main+0x8e8>
 80019e8:	00000000 	.word	0x00000000
 80019ec:	40f86a00 	.word	0x40f86a00
 80019f0:	0800b328 	.word	0x0800b328
 80019f4:	20000018 	.word	0x20000018
 80019f8:	2000021c 	.word	0x2000021c
 80019fc:	40010c00 	.word	0x40010c00
 8001a00:	40011800 	.word	0x40011800
 8001a04:	20000470 	.word	0x20000470
 8001a08:	200003ac 	.word	0x200003ac
 8001a0c:	20000220 	.word	0x20000220
 8001a10:	0800b360 	.word	0x0800b360
 8001a14:	200003ec 	.word	0x200003ec
 8001a18:	20000320 	.word	0x20000320
 8001a1c:	200002f0 	.word	0x200002f0
 8001a20:	200002e8 	.word	0x200002e8
 8001a24:	20000300 	.word	0x20000300
 8001a28:	200002f8 	.word	0x200002f8
 8001a2c:	20000310 	.word	0x20000310
 8001a30:	20000308 	.word	0x20000308
 8001a34:	0800b370 	.word	0x0800b370
 8001a38:	0800b380 	.word	0x0800b380
 8001a3c:	0800b390 	.word	0x0800b390
 8001a40:	20000284 	.word	0x20000284
 8001a44:	447a0000 	.word	0x447a0000
 8001a48:	0800b394 	.word	0x0800b394
 8001a4c:	0800b3dc 	.word	0x0800b3dc
	  					i=0;
 8001a50:	4b46      	ldr	r3, [pc, #280]	; (8001b6c <main+0x9bc>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	801a      	strh	r2, [r3, #0]
	  					memset(USART_RX_BUF, 0, sizeof(USART_RX_BUF));
 8001a56:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	4844      	ldr	r0, [pc, #272]	; (8001b70 <main+0x9c0>)
 8001a5e:	f003 fe8b 	bl	8005778 <memset>
	  				    HAL_UART_DMAStop(&huart1);
 8001a62:	4844      	ldr	r0, [pc, #272]	; (8001b74 <main+0x9c4>)
 8001a64:	f003 fa56 	bl	8004f14 <HAL_UART_DMAStop>
	  				    HAL_UART_Receive_DMA(&huart1,USART_RX_BUF, sizeof(USART_RX_BUF));
 8001a68:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8001a6c:	4940      	ldr	r1, [pc, #256]	; (8001b70 <main+0x9c0>)
 8001a6e:	4841      	ldr	r0, [pc, #260]	; (8001b74 <main+0x9c4>)
 8001a70:	f003 f9d0 	bl	8004e14 <HAL_UART_Receive_DMA>
	  		  			strcpy((char *)n58_sdata,"AT+HTTPSCLOSE\r\n");
 8001a74:	4a40      	ldr	r2, [pc, #256]	; (8001b78 <main+0x9c8>)
 8001a76:	4b41      	ldr	r3, [pc, #260]	; (8001b7c <main+0x9cc>)
 8001a78:	4614      	mov	r4, r2
 8001a7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  		  			HAL_UART_Transmit_DMA(&huart1, (uint8_t*)n58_sdata,strlen(n58_sdata));//�??????
 8001a80:	483d      	ldr	r0, [pc, #244]	; (8001b78 <main+0x9c8>)
 8001a82:	f7fe fbd1 	bl	8000228 <strlen>
 8001a86:	4603      	mov	r3, r0
 8001a88:	b29b      	uxth	r3, r3
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	493a      	ldr	r1, [pc, #232]	; (8001b78 <main+0x9c8>)
 8001a8e:	4839      	ldr	r0, [pc, #228]	; (8001b74 <main+0x9c4>)
 8001a90:	f003 f954 	bl	8004d3c <HAL_UART_Transmit_DMA>
	  					goto first;
 8001a94:	f7ff bbae 	b.w	80011f4 <main+0x44>
	  				SETUP2:


  					if(i<100)
 8001a98:	4b34      	ldr	r3, [pc, #208]	; (8001b6c <main+0x9bc>)
 8001a9a:	881b      	ldrh	r3, [r3, #0]
 8001a9c:	2b63      	cmp	r3, #99	; 0x63
 8001a9e:	d814      	bhi.n	8001aca <main+0x91a>
  						{
  							HAL_Delay (10);
 8001aa0:	200a      	movs	r0, #10
 8001aa2:	f001 fd83 	bl	80035ac <HAL_Delay>

  							if(!strstr((char*)USART_RX_BUF, ">"))
 8001aa6:	213e      	movs	r1, #62	; 0x3e
 8001aa8:	4831      	ldr	r0, [pc, #196]	; (8001b70 <main+0x9c0>)
 8001aaa:	f004 fd03 	bl	80064b4 <strchr>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d106      	bne.n	8001ac2 <main+0x912>
  							{
  								i++;
 8001ab4:	4b2d      	ldr	r3, [pc, #180]	; (8001b6c <main+0x9bc>)
 8001ab6:	881b      	ldrh	r3, [r3, #0]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	b29a      	uxth	r2, r3
 8001abc:	4b2b      	ldr	r3, [pc, #172]	; (8001b6c <main+0x9bc>)
 8001abe:	801a      	strh	r2, [r3, #0]

  								goto SETUP2;
 8001ac0:	e7ea      	b.n	8001a98 <main+0x8e8>
  							}
  							else{i=0;goto next2;}
 8001ac2:	4b2a      	ldr	r3, [pc, #168]	; (8001b6c <main+0x9bc>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	801a      	strh	r2, [r3, #0]
 8001ac8:	e023      	b.n	8001b12 <main+0x962>
  						}

  					else
  					{
  						i=0;
 8001aca:	4b28      	ldr	r3, [pc, #160]	; (8001b6c <main+0x9bc>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	801a      	strh	r2, [r3, #0]
  						memset(USART_RX_BUF, 0, sizeof(USART_RX_BUF));
 8001ad0:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	4826      	ldr	r0, [pc, #152]	; (8001b70 <main+0x9c0>)
 8001ad8:	f003 fe4e 	bl	8005778 <memset>
  					    HAL_UART_DMAStop(&huart1);
 8001adc:	4825      	ldr	r0, [pc, #148]	; (8001b74 <main+0x9c4>)
 8001ade:	f003 fa19 	bl	8004f14 <HAL_UART_DMAStop>
  					    HAL_UART_Receive_DMA(&huart1,USART_RX_BUF, sizeof(USART_RX_BUF));
 8001ae2:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8001ae6:	4922      	ldr	r1, [pc, #136]	; (8001b70 <main+0x9c0>)
 8001ae8:	4822      	ldr	r0, [pc, #136]	; (8001b74 <main+0x9c4>)
 8001aea:	f003 f993 	bl	8004e14 <HAL_UART_Receive_DMA>
  			  			strcpy((char *)n58_sdata,"AT+HTTPSCLOSE\r\n");
 8001aee:	4a22      	ldr	r2, [pc, #136]	; (8001b78 <main+0x9c8>)
 8001af0:	4b22      	ldr	r3, [pc, #136]	; (8001b7c <main+0x9cc>)
 8001af2:	4614      	mov	r4, r2
 8001af4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001af6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  			  			HAL_UART_Transmit_DMA(&huart1, (uint8_t*)n58_sdata,strlen(n58_sdata));//�??????
 8001afa:	481f      	ldr	r0, [pc, #124]	; (8001b78 <main+0x9c8>)
 8001afc:	f7fe fb94 	bl	8000228 <strlen>
 8001b00:	4603      	mov	r3, r0
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	461a      	mov	r2, r3
 8001b06:	491c      	ldr	r1, [pc, #112]	; (8001b78 <main+0x9c8>)
 8001b08:	481a      	ldr	r0, [pc, #104]	; (8001b74 <main+0x9c4>)
 8001b0a:	f003 f917 	bl	8004d3c <HAL_UART_Transmit_DMA>
  						goto first;
 8001b0e:	f7ff bb71 	b.w	80011f4 <main+0x44>
  					}
  					next2:
	  				memset(USART_RX_BUF, 0, sizeof(USART_RX_BUF));
 8001b12:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8001b16:	2100      	movs	r1, #0
 8001b18:	4815      	ldr	r0, [pc, #84]	; (8001b70 <main+0x9c0>)
 8001b1a:	f003 fe2d 	bl	8005778 <memset>
	  			    HAL_UART_DMAStop(&huart1);
 8001b1e:	4815      	ldr	r0, [pc, #84]	; (8001b74 <main+0x9c4>)
 8001b20:	f003 f9f8 	bl	8004f14 <HAL_UART_DMAStop>
	  			    HAL_UART_Receive_DMA(&huart1,USART_RX_BUF, sizeof(USART_RX_BUF));
 8001b24:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8001b28:	4911      	ldr	r1, [pc, #68]	; (8001b70 <main+0x9c0>)
 8001b2a:	4812      	ldr	r0, [pc, #72]	; (8001b74 <main+0x9c4>)
 8001b2c:	f003 f972 	bl	8004e14 <HAL_UART_Receive_DMA>
		  			HAL_UART_Transmit_DMA(&huart1, (uint8_t*)n58_sdataLAS,strlen(n58_sdataLAS));//�??????
 8001b30:	4813      	ldr	r0, [pc, #76]	; (8001b80 <main+0x9d0>)
 8001b32:	f7fe fb79 	bl	8000228 <strlen>
 8001b36:	4603      	mov	r3, r0
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	4910      	ldr	r1, [pc, #64]	; (8001b80 <main+0x9d0>)
 8001b3e:	480d      	ldr	r0, [pc, #52]	; (8001b74 <main+0x9c4>)
 8001b40:	f003 f8fc 	bl	8004d3c <HAL_UART_Transmit_DMA>

	  				HAL_Delay (100);
 8001b44:	2064      	movs	r0, #100	; 0x64
 8001b46:	f001 fd31 	bl	80035ac <HAL_Delay>
	  				memset(USART_RX_BUF, 0, sizeof(USART_RX_BUF));
 8001b4a:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8001b4e:	2100      	movs	r1, #0
 8001b50:	4807      	ldr	r0, [pc, #28]	; (8001b70 <main+0x9c0>)
 8001b52:	f003 fe11 	bl	8005778 <memset>
	  			    HAL_UART_DMAStop(&huart1);
 8001b56:	4807      	ldr	r0, [pc, #28]	; (8001b74 <main+0x9c4>)
 8001b58:	f003 f9dc 	bl	8004f14 <HAL_UART_DMAStop>
	  			    HAL_UART_Receive_DMA(&huart1,USART_RX_BUF, sizeof(USART_RX_BUF));
 8001b5c:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8001b60:	4903      	ldr	r1, [pc, #12]	; (8001b70 <main+0x9c0>)
 8001b62:	4804      	ldr	r0, [pc, #16]	; (8001b74 <main+0x9c4>)
 8001b64:	f003 f956 	bl	8004e14 <HAL_UART_Receive_DMA>
	  		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_5,GPIO_PIN_RESET);
 8001b68:	e5ff      	b.n	800176a <main+0x5ba>
 8001b6a:	bf00      	nop
 8001b6c:	20000308 	.word	0x20000308
 8001b70:	20000470 	.word	0x20000470
 8001b74:	200003ac 	.word	0x200003ac
 8001b78:	20000220 	.word	0x20000220
 8001b7c:	0800b370 	.word	0x0800b370
 8001b80:	20000284 	.word	0x20000284

08001b84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b090      	sub	sp, #64	; 0x40
 8001b88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b8a:	f107 0318 	add.w	r3, r7, #24
 8001b8e:	2228      	movs	r2, #40	; 0x28
 8001b90:	2100      	movs	r1, #0
 8001b92:	4618      	mov	r0, r3
 8001b94:	f003 fdf0 	bl	8005778 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b98:	1d3b      	adds	r3, r7, #4
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	601a      	str	r2, [r3, #0]
 8001b9e:	605a      	str	r2, [r3, #4]
 8001ba0:	609a      	str	r2, [r3, #8]
 8001ba2:	60da      	str	r2, [r3, #12]
 8001ba4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001baa:	2301      	movs	r3, #1
 8001bac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001bae:	2310      	movs	r3, #16
 8001bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bb6:	f107 0318 	add.w	r3, r7, #24
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f002 fc56 	bl	800446c <HAL_RCC_OscConfig>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001bc6:	f001 fa69 	bl	800309c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bca:	230f      	movs	r3, #15
 8001bcc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001bd2:	2380      	movs	r3, #128	; 0x80
 8001bd4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001bd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bda:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001be0:	1d3b      	adds	r3, r7, #4
 8001be2:	2100      	movs	r1, #0
 8001be4:	4618      	mov	r0, r3
 8001be6:	f002 fec1 	bl	800496c <HAL_RCC_ClockConfig>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8001bf0:	f001 fa54 	bl	800309c <Error_Handler>
  }
}
 8001bf4:	bf00      	nop
 8001bf6:	3740      	adds	r7, #64	; 0x40
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c00:	4b11      	ldr	r3, [pc, #68]	; (8001c48 <MX_USART1_UART_Init+0x4c>)
 8001c02:	4a12      	ldr	r2, [pc, #72]	; (8001c4c <MX_USART1_UART_Init+0x50>)
 8001c04:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001c06:	4b10      	ldr	r3, [pc, #64]	; (8001c48 <MX_USART1_UART_Init+0x4c>)
 8001c08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c0c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c0e:	4b0e      	ldr	r3, [pc, #56]	; (8001c48 <MX_USART1_UART_Init+0x4c>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c14:	4b0c      	ldr	r3, [pc, #48]	; (8001c48 <MX_USART1_UART_Init+0x4c>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c1a:	4b0b      	ldr	r3, [pc, #44]	; (8001c48 <MX_USART1_UART_Init+0x4c>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c20:	4b09      	ldr	r3, [pc, #36]	; (8001c48 <MX_USART1_UART_Init+0x4c>)
 8001c22:	220c      	movs	r2, #12
 8001c24:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c26:	4b08      	ldr	r3, [pc, #32]	; (8001c48 <MX_USART1_UART_Init+0x4c>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c2c:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <MX_USART1_UART_Init+0x4c>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c32:	4805      	ldr	r0, [pc, #20]	; (8001c48 <MX_USART1_UART_Init+0x4c>)
 8001c34:	f003 f834 	bl	8004ca0 <HAL_UART_Init>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001c3e:	f001 fa2d 	bl	800309c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c42:	bf00      	nop
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	200003ac 	.word	0x200003ac
 8001c4c:	40013800 	.word	0x40013800

08001c50 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c56:	4b10      	ldr	r3, [pc, #64]	; (8001c98 <MX_DMA_Init+0x48>)
 8001c58:	695b      	ldr	r3, [r3, #20]
 8001c5a:	4a0f      	ldr	r2, [pc, #60]	; (8001c98 <MX_DMA_Init+0x48>)
 8001c5c:	f043 0301 	orr.w	r3, r3, #1
 8001c60:	6153      	str	r3, [r2, #20]
 8001c62:	4b0d      	ldr	r3, [pc, #52]	; (8001c98 <MX_DMA_Init+0x48>)
 8001c64:	695b      	ldr	r3, [r3, #20]
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	607b      	str	r3, [r7, #4]
 8001c6c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 1);
 8001c6e:	2201      	movs	r2, #1
 8001c70:	2100      	movs	r1, #0
 8001c72:	200e      	movs	r0, #14
 8001c74:	f001 fd95 	bl	80037a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001c78:	200e      	movs	r0, #14
 8001c7a:	f001 fdae 	bl	80037da <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001c7e:	2200      	movs	r2, #0
 8001c80:	2100      	movs	r1, #0
 8001c82:	200f      	movs	r0, #15
 8001c84:	f001 fd8d 	bl	80037a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001c88:	200f      	movs	r0, #15
 8001c8a:	f001 fda6 	bl	80037da <HAL_NVIC_EnableIRQ>

}
 8001c8e:	bf00      	nop
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	40021000 	.word	0x40021000

08001c9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b088      	sub	sp, #32
 8001ca0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca2:	f107 0310 	add.w	r3, r7, #16
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	601a      	str	r2, [r3, #0]
 8001caa:	605a      	str	r2, [r3, #4]
 8001cac:	609a      	str	r2, [r3, #8]
 8001cae:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cb0:	4b26      	ldr	r3, [pc, #152]	; (8001d4c <MX_GPIO_Init+0xb0>)
 8001cb2:	699b      	ldr	r3, [r3, #24]
 8001cb4:	4a25      	ldr	r2, [pc, #148]	; (8001d4c <MX_GPIO_Init+0xb0>)
 8001cb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cba:	6193      	str	r3, [r2, #24]
 8001cbc:	4b23      	ldr	r3, [pc, #140]	; (8001d4c <MX_GPIO_Init+0xb0>)
 8001cbe:	699b      	ldr	r3, [r3, #24]
 8001cc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cc4:	60fb      	str	r3, [r7, #12]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc8:	4b20      	ldr	r3, [pc, #128]	; (8001d4c <MX_GPIO_Init+0xb0>)
 8001cca:	699b      	ldr	r3, [r3, #24]
 8001ccc:	4a1f      	ldr	r2, [pc, #124]	; (8001d4c <MX_GPIO_Init+0xb0>)
 8001cce:	f043 0304 	orr.w	r3, r3, #4
 8001cd2:	6193      	str	r3, [r2, #24]
 8001cd4:	4b1d      	ldr	r3, [pc, #116]	; (8001d4c <MX_GPIO_Init+0xb0>)
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	f003 0304 	and.w	r3, r3, #4
 8001cdc:	60bb      	str	r3, [r7, #8]
 8001cde:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ce0:	4b1a      	ldr	r3, [pc, #104]	; (8001d4c <MX_GPIO_Init+0xb0>)
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	4a19      	ldr	r2, [pc, #100]	; (8001d4c <MX_GPIO_Init+0xb0>)
 8001ce6:	f043 0308 	orr.w	r3, r3, #8
 8001cea:	6193      	str	r3, [r2, #24]
 8001cec:	4b17      	ldr	r3, [pc, #92]	; (8001d4c <MX_GPIO_Init+0xb0>)
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	f003 0308 	and.w	r3, r3, #8
 8001cf4:	607b      	str	r3, [r7, #4]
 8001cf6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	2120      	movs	r1, #32
 8001cfc:	4814      	ldr	r0, [pc, #80]	; (8001d50 <MX_GPIO_Init+0xb4>)
 8001cfe:	f002 fb9d 	bl	800443c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8001d02:	2200      	movs	r2, #0
 8001d04:	2120      	movs	r1, #32
 8001d06:	4813      	ldr	r0, [pc, #76]	; (8001d54 <MX_GPIO_Init+0xb8>)
 8001d08:	f002 fb98 	bl	800443c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8001d0c:	2320      	movs	r3, #32
 8001d0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d10:	2301      	movs	r3, #1
 8001d12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d14:	2302      	movs	r3, #2
 8001d16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d18:	2302      	movs	r3, #2
 8001d1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001d1c:	f107 0310 	add.w	r3, r7, #16
 8001d20:	4619      	mov	r1, r3
 8001d22:	480b      	ldr	r0, [pc, #44]	; (8001d50 <MX_GPIO_Init+0xb4>)
 8001d24:	f002 f9f6 	bl	8004114 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED0_Pin */
  GPIO_InitStruct.Pin = LED0_Pin;
 8001d28:	2320      	movs	r3, #32
 8001d2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d30:	2302      	movs	r3, #2
 8001d32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d34:	2302      	movs	r3, #2
 8001d36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8001d38:	f107 0310 	add.w	r3, r7, #16
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	4805      	ldr	r0, [pc, #20]	; (8001d54 <MX_GPIO_Init+0xb8>)
 8001d40:	f002 f9e8 	bl	8004114 <HAL_GPIO_Init>

}
 8001d44:	bf00      	nop
 8001d46:	3720      	adds	r7, #32
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	40011800 	.word	0x40011800
 8001d54:	40010c00 	.word	0x40010c00

08001d58 <NMEA_Comma_Pos>:
/* USER CODE BEGIN 4 */



uint8_t NMEA_Comma_Pos(uint8_t *buf,uint8_t cx)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b085      	sub	sp, #20
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	460b      	mov	r3, r1
 8001d62:	70fb      	strb	r3, [r7, #3]
	uint8_t *p=buf;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	60fb      	str	r3, [r7, #12]
	while(cx)
 8001d68:	e017      	b.n	8001d9a <NMEA_Comma_Pos+0x42>
	{
		if(*buf=='*'||*buf<' '||*buf>'z')return 0XFF;//遇到'*'或者非法字符,则不存在第cx个逗号
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	2b2a      	cmp	r3, #42	; 0x2a
 8001d70:	d007      	beq.n	8001d82 <NMEA_Comma_Pos+0x2a>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	2b1f      	cmp	r3, #31
 8001d78:	d903      	bls.n	8001d82 <NMEA_Comma_Pos+0x2a>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	2b7a      	cmp	r3, #122	; 0x7a
 8001d80:	d901      	bls.n	8001d86 <NMEA_Comma_Pos+0x2e>
 8001d82:	23ff      	movs	r3, #255	; 0xff
 8001d84:	e010      	b.n	8001da8 <NMEA_Comma_Pos+0x50>
		if(*buf==',')cx--;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	2b2c      	cmp	r3, #44	; 0x2c
 8001d8c:	d102      	bne.n	8001d94 <NMEA_Comma_Pos+0x3c>
 8001d8e:	78fb      	ldrb	r3, [r7, #3]
 8001d90:	3b01      	subs	r3, #1
 8001d92:	70fb      	strb	r3, [r7, #3]
		buf++;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	3301      	adds	r3, #1
 8001d98:	607b      	str	r3, [r7, #4]
	while(cx)
 8001d9a:	78fb      	ldrb	r3, [r7, #3]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d1e4      	bne.n	8001d6a <NMEA_Comma_Pos+0x12>
	}
	return buf-p;
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	b2db      	uxtb	r3, r3
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3714      	adds	r7, #20
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bc80      	pop	{r7}
 8001db0:	4770      	bx	lr

08001db2 <NMEA_Pow>:

//m^n函数
//返回�????????????:m^n次方.
uint32_t NMEA_Pow(uint8_t m,uint8_t n)
{
 8001db2:	b480      	push	{r7}
 8001db4:	b085      	sub	sp, #20
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	4603      	mov	r3, r0
 8001dba:	460a      	mov	r2, r1
 8001dbc:	71fb      	strb	r3, [r7, #7]
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8001dc6:	e004      	b.n	8001dd2 <NMEA_Pow+0x20>
 8001dc8:	79fa      	ldrb	r2, [r7, #7]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	fb02 f303 	mul.w	r3, r2, r3
 8001dd0:	60fb      	str	r3, [r7, #12]
 8001dd2:	79bb      	ldrb	r3, [r7, #6]
 8001dd4:	1e5a      	subs	r2, r3, #1
 8001dd6:	71ba      	strb	r2, [r7, #6]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d1f5      	bne.n	8001dc8 <NMEA_Pow+0x16>
	return result;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3714      	adds	r7, #20
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bc80      	pop	{r7}
 8001de6:	4770      	bx	lr

08001de8 <NMEA_Str2num>:
//str转换为数�????????????,�????????????','或�??'*'结束
//buf:数字存储�????????????
//dx:小数点位�????????????,返回给调用函�????????????
//返回�????????????:转换后的数�??
int NMEA_Str2num(uint8_t *buf,uint8_t*dx)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b088      	sub	sp, #32
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
	uint8_t *p=buf;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	61fb      	str	r3, [r7, #28]
	uint32_t ires=0,fres=0;
 8001df6:	2300      	movs	r3, #0
 8001df8:	61bb      	str	r3, [r7, #24]
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	617b      	str	r3, [r7, #20]
	uint8_t ilen=0,flen=0,i;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	74fb      	strb	r3, [r7, #19]
 8001e02:	2300      	movs	r3, #0
 8001e04:	74bb      	strb	r3, [r7, #18]
	uint8_t mask=0;
 8001e06:	2300      	movs	r3, #0
 8001e08:	743b      	strb	r3, [r7, #16]
	int res;
	while(1) //得到整数和小数的长度
	{
		if(*p=='-'){mask|=0X02;p++;}//是负�????????????
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	2b2d      	cmp	r3, #45	; 0x2d
 8001e10:	d106      	bne.n	8001e20 <NMEA_Str2num+0x38>
 8001e12:	7c3b      	ldrb	r3, [r7, #16]
 8001e14:	f043 0302 	orr.w	r3, r3, #2
 8001e18:	743b      	strb	r3, [r7, #16]
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	61fb      	str	r3, [r7, #28]
		if(*p==','||(*p=='*'))break;//遇到结束�????????????
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	2b2c      	cmp	r3, #44	; 0x2c
 8001e26:	d02c      	beq.n	8001e82 <NMEA_Str2num+0x9a>
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	2b2a      	cmp	r3, #42	; 0x2a
 8001e2e:	d028      	beq.n	8001e82 <NMEA_Str2num+0x9a>
		if(*p=='.'){mask|=0X01;p++;}//遇到小数点了
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	2b2e      	cmp	r3, #46	; 0x2e
 8001e36:	d107      	bne.n	8001e48 <NMEA_Str2num+0x60>
 8001e38:	7c3b      	ldrb	r3, [r7, #16]
 8001e3a:	f043 0301 	orr.w	r3, r3, #1
 8001e3e:	743b      	strb	r3, [r7, #16]
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	3301      	adds	r3, #1
 8001e44:	61fb      	str	r3, [r7, #28]
 8001e46:	e00c      	b.n	8001e62 <NMEA_Str2num+0x7a>
		else if(*p>'9'||(*p<'0'))	//有非法字�????????????
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	2b39      	cmp	r3, #57	; 0x39
 8001e4e:	d803      	bhi.n	8001e58 <NMEA_Str2num+0x70>
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	2b2f      	cmp	r3, #47	; 0x2f
 8001e56:	d804      	bhi.n	8001e62 <NMEA_Str2num+0x7a>
		{
			ilen=0;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	74fb      	strb	r3, [r7, #19]
			flen=0;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	74bb      	strb	r3, [r7, #18]
			break;
 8001e60:	e00f      	b.n	8001e82 <NMEA_Str2num+0x9a>
		}
		if(mask&0X01)flen++;
 8001e62:	7c3b      	ldrb	r3, [r7, #16]
 8001e64:	f003 0301 	and.w	r3, r3, #1
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d003      	beq.n	8001e74 <NMEA_Str2num+0x8c>
 8001e6c:	7cbb      	ldrb	r3, [r7, #18]
 8001e6e:	3301      	adds	r3, #1
 8001e70:	74bb      	strb	r3, [r7, #18]
 8001e72:	e002      	b.n	8001e7a <NMEA_Str2num+0x92>
		else ilen++;
 8001e74:	7cfb      	ldrb	r3, [r7, #19]
 8001e76:	3301      	adds	r3, #1
 8001e78:	74fb      	strb	r3, [r7, #19]
		p++;
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	61fb      	str	r3, [r7, #28]
		if(*p=='-'){mask|=0X02;p++;}//是负�????????????
 8001e80:	e7c3      	b.n	8001e0a <NMEA_Str2num+0x22>
	}
	if(mask&0X02)buf++;	//去掉负号
 8001e82:	7c3b      	ldrb	r3, [r7, #16]
 8001e84:	f003 0302 	and.w	r3, r3, #2
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d002      	beq.n	8001e92 <NMEA_Str2num+0xaa>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	3301      	adds	r3, #1
 8001e90:	607b      	str	r3, [r7, #4]
	for(i=0;i<ilen;i++)	//得到整数部分数据
 8001e92:	2300      	movs	r3, #0
 8001e94:	747b      	strb	r3, [r7, #17]
 8001e96:	e017      	b.n	8001ec8 <NMEA_Str2num+0xe0>
	{
		ires+=NMEA_Pow(10,ilen-1-i)*(buf[i]-'0');
 8001e98:	7cfa      	ldrb	r2, [r7, #19]
 8001e9a:	7c7b      	ldrb	r3, [r7, #17]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	3b01      	subs	r3, #1
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	200a      	movs	r0, #10
 8001ea8:	f7ff ff83 	bl	8001db2 <NMEA_Pow>
 8001eac:	4601      	mov	r1, r0
 8001eae:	7c7b      	ldrb	r3, [r7, #17]
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	3b30      	subs	r3, #48	; 0x30
 8001eb8:	fb03 f301 	mul.w	r3, r3, r1
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	61bb      	str	r3, [r7, #24]
	for(i=0;i<ilen;i++)	//得到整数部分数据
 8001ec2:	7c7b      	ldrb	r3, [r7, #17]
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	747b      	strb	r3, [r7, #17]
 8001ec8:	7c7a      	ldrb	r2, [r7, #17]
 8001eca:	7cfb      	ldrb	r3, [r7, #19]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d3e3      	bcc.n	8001e98 <NMEA_Str2num+0xb0>
	}
	if(flen>8)flen=8;	//�????????????多取8位小�????????????
 8001ed0:	7cbb      	ldrb	r3, [r7, #18]
 8001ed2:	2b08      	cmp	r3, #8
 8001ed4:	d901      	bls.n	8001eda <NMEA_Str2num+0xf2>
 8001ed6:	2308      	movs	r3, #8
 8001ed8:	74bb      	strb	r3, [r7, #18]
	*dx=flen;	 		//小数点位�????????????
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	7cba      	ldrb	r2, [r7, #18]
 8001ede:	701a      	strb	r2, [r3, #0]
	for(i=0;i<flen;i++)	//得到小数部分数据
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	747b      	strb	r3, [r7, #17]
 8001ee4:	e01b      	b.n	8001f1e <NMEA_Str2num+0x136>
	{
		fres+=NMEA_Pow(10,flen-1-i)*(buf[ilen+1+i]-'0');
 8001ee6:	7cba      	ldrb	r2, [r7, #18]
 8001ee8:	7c7b      	ldrb	r3, [r7, #17]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	200a      	movs	r0, #10
 8001ef6:	f7ff ff5c 	bl	8001db2 <NMEA_Pow>
 8001efa:	4601      	mov	r1, r0
 8001efc:	7cfb      	ldrb	r3, [r7, #19]
 8001efe:	1c5a      	adds	r2, r3, #1
 8001f00:	7c7b      	ldrb	r3, [r7, #17]
 8001f02:	4413      	add	r3, r2
 8001f04:	461a      	mov	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4413      	add	r3, r2
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	3b30      	subs	r3, #48	; 0x30
 8001f0e:	fb03 f301 	mul.w	r3, r3, r1
 8001f12:	697a      	ldr	r2, [r7, #20]
 8001f14:	4413      	add	r3, r2
 8001f16:	617b      	str	r3, [r7, #20]
	for(i=0;i<flen;i++)	//得到小数部分数据
 8001f18:	7c7b      	ldrb	r3, [r7, #17]
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	747b      	strb	r3, [r7, #17]
 8001f1e:	7c7a      	ldrb	r2, [r7, #17]
 8001f20:	7cbb      	ldrb	r3, [r7, #18]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d3df      	bcc.n	8001ee6 <NMEA_Str2num+0xfe>
	}
	res=ires*NMEA_Pow(10,flen)+fres;
 8001f26:	7cbb      	ldrb	r3, [r7, #18]
 8001f28:	4619      	mov	r1, r3
 8001f2a:	200a      	movs	r0, #10
 8001f2c:	f7ff ff41 	bl	8001db2 <NMEA_Pow>
 8001f30:	4602      	mov	r2, r0
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	fb03 f202 	mul.w	r2, r3, r2
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	60fb      	str	r3, [r7, #12]
	if(mask&0X02)res=-res;
 8001f3e:	7c3b      	ldrb	r3, [r7, #16]
 8001f40:	f003 0302 	and.w	r3, r3, #2
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d002      	beq.n	8001f4e <NMEA_Str2num+0x166>
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	425b      	negs	r3, r3
 8001f4c:	60fb      	str	r3, [r7, #12]
	return res;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3720      	adds	r7, #32
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <NMEA_GNGGA_Analysis>:

//分析GNGGA信息
//gnssx:nmea信息结构�????????????
//buf:接收到的GNSS数据缓冲区首地址
void NMEA_GNGGA_Analysis(nmea_msg *gnssx,uint8_t *buf)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
	uint8_t *p1,dx;
	uint8_t posx;
	p1=(uint8_t*)strstr((const char *)buf,"$GNGGA");
 8001f62:	4926      	ldr	r1, [pc, #152]	; (8001ffc <NMEA_GNGGA_Analysis+0xa4>)
 8001f64:	6838      	ldr	r0, [r7, #0]
 8001f66:	f004 fab2 	bl	80064ce <strstr>
 8001f6a:	60f8      	str	r0, [r7, #12]
	posx=NMEA_Comma_Pos(p1,6);								//得到GNSS状�??
 8001f6c:	2106      	movs	r1, #6
 8001f6e:	68f8      	ldr	r0, [r7, #12]
 8001f70:	f7ff fef2 	bl	8001d58 <NMEA_Comma_Pos>
 8001f74:	4603      	mov	r3, r0
 8001f76:	72fb      	strb	r3, [r7, #11]
	if(posx!=0XFF)gnssx->gnsssta=NMEA_Str2num(p1+posx,&dx);
 8001f78:	7afb      	ldrb	r3, [r7, #11]
 8001f7a:	2bff      	cmp	r3, #255	; 0xff
 8001f7c:	d00d      	beq.n	8001f9a <NMEA_GNGGA_Analysis+0x42>
 8001f7e:	7afb      	ldrb	r3, [r7, #11]
 8001f80:	68fa      	ldr	r2, [r7, #12]
 8001f82:	4413      	add	r3, r2
 8001f84:	f107 020a 	add.w	r2, r7, #10
 8001f88:	4611      	mov	r1, r2
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7ff ff2c 	bl	8001de8 <NMEA_Str2num>
 8001f90:	4603      	mov	r3, r0
 8001f92:	b2da      	uxtb	r2, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
	posx=NMEA_Comma_Pos(p1,7);								//得到用于定位的卫星数
 8001f9a:	2107      	movs	r1, #7
 8001f9c:	68f8      	ldr	r0, [r7, #12]
 8001f9e:	f7ff fedb 	bl	8001d58 <NMEA_Comma_Pos>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	72fb      	strb	r3, [r7, #11]
	if(posx!=0XFF)gnssx->posslnum=NMEA_Str2num(p1+posx,&dx);
 8001fa6:	7afb      	ldrb	r3, [r7, #11]
 8001fa8:	2bff      	cmp	r3, #255	; 0xff
 8001faa:	d00d      	beq.n	8001fc8 <NMEA_GNGGA_Analysis+0x70>
 8001fac:	7afb      	ldrb	r3, [r7, #11]
 8001fae:	68fa      	ldr	r2, [r7, #12]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	f107 020a 	add.w	r2, r7, #10
 8001fb6:	4611      	mov	r1, r2
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7ff ff15 	bl	8001de8 <NMEA_Str2num>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	b2da      	uxtb	r2, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
	posx=NMEA_Comma_Pos(p1,9);								//得到海拔高度
 8001fc8:	2109      	movs	r1, #9
 8001fca:	68f8      	ldr	r0, [r7, #12]
 8001fcc:	f7ff fec4 	bl	8001d58 <NMEA_Comma_Pos>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	72fb      	strb	r3, [r7, #11]
	if(posx!=0XFF)gnssx->altitude=NMEA_Str2num(p1+posx,&dx);
 8001fd4:	7afb      	ldrb	r3, [r7, #11]
 8001fd6:	2bff      	cmp	r3, #255	; 0xff
 8001fd8:	d00b      	beq.n	8001ff2 <NMEA_GNGGA_Analysis+0x9a>
 8001fda:	7afb      	ldrb	r3, [r7, #11]
 8001fdc:	68fa      	ldr	r2, [r7, #12]
 8001fde:	4413      	add	r3, r2
 8001fe0:	f107 020a 	add.w	r2, r7, #10
 8001fe4:	4611      	mov	r1, r2
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7ff fefe 	bl	8001de8 <NMEA_Str2num>
 8001fec:	4602      	mov	r2, r0
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	679a      	str	r2, [r3, #120]	; 0x78
}
 8001ff2:	bf00      	nop
 8001ff4:	3710      	adds	r7, #16
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	0800b3fc 	.word	0x0800b3fc

08002000 <NMEA_GNGSA_Analysis>:

//分析GNGSA信息
//gnssx:nmea信息结构�????????????
//buf:接收到的GNSS数据缓冲区首地址
void NMEA_GNGSA_Analysis(nmea_msg *gnssx,uint8_t *buf)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b086      	sub	sp, #24
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
	uint8_t *p1,dx;
	uint8_t posx;
	uint8_t i;
	p1=(uint8_t*)strstr((const char *)buf,"$GNGSA");
 800200a:	4946      	ldr	r1, [pc, #280]	; (8002124 <NMEA_GNGSA_Analysis+0x124>)
 800200c:	6838      	ldr	r0, [r7, #0]
 800200e:	f004 fa5e 	bl	80064ce <strstr>
 8002012:	6138      	str	r0, [r7, #16]
	posx=NMEA_Comma_Pos(p1,2);								//得到定位类型
 8002014:	2102      	movs	r1, #2
 8002016:	6938      	ldr	r0, [r7, #16]
 8002018:	f7ff fe9e 	bl	8001d58 <NMEA_Comma_Pos>
 800201c:	4603      	mov	r3, r0
 800201e:	73fb      	strb	r3, [r7, #15]
	if(posx!=0XFF)gnssx->fixmode=NMEA_Str2num(p1+posx,&dx);
 8002020:	7bfb      	ldrb	r3, [r7, #15]
 8002022:	2bff      	cmp	r3, #255	; 0xff
 8002024:	d00d      	beq.n	8002042 <NMEA_GNGSA_Analysis+0x42>
 8002026:	7bfb      	ldrb	r3, [r7, #15]
 8002028:	693a      	ldr	r2, [r7, #16]
 800202a:	4413      	add	r3, r2
 800202c:	f107 020e 	add.w	r2, r7, #14
 8002030:	4611      	mov	r1, r2
 8002032:	4618      	mov	r0, r3
 8002034:	f7ff fed8 	bl	8001de8 <NMEA_Str2num>
 8002038:	4603      	mov	r3, r0
 800203a:	b2da      	uxtb	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	for(i=0;i<12;i++)										//得到定位卫星编号
 8002042:	2300      	movs	r3, #0
 8002044:	75fb      	strb	r3, [r7, #23]
 8002046:	e01f      	b.n	8002088 <NMEA_GNGSA_Analysis+0x88>
	{
		posx=NMEA_Comma_Pos(p1,3+i);
 8002048:	7dfb      	ldrb	r3, [r7, #23]
 800204a:	3303      	adds	r3, #3
 800204c:	b2db      	uxtb	r3, r3
 800204e:	4619      	mov	r1, r3
 8002050:	6938      	ldr	r0, [r7, #16]
 8002052:	f7ff fe81 	bl	8001d58 <NMEA_Comma_Pos>
 8002056:	4603      	mov	r3, r0
 8002058:	73fb      	strb	r3, [r7, #15]
		if(posx!=0XFF)gnssx->possl[i]=NMEA_Str2num(p1+posx,&dx);
 800205a:	7bfb      	ldrb	r3, [r7, #15]
 800205c:	2bff      	cmp	r3, #255	; 0xff
 800205e:	d017      	beq.n	8002090 <NMEA_GNGSA_Analysis+0x90>
 8002060:	7bfb      	ldrb	r3, [r7, #15]
 8002062:	693a      	ldr	r2, [r7, #16]
 8002064:	4413      	add	r3, r2
 8002066:	f107 020e 	add.w	r2, r7, #14
 800206a:	4611      	mov	r1, r2
 800206c:	4618      	mov	r0, r3
 800206e:	f7ff febb 	bl	8001de8 <NMEA_Str2num>
 8002072:	4602      	mov	r2, r0
 8002074:	7dfb      	ldrb	r3, [r7, #23]
 8002076:	b2d1      	uxtb	r1, r2
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	4413      	add	r3, r2
 800207c:	460a      	mov	r2, r1
 800207e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
	for(i=0;i<12;i++)										//得到定位卫星编号
 8002082:	7dfb      	ldrb	r3, [r7, #23]
 8002084:	3301      	adds	r3, #1
 8002086:	75fb      	strb	r3, [r7, #23]
 8002088:	7dfb      	ldrb	r3, [r7, #23]
 800208a:	2b0b      	cmp	r3, #11
 800208c:	d9dc      	bls.n	8002048 <NMEA_GNGSA_Analysis+0x48>
 800208e:	e000      	b.n	8002092 <NMEA_GNGSA_Analysis+0x92>
		else break;
 8002090:	bf00      	nop
	}
	posx=NMEA_Comma_Pos(p1,15);								//得到PDOP位置精度因子
 8002092:	210f      	movs	r1, #15
 8002094:	6938      	ldr	r0, [r7, #16]
 8002096:	f7ff fe5f 	bl	8001d58 <NMEA_Comma_Pos>
 800209a:	4603      	mov	r3, r0
 800209c:	73fb      	strb	r3, [r7, #15]
	if(posx!=0XFF)gnssx->pdop=NMEA_Str2num(p1+posx,&dx);
 800209e:	7bfb      	ldrb	r3, [r7, #15]
 80020a0:	2bff      	cmp	r3, #255	; 0xff
 80020a2:	d00d      	beq.n	80020c0 <NMEA_GNGSA_Analysis+0xc0>
 80020a4:	7bfb      	ldrb	r3, [r7, #15]
 80020a6:	693a      	ldr	r2, [r7, #16]
 80020a8:	4413      	add	r3, r2
 80020aa:	f107 020e 	add.w	r2, r7, #14
 80020ae:	4611      	mov	r1, r2
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7ff fe99 	bl	8001de8 <NMEA_Str2num>
 80020b6:	4603      	mov	r3, r0
 80020b8:	b29a      	uxth	r2, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
	posx=NMEA_Comma_Pos(p1,16);								//得到HDOP位置精度因子
 80020c0:	2110      	movs	r1, #16
 80020c2:	6938      	ldr	r0, [r7, #16]
 80020c4:	f7ff fe48 	bl	8001d58 <NMEA_Comma_Pos>
 80020c8:	4603      	mov	r3, r0
 80020ca:	73fb      	strb	r3, [r7, #15]
	if(posx!=0XFF)gnssx->hdop=NMEA_Str2num(p1+posx,&dx);
 80020cc:	7bfb      	ldrb	r3, [r7, #15]
 80020ce:	2bff      	cmp	r3, #255	; 0xff
 80020d0:	d00d      	beq.n	80020ee <NMEA_GNGSA_Analysis+0xee>
 80020d2:	7bfb      	ldrb	r3, [r7, #15]
 80020d4:	693a      	ldr	r2, [r7, #16]
 80020d6:	4413      	add	r3, r2
 80020d8:	f107 020e 	add.w	r2, r7, #14
 80020dc:	4611      	mov	r1, r2
 80020de:	4618      	mov	r0, r3
 80020e0:	f7ff fe82 	bl	8001de8 <NMEA_Str2num>
 80020e4:	4603      	mov	r3, r0
 80020e6:	b29a      	uxth	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
	posx=NMEA_Comma_Pos(p1,17);								//得到VDOP位置精度因子
 80020ee:	2111      	movs	r1, #17
 80020f0:	6938      	ldr	r0, [r7, #16]
 80020f2:	f7ff fe31 	bl	8001d58 <NMEA_Comma_Pos>
 80020f6:	4603      	mov	r3, r0
 80020f8:	73fb      	strb	r3, [r7, #15]
	if(posx!=0XFF)gnssx->vdop=NMEA_Str2num(p1+posx,&dx);
 80020fa:	7bfb      	ldrb	r3, [r7, #15]
 80020fc:	2bff      	cmp	r3, #255	; 0xff
 80020fe:	d00d      	beq.n	800211c <NMEA_GNGSA_Analysis+0x11c>
 8002100:	7bfb      	ldrb	r3, [r7, #15]
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	4413      	add	r3, r2
 8002106:	f107 020e 	add.w	r2, r7, #14
 800210a:	4611      	mov	r1, r2
 800210c:	4618      	mov	r0, r3
 800210e:	f7ff fe6b 	bl	8001de8 <NMEA_Str2num>
 8002112:	4603      	mov	r3, r0
 8002114:	b29a      	uxth	r2, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
}
 800211c:	bf00      	nop
 800211e:	3718      	adds	r7, #24
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	0800b404 	.word	0x0800b404

08002128 <NMEA_GNRMC_Analysis>:

//分析GNRMC信息
//gnssx:nmea信息结构�????????????
//buf:接收到的GNSS数据缓冲区首地址
void NMEA_GNRMC_Analysis(nmea_msg *gnssx,uint8_t *buf)
{
 8002128:	b590      	push	{r4, r7, lr}
 800212a:	b089      	sub	sp, #36	; 0x24
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	6039      	str	r1, [r7, #0]
	uint8_t *p1,dx;
	uint8_t posx;
	uint32_t temp;
	float rs;
	p1=(uint8_t*)strstr((const char *)buf,"GNRMC");//"$GNRMC",经常�????????????&和GNRMC分开的情�????????????,故只判断GNRMC.
 8002132:	49b8      	ldr	r1, [pc, #736]	; (8002414 <NMEA_GNRMC_Analysis+0x2ec>)
 8002134:	6838      	ldr	r0, [r7, #0]
 8002136:	f004 f9ca 	bl	80064ce <strstr>
 800213a:	61f8      	str	r0, [r7, #28]
	posx=NMEA_Comma_Pos(p1,1);								//得到UTC时间
 800213c:	2101      	movs	r1, #1
 800213e:	69f8      	ldr	r0, [r7, #28]
 8002140:	f7ff fe0a 	bl	8001d58 <NMEA_Comma_Pos>
 8002144:	4603      	mov	r3, r0
 8002146:	76fb      	strb	r3, [r7, #27]
	if(posx!=0XFF)
 8002148:	7efb      	ldrb	r3, [r7, #27]
 800214a:	2bff      	cmp	r3, #255	; 0xff
 800214c:	d03a      	beq.n	80021c4 <NMEA_GNRMC_Analysis+0x9c>
	{
		temp=NMEA_Str2num(p1+posx,&dx)/NMEA_Pow(10,dx);	 	//得到UTC时间,去掉ms
 800214e:	7efb      	ldrb	r3, [r7, #27]
 8002150:	69fa      	ldr	r2, [r7, #28]
 8002152:	4413      	add	r3, r2
 8002154:	f107 020f 	add.w	r2, r7, #15
 8002158:	4611      	mov	r1, r2
 800215a:	4618      	mov	r0, r3
 800215c:	f7ff fe44 	bl	8001de8 <NMEA_Str2num>
 8002160:	4603      	mov	r3, r0
 8002162:	461c      	mov	r4, r3
 8002164:	7bfb      	ldrb	r3, [r7, #15]
 8002166:	4619      	mov	r1, r3
 8002168:	200a      	movs	r0, #10
 800216a:	f7ff fe22 	bl	8001db2 <NMEA_Pow>
 800216e:	4603      	mov	r3, r0
 8002170:	fbb4 f3f3 	udiv	r3, r4, r3
 8002174:	617b      	str	r3, [r7, #20]
		gnssx->utc.hour=temp/10000;
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	4aa7      	ldr	r2, [pc, #668]	; (8002418 <NMEA_GNRMC_Analysis+0x2f0>)
 800217a:	fba2 2303 	umull	r2, r3, r2, r3
 800217e:	0b5b      	lsrs	r3, r3, #13
 8002180:	b2da      	uxtb	r2, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
		gnssx->utc.min=(temp/100)%100;
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	4aa4      	ldr	r2, [pc, #656]	; (800241c <NMEA_GNRMC_Analysis+0x2f4>)
 800218c:	fba2 2303 	umull	r2, r3, r2, r3
 8002190:	095a      	lsrs	r2, r3, #5
 8002192:	4ba2      	ldr	r3, [pc, #648]	; (800241c <NMEA_GNRMC_Analysis+0x2f4>)
 8002194:	fba3 1302 	umull	r1, r3, r3, r2
 8002198:	095b      	lsrs	r3, r3, #5
 800219a:	2164      	movs	r1, #100	; 0x64
 800219c:	fb01 f303 	mul.w	r3, r1, r3
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	b2da      	uxtb	r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
		gnssx->utc.sec=temp%100;
 80021aa:	697a      	ldr	r2, [r7, #20]
 80021ac:	4b9b      	ldr	r3, [pc, #620]	; (800241c <NMEA_GNRMC_Analysis+0x2f4>)
 80021ae:	fba3 1302 	umull	r1, r3, r3, r2
 80021b2:	095b      	lsrs	r3, r3, #5
 80021b4:	2164      	movs	r1, #100	; 0x64
 80021b6:	fb01 f303 	mul.w	r3, r1, r3
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	b2da      	uxtb	r2, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}
	posx=NMEA_Comma_Pos(p1,3);								//得到纬度
 80021c4:	2103      	movs	r1, #3
 80021c6:	69f8      	ldr	r0, [r7, #28]
 80021c8:	f7ff fdc6 	bl	8001d58 <NMEA_Comma_Pos>
 80021cc:	4603      	mov	r3, r0
 80021ce:	76fb      	strb	r3, [r7, #27]
	if(posx!=0XFF)
 80021d0:	7efb      	ldrb	r3, [r7, #27]
 80021d2:	2bff      	cmp	r3, #255	; 0xff
 80021d4:	d059      	beq.n	800228a <NMEA_GNRMC_Analysis+0x162>
	{
		temp=NMEA_Str2num(p1+posx,&dx);
 80021d6:	7efb      	ldrb	r3, [r7, #27]
 80021d8:	69fa      	ldr	r2, [r7, #28]
 80021da:	4413      	add	r3, r2
 80021dc:	f107 020f 	add.w	r2, r7, #15
 80021e0:	4611      	mov	r1, r2
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7ff fe00 	bl	8001de8 <NMEA_Str2num>
 80021e8:	4603      	mov	r3, r0
 80021ea:	617b      	str	r3, [r7, #20]
		gnssx->latitude=temp/NMEA_Pow(10,dx+2);	//得到°
 80021ec:	7bfb      	ldrb	r3, [r7, #15]
 80021ee:	3302      	adds	r3, #2
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	4619      	mov	r1, r3
 80021f4:	200a      	movs	r0, #10
 80021f6:	f7ff fddc 	bl	8001db2 <NMEA_Pow>
 80021fa:	4602      	mov	r2, r0
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	fbb3 f2f2 	udiv	r2, r3, r2
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	655a      	str	r2, [r3, #84]	; 0x54
		rs=temp%NMEA_Pow(10,dx+2);				//得到'
 8002206:	7bfb      	ldrb	r3, [r7, #15]
 8002208:	3302      	adds	r3, #2
 800220a:	b2db      	uxtb	r3, r3
 800220c:	4619      	mov	r1, r3
 800220e:	200a      	movs	r0, #10
 8002210:	f7ff fdcf 	bl	8001db2 <NMEA_Pow>
 8002214:	4602      	mov	r2, r0
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	fbb3 f1f2 	udiv	r1, r3, r2
 800221c:	fb02 f201 	mul.w	r2, r2, r1
 8002220:	1a9b      	subs	r3, r3, r2
 8002222:	4618      	mov	r0, r3
 8002224:	f7fe fdc2 	bl	8000dac <__aeabi_ui2f>
 8002228:	4603      	mov	r3, r0
 800222a:	613b      	str	r3, [r7, #16]
		gnssx->latitude=gnssx->latitude*NMEA_Pow(10,5)+(rs*NMEA_Pow(10,5-dx))/60;//转换为�?
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6d5c      	ldr	r4, [r3, #84]	; 0x54
 8002230:	2105      	movs	r1, #5
 8002232:	200a      	movs	r0, #10
 8002234:	f7ff fdbd 	bl	8001db2 <NMEA_Pow>
 8002238:	4603      	mov	r3, r0
 800223a:	fb03 f304 	mul.w	r3, r3, r4
 800223e:	4618      	mov	r0, r3
 8002240:	f7fe fdb4 	bl	8000dac <__aeabi_ui2f>
 8002244:	4604      	mov	r4, r0
 8002246:	7bfb      	ldrb	r3, [r7, #15]
 8002248:	f1c3 0305 	rsb	r3, r3, #5
 800224c:	b2db      	uxtb	r3, r3
 800224e:	4619      	mov	r1, r3
 8002250:	200a      	movs	r0, #10
 8002252:	f7ff fdae 	bl	8001db2 <NMEA_Pow>
 8002256:	4603      	mov	r3, r0
 8002258:	4618      	mov	r0, r3
 800225a:	f7fe fda7 	bl	8000dac <__aeabi_ui2f>
 800225e:	4603      	mov	r3, r0
 8002260:	6939      	ldr	r1, [r7, #16]
 8002262:	4618      	mov	r0, r3
 8002264:	f7fe fdfa 	bl	8000e5c <__aeabi_fmul>
 8002268:	4603      	mov	r3, r0
 800226a:	496d      	ldr	r1, [pc, #436]	; (8002420 <NMEA_GNRMC_Analysis+0x2f8>)
 800226c:	4618      	mov	r0, r3
 800226e:	f7fe fea9 	bl	8000fc4 <__aeabi_fdiv>
 8002272:	4603      	mov	r3, r0
 8002274:	4619      	mov	r1, r3
 8002276:	4620      	mov	r0, r4
 8002278:	f7fe fce8 	bl	8000c4c <__addsf3>
 800227c:	4603      	mov	r3, r0
 800227e:	4618      	mov	r0, r3
 8002280:	f7fe ff3c 	bl	80010fc <__aeabi_f2uiz>
 8002284:	4602      	mov	r2, r0
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	655a      	str	r2, [r3, #84]	; 0x54
	}
	posx=NMEA_Comma_Pos(p1,4);								//南纬还是北纬
 800228a:	2104      	movs	r1, #4
 800228c:	69f8      	ldr	r0, [r7, #28]
 800228e:	f7ff fd63 	bl	8001d58 <NMEA_Comma_Pos>
 8002292:	4603      	mov	r3, r0
 8002294:	76fb      	strb	r3, [r7, #27]
	if(posx!=0XFF)gnssx->nshemi=*(p1+posx);
 8002296:	7efb      	ldrb	r3, [r7, #27]
 8002298:	2bff      	cmp	r3, #255	; 0xff
 800229a:	d006      	beq.n	80022aa <NMEA_GNRMC_Analysis+0x182>
 800229c:	7efb      	ldrb	r3, [r7, #27]
 800229e:	69fa      	ldr	r2, [r7, #28]
 80022a0:	4413      	add	r3, r2
 80022a2:	781a      	ldrb	r2, [r3, #0]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 	posx=NMEA_Comma_Pos(p1,5);								//得到经度
 80022aa:	2105      	movs	r1, #5
 80022ac:	69f8      	ldr	r0, [r7, #28]
 80022ae:	f7ff fd53 	bl	8001d58 <NMEA_Comma_Pos>
 80022b2:	4603      	mov	r3, r0
 80022b4:	76fb      	strb	r3, [r7, #27]
	if(posx!=0XFF)
 80022b6:	7efb      	ldrb	r3, [r7, #27]
 80022b8:	2bff      	cmp	r3, #255	; 0xff
 80022ba:	d059      	beq.n	8002370 <NMEA_GNRMC_Analysis+0x248>
	{
		temp=NMEA_Str2num(p1+posx,&dx);
 80022bc:	7efb      	ldrb	r3, [r7, #27]
 80022be:	69fa      	ldr	r2, [r7, #28]
 80022c0:	4413      	add	r3, r2
 80022c2:	f107 020f 	add.w	r2, r7, #15
 80022c6:	4611      	mov	r1, r2
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7ff fd8d 	bl	8001de8 <NMEA_Str2num>
 80022ce:	4603      	mov	r3, r0
 80022d0:	617b      	str	r3, [r7, #20]
		gnssx->longitude=temp/NMEA_Pow(10,dx+2);	//得到°
 80022d2:	7bfb      	ldrb	r3, [r7, #15]
 80022d4:	3302      	adds	r3, #2
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	4619      	mov	r1, r3
 80022da:	200a      	movs	r0, #10
 80022dc:	f7ff fd69 	bl	8001db2 <NMEA_Pow>
 80022e0:	4602      	mov	r2, r0
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	fbb3 f2f2 	udiv	r2, r3, r2
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	65da      	str	r2, [r3, #92]	; 0x5c
		rs=temp%NMEA_Pow(10,dx+2);				//得到'
 80022ec:	7bfb      	ldrb	r3, [r7, #15]
 80022ee:	3302      	adds	r3, #2
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	4619      	mov	r1, r3
 80022f4:	200a      	movs	r0, #10
 80022f6:	f7ff fd5c 	bl	8001db2 <NMEA_Pow>
 80022fa:	4602      	mov	r2, r0
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	fbb3 f1f2 	udiv	r1, r3, r2
 8002302:	fb02 f201 	mul.w	r2, r2, r1
 8002306:	1a9b      	subs	r3, r3, r2
 8002308:	4618      	mov	r0, r3
 800230a:	f7fe fd4f 	bl	8000dac <__aeabi_ui2f>
 800230e:	4603      	mov	r3, r0
 8002310:	613b      	str	r3, [r7, #16]
		gnssx->longitude=gnssx->longitude*NMEA_Pow(10,5)+(rs*NMEA_Pow(10,5-dx))/60;//转换为�?
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
 8002316:	2105      	movs	r1, #5
 8002318:	200a      	movs	r0, #10
 800231a:	f7ff fd4a 	bl	8001db2 <NMEA_Pow>
 800231e:	4603      	mov	r3, r0
 8002320:	fb03 f304 	mul.w	r3, r3, r4
 8002324:	4618      	mov	r0, r3
 8002326:	f7fe fd41 	bl	8000dac <__aeabi_ui2f>
 800232a:	4604      	mov	r4, r0
 800232c:	7bfb      	ldrb	r3, [r7, #15]
 800232e:	f1c3 0305 	rsb	r3, r3, #5
 8002332:	b2db      	uxtb	r3, r3
 8002334:	4619      	mov	r1, r3
 8002336:	200a      	movs	r0, #10
 8002338:	f7ff fd3b 	bl	8001db2 <NMEA_Pow>
 800233c:	4603      	mov	r3, r0
 800233e:	4618      	mov	r0, r3
 8002340:	f7fe fd34 	bl	8000dac <__aeabi_ui2f>
 8002344:	4603      	mov	r3, r0
 8002346:	6939      	ldr	r1, [r7, #16]
 8002348:	4618      	mov	r0, r3
 800234a:	f7fe fd87 	bl	8000e5c <__aeabi_fmul>
 800234e:	4603      	mov	r3, r0
 8002350:	4933      	ldr	r1, [pc, #204]	; (8002420 <NMEA_GNRMC_Analysis+0x2f8>)
 8002352:	4618      	mov	r0, r3
 8002354:	f7fe fe36 	bl	8000fc4 <__aeabi_fdiv>
 8002358:	4603      	mov	r3, r0
 800235a:	4619      	mov	r1, r3
 800235c:	4620      	mov	r0, r4
 800235e:	f7fe fc75 	bl	8000c4c <__addsf3>
 8002362:	4603      	mov	r3, r0
 8002364:	4618      	mov	r0, r3
 8002366:	f7fe fec9 	bl	80010fc <__aeabi_f2uiz>
 800236a:	4602      	mov	r2, r0
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	65da      	str	r2, [r3, #92]	; 0x5c
	}
	posx=NMEA_Comma_Pos(p1,6);								//东经还是西经
 8002370:	2106      	movs	r1, #6
 8002372:	69f8      	ldr	r0, [r7, #28]
 8002374:	f7ff fcf0 	bl	8001d58 <NMEA_Comma_Pos>
 8002378:	4603      	mov	r3, r0
 800237a:	76fb      	strb	r3, [r7, #27]
	if(posx!=0XFF)gnssx->ewhemi=*(p1+posx);
 800237c:	7efb      	ldrb	r3, [r7, #27]
 800237e:	2bff      	cmp	r3, #255	; 0xff
 8002380:	d006      	beq.n	8002390 <NMEA_GNRMC_Analysis+0x268>
 8002382:	7efb      	ldrb	r3, [r7, #27]
 8002384:	69fa      	ldr	r2, [r7, #28]
 8002386:	4413      	add	r3, r2
 8002388:	781a      	ldrb	r2, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	posx=NMEA_Comma_Pos(p1,9);								//得到UTC日期
 8002390:	2109      	movs	r1, #9
 8002392:	69f8      	ldr	r0, [r7, #28]
 8002394:	f7ff fce0 	bl	8001d58 <NMEA_Comma_Pos>
 8002398:	4603      	mov	r3, r0
 800239a:	76fb      	strb	r3, [r7, #27]
	if(posx!=0XFF)
 800239c:	7efb      	ldrb	r3, [r7, #27]
 800239e:	2bff      	cmp	r3, #255	; 0xff
 80023a0:	d034      	beq.n	800240c <NMEA_GNRMC_Analysis+0x2e4>
	{
		temp=NMEA_Str2num(p1+posx,&dx);		 				//得到UTC日期
 80023a2:	7efb      	ldrb	r3, [r7, #27]
 80023a4:	69fa      	ldr	r2, [r7, #28]
 80023a6:	4413      	add	r3, r2
 80023a8:	f107 020f 	add.w	r2, r7, #15
 80023ac:	4611      	mov	r1, r2
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7ff fd1a 	bl	8001de8 <NMEA_Str2num>
 80023b4:	4603      	mov	r3, r0
 80023b6:	617b      	str	r3, [r7, #20]
		gnssx->utc.date=temp/10000;
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	4a17      	ldr	r2, [pc, #92]	; (8002418 <NMEA_GNRMC_Analysis+0x2f0>)
 80023bc:	fba2 2303 	umull	r2, r3, r2, r3
 80023c0:	0b5b      	lsrs	r3, r3, #13
 80023c2:	b2da      	uxtb	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
		gnssx->utc.month=(temp/100)%100;
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	4a13      	ldr	r2, [pc, #76]	; (800241c <NMEA_GNRMC_Analysis+0x2f4>)
 80023ce:	fba2 2303 	umull	r2, r3, r2, r3
 80023d2:	095a      	lsrs	r2, r3, #5
 80023d4:	4b11      	ldr	r3, [pc, #68]	; (800241c <NMEA_GNRMC_Analysis+0x2f4>)
 80023d6:	fba3 1302 	umull	r1, r3, r3, r2
 80023da:	095b      	lsrs	r3, r3, #5
 80023dc:	2164      	movs	r1, #100	; 0x64
 80023de:	fb01 f303 	mul.w	r3, r1, r3
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	b2da      	uxtb	r2, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		gnssx->utc.year=2000+temp%100;
 80023ec:	697a      	ldr	r2, [r7, #20]
 80023ee:	4b0b      	ldr	r3, [pc, #44]	; (800241c <NMEA_GNRMC_Analysis+0x2f4>)
 80023f0:	fba3 1302 	umull	r1, r3, r3, r2
 80023f4:	095b      	lsrs	r3, r3, #5
 80023f6:	2164      	movs	r1, #100	; 0x64
 80023f8:	fb01 f303 	mul.w	r3, r1, r3
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	b29b      	uxth	r3, r3
 8002400:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8002404:	b29a      	uxth	r2, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	}
}
 800240c:	bf00      	nop
 800240e:	3724      	adds	r7, #36	; 0x24
 8002410:	46bd      	mov	sp, r7
 8002412:	bd90      	pop	{r4, r7, pc}
 8002414:	0800b40c 	.word	0x0800b40c
 8002418:	d1b71759 	.word	0xd1b71759
 800241c:	51eb851f 	.word	0x51eb851f
 8002420:	42700000 	.word	0x42700000

08002424 <NMEA_GNVTG_Analysis>:

//分析GNVTG信息
//gnssx:nmea信息结构�????????????
//buf:接收到的GNSS数据缓冲区首地址
void NMEA_GNVTG_Analysis(nmea_msg *gnssx,uint8_t *buf)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
	uint8_t *p1,dx;
	uint8_t posx;
	p1=(uint8_t*)strstr((const char *)buf,"$GNVTG");
 800242e:	491b      	ldr	r1, [pc, #108]	; (800249c <NMEA_GNVTG_Analysis+0x78>)
 8002430:	6838      	ldr	r0, [r7, #0]
 8002432:	f004 f84c 	bl	80064ce <strstr>
 8002436:	60f8      	str	r0, [r7, #12]
	posx=NMEA_Comma_Pos(p1,7);								//得到地面速率
 8002438:	2107      	movs	r1, #7
 800243a:	68f8      	ldr	r0, [r7, #12]
 800243c:	f7ff fc8c 	bl	8001d58 <NMEA_Comma_Pos>
 8002440:	4603      	mov	r3, r0
 8002442:	72fb      	strb	r3, [r7, #11]
	if(posx!=0XFF)
 8002444:	7afb      	ldrb	r3, [r7, #11]
 8002446:	2bff      	cmp	r3, #255	; 0xff
 8002448:	d023      	beq.n	8002492 <NMEA_GNVTG_Analysis+0x6e>
	{
		gnssx->speed=NMEA_Str2num(p1+posx,&dx);
 800244a:	7afb      	ldrb	r3, [r7, #11]
 800244c:	68fa      	ldr	r2, [r7, #12]
 800244e:	4413      	add	r3, r2
 8002450:	f107 020a 	add.w	r2, r7, #10
 8002454:	4611      	mov	r1, r2
 8002456:	4618      	mov	r0, r3
 8002458:	f7ff fcc6 	bl	8001de8 <NMEA_Str2num>
 800245c:	4603      	mov	r3, r0
 800245e:	b29a      	uxth	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
		if(dx<3)gnssx->speed*=NMEA_Pow(10,3-dx);	 	 		//确保扩大1000
 8002466:	7abb      	ldrb	r3, [r7, #10]
 8002468:	2b02      	cmp	r3, #2
 800246a:	d812      	bhi.n	8002492 <NMEA_GNVTG_Analysis+0x6e>
 800246c:	7abb      	ldrb	r3, [r7, #10]
 800246e:	f1c3 0303 	rsb	r3, r3, #3
 8002472:	b2db      	uxtb	r3, r3
 8002474:	4619      	mov	r1, r3
 8002476:	200a      	movs	r0, #10
 8002478:	f7ff fc9b 	bl	8001db2 <NMEA_Pow>
 800247c:	4602      	mov	r2, r0
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8002484:	b292      	uxth	r2, r2
 8002486:	fb02 f303 	mul.w	r3, r2, r3
 800248a:	b29a      	uxth	r2, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	}
}
 8002492:	bf00      	nop
 8002494:	3710      	adds	r7, #16
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	0800b414 	.word	0x0800b414

080024a0 <GNSS_Analysis>:

//提取NMEA-0183信息
//gnssx:nmea信息结构�????????????
//buf:接收到的GNSS数据缓冲区首地址
void GNSS_Analysis(nmea_msg *gnssx,uint8_t *buf)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
//	NMEA_GNGSV_Analysis(gnssx,buf);	//GNGSV解析
	NMEA_GNGGA_Analysis(gnssx,buf);	//GNGGA解析
 80024aa:	6839      	ldr	r1, [r7, #0]
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f7ff fd53 	bl	8001f58 <NMEA_GNGGA_Analysis>
	NMEA_GNGSA_Analysis(gnssx,buf);	//GNGSA解析
 80024b2:	6839      	ldr	r1, [r7, #0]
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f7ff fda3 	bl	8002000 <NMEA_GNGSA_Analysis>
	NMEA_GNRMC_Analysis(gnssx,buf);	//GNRMC解析
 80024ba:	6839      	ldr	r1, [r7, #0]
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f7ff fe33 	bl	8002128 <NMEA_GNRMC_Analysis>
	NMEA_GNVTG_Analysis(gnssx,buf);	//GNVTG解析
 80024c2:	6839      	ldr	r1, [r7, #0]
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f7ff ffad 	bl	8002424 <NMEA_GNVTG_Analysis>
}
 80024ca:	bf00      	nop
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	0000      	movs	r0, r0
 80024d4:	0000      	movs	r0, r0
	...

080024d8 <outOfChina>:
		*cka=*cka+buf[i];
		*ckb=*ckb+*cka;
	}
}

int outOfChina(double lat, double lon) {
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80024e2:	e9c7 2300 	strd	r2, r3, [r7]
    if (lon < 72.004 || lon > 137.8347)
 80024e6:	a318      	add	r3, pc, #96	; (adr r3, 8002548 <outOfChina+0x70>)
 80024e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 80024f0:	f7fe fad0 	bl	8000a94 <__aeabi_dcmplt>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d109      	bne.n	800250e <outOfChina+0x36>
 80024fa:	a315      	add	r3, pc, #84	; (adr r3, 8002550 <outOfChina+0x78>)
 80024fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002500:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002504:	f7fe fae4 	bl	8000ad0 <__aeabi_dcmpgt>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <outOfChina+0x3a>
        return true;
 800250e:	2301      	movs	r3, #1
 8002510:	e016      	b.n	8002540 <outOfChina+0x68>
    if (lat < 0.8293 || lat > 55.8271)
 8002512:	a311      	add	r3, pc, #68	; (adr r3, 8002558 <outOfChina+0x80>)
 8002514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002518:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800251c:	f7fe faba 	bl	8000a94 <__aeabi_dcmplt>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d109      	bne.n	800253a <outOfChina+0x62>
 8002526:	a30e      	add	r3, pc, #56	; (adr r3, 8002560 <outOfChina+0x88>)
 8002528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800252c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002530:	f7fe face 	bl	8000ad0 <__aeabi_dcmpgt>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <outOfChina+0x66>
        return true;
 800253a:	2301      	movs	r3, #1
 800253c:	e000      	b.n	8002540 <outOfChina+0x68>
    return false;
 800253e:	2300      	movs	r3, #0
}
 8002540:	4618      	mov	r0, r3
 8002542:	3710      	adds	r7, #16
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	89374bc7 	.word	0x89374bc7
 800254c:	40520041 	.word	0x40520041
 8002550:	dcc63f14 	.word	0xdcc63f14
 8002554:	40613ab5 	.word	0x40613ab5
 8002558:	27525461 	.word	0x27525461
 800255c:	3fea89a0 	.word	0x3fea89a0
 8002560:	69ad42c4 	.word	0x69ad42c4
 8002564:	404be9de 	.word	0x404be9de

08002568 <transformLat>:

// 纬度偏移�????????????
double transformLat(double x, double y) {
 8002568:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800256c:	b086      	sub	sp, #24
 800256e:	af00      	add	r7, sp, #0
 8002570:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002574:	e9c7 2300 	strd	r2, r3, [r7]
       double ret = 0.0;
 8002578:	f04f 0200 	mov.w	r2, #0
 800257c:	f04f 0300 	mov.w	r3, #0
 8002580:	e9c7 2304 	strd	r2, r3, [r7, #16]
       ret = -100.0 + 2.0 * x + 3.0 * y + 0.2 * y * y + 0.1 * x * y + 0.2 * sqrt(fabs(x));
 8002584:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002588:	4602      	mov	r2, r0
 800258a:	460b      	mov	r3, r1
 800258c:	f7fd fe5a 	bl	8000244 <__adddf3>
 8002590:	4602      	mov	r2, r0
 8002592:	460b      	mov	r3, r1
 8002594:	4610      	mov	r0, r2
 8002596:	4619      	mov	r1, r3
 8002598:	f04f 0200 	mov.w	r2, #0
 800259c:	4bbc      	ldr	r3, [pc, #752]	; (8002890 <transformLat+0x328>)
 800259e:	f7fd fe4f 	bl	8000240 <__aeabi_dsub>
 80025a2:	4602      	mov	r2, r0
 80025a4:	460b      	mov	r3, r1
 80025a6:	4690      	mov	r8, r2
 80025a8:	4699      	mov	r9, r3
 80025aa:	f04f 0200 	mov.w	r2, #0
 80025ae:	4bb9      	ldr	r3, [pc, #740]	; (8002894 <transformLat+0x32c>)
 80025b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80025b4:	f7fd fffc 	bl	80005b0 <__aeabi_dmul>
 80025b8:	4602      	mov	r2, r0
 80025ba:	460b      	mov	r3, r1
 80025bc:	4640      	mov	r0, r8
 80025be:	4649      	mov	r1, r9
 80025c0:	f7fd fe40 	bl	8000244 <__adddf3>
 80025c4:	4602      	mov	r2, r0
 80025c6:	460b      	mov	r3, r1
 80025c8:	4690      	mov	r8, r2
 80025ca:	4699      	mov	r9, r3
 80025cc:	a3ac      	add	r3, pc, #688	; (adr r3, 8002880 <transformLat+0x318>)
 80025ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80025d6:	f7fd ffeb 	bl	80005b0 <__aeabi_dmul>
 80025da:	4602      	mov	r2, r0
 80025dc:	460b      	mov	r3, r1
 80025de:	4610      	mov	r0, r2
 80025e0:	4619      	mov	r1, r3
 80025e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80025e6:	f7fd ffe3 	bl	80005b0 <__aeabi_dmul>
 80025ea:	4602      	mov	r2, r0
 80025ec:	460b      	mov	r3, r1
 80025ee:	4640      	mov	r0, r8
 80025f0:	4649      	mov	r1, r9
 80025f2:	f7fd fe27 	bl	8000244 <__adddf3>
 80025f6:	4602      	mov	r2, r0
 80025f8:	460b      	mov	r3, r1
 80025fa:	4690      	mov	r8, r2
 80025fc:	4699      	mov	r9, r3
 80025fe:	a3a2      	add	r3, pc, #648	; (adr r3, 8002888 <transformLat+0x320>)
 8002600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002604:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002608:	f7fd ffd2 	bl	80005b0 <__aeabi_dmul>
 800260c:	4602      	mov	r2, r0
 800260e:	460b      	mov	r3, r1
 8002610:	4610      	mov	r0, r2
 8002612:	4619      	mov	r1, r3
 8002614:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002618:	f7fd ffca 	bl	80005b0 <__aeabi_dmul>
 800261c:	4602      	mov	r2, r0
 800261e:	460b      	mov	r3, r1
 8002620:	4640      	mov	r0, r8
 8002622:	4649      	mov	r1, r9
 8002624:	f7fd fe0e 	bl	8000244 <__adddf3>
 8002628:	4602      	mov	r2, r0
 800262a:	460b      	mov	r3, r1
 800262c:	4690      	mov	r8, r2
 800262e:	4699      	mov	r9, r3
 8002630:	68bc      	ldr	r4, [r7, #8]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8002638:	4620      	mov	r0, r4
 800263a:	4629      	mov	r1, r5
 800263c:	f007 fd56 	bl	800a0ec <sqrt>
 8002640:	a38f      	add	r3, pc, #572	; (adr r3, 8002880 <transformLat+0x318>)
 8002642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002646:	f7fd ffb3 	bl	80005b0 <__aeabi_dmul>
 800264a:	4602      	mov	r2, r0
 800264c:	460b      	mov	r3, r1
 800264e:	4640      	mov	r0, r8
 8002650:	4649      	mov	r1, r9
 8002652:	f7fd fdf7 	bl	8000244 <__adddf3>
 8002656:	4602      	mov	r2, r0
 8002658:	460b      	mov	r3, r1
 800265a:	e9c7 2304 	strd	r2, r3, [r7, #16]
       ret += (20.0 * sin(6.0 * x * pi) + 20.0 * sin(2.0 * x * pi)) * 2.0 / 3.0;
 800265e:	f04f 0200 	mov.w	r2, #0
 8002662:	4b8d      	ldr	r3, [pc, #564]	; (8002898 <transformLat+0x330>)
 8002664:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002668:	f7fd ffa2 	bl	80005b0 <__aeabi_dmul>
 800266c:	4602      	mov	r2, r0
 800266e:	460b      	mov	r3, r1
 8002670:	4610      	mov	r0, r2
 8002672:	4619      	mov	r1, r3
 8002674:	4b89      	ldr	r3, [pc, #548]	; (800289c <transformLat+0x334>)
 8002676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800267a:	f7fd ff99 	bl	80005b0 <__aeabi_dmul>
 800267e:	4602      	mov	r2, r0
 8002680:	460b      	mov	r3, r1
 8002682:	4610      	mov	r0, r2
 8002684:	4619      	mov	r1, r3
 8002686:	f007 fceb 	bl	800a060 <sin>
 800268a:	f04f 0200 	mov.w	r2, #0
 800268e:	4b84      	ldr	r3, [pc, #528]	; (80028a0 <transformLat+0x338>)
 8002690:	f7fd ff8e 	bl	80005b0 <__aeabi_dmul>
 8002694:	4602      	mov	r2, r0
 8002696:	460b      	mov	r3, r1
 8002698:	4614      	mov	r4, r2
 800269a:	461d      	mov	r5, r3
 800269c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80026a0:	4602      	mov	r2, r0
 80026a2:	460b      	mov	r3, r1
 80026a4:	f7fd fdce 	bl	8000244 <__adddf3>
 80026a8:	4602      	mov	r2, r0
 80026aa:	460b      	mov	r3, r1
 80026ac:	4610      	mov	r0, r2
 80026ae:	4619      	mov	r1, r3
 80026b0:	4b7a      	ldr	r3, [pc, #488]	; (800289c <transformLat+0x334>)
 80026b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026b6:	f7fd ff7b 	bl	80005b0 <__aeabi_dmul>
 80026ba:	4602      	mov	r2, r0
 80026bc:	460b      	mov	r3, r1
 80026be:	4610      	mov	r0, r2
 80026c0:	4619      	mov	r1, r3
 80026c2:	f007 fccd 	bl	800a060 <sin>
 80026c6:	f04f 0200 	mov.w	r2, #0
 80026ca:	4b75      	ldr	r3, [pc, #468]	; (80028a0 <transformLat+0x338>)
 80026cc:	f7fd ff70 	bl	80005b0 <__aeabi_dmul>
 80026d0:	4602      	mov	r2, r0
 80026d2:	460b      	mov	r3, r1
 80026d4:	4620      	mov	r0, r4
 80026d6:	4629      	mov	r1, r5
 80026d8:	f7fd fdb4 	bl	8000244 <__adddf3>
 80026dc:	4602      	mov	r2, r0
 80026de:	460b      	mov	r3, r1
 80026e0:	4610      	mov	r0, r2
 80026e2:	4619      	mov	r1, r3
 80026e4:	4602      	mov	r2, r0
 80026e6:	460b      	mov	r3, r1
 80026e8:	f7fd fdac 	bl	8000244 <__adddf3>
 80026ec:	4602      	mov	r2, r0
 80026ee:	460b      	mov	r3, r1
 80026f0:	4610      	mov	r0, r2
 80026f2:	4619      	mov	r1, r3
 80026f4:	f04f 0200 	mov.w	r2, #0
 80026f8:	4b66      	ldr	r3, [pc, #408]	; (8002894 <transformLat+0x32c>)
 80026fa:	f7fe f883 	bl	8000804 <__aeabi_ddiv>
 80026fe:	4602      	mov	r2, r0
 8002700:	460b      	mov	r3, r1
 8002702:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002706:	f7fd fd9d 	bl	8000244 <__adddf3>
 800270a:	4602      	mov	r2, r0
 800270c:	460b      	mov	r3, r1
 800270e:	e9c7 2304 	strd	r2, r3, [r7, #16]
       ret += (20.0 * sin(y * pi) + 40.0 * sin(y / 3.0 * pi)) * 2.0 / 3.0;
 8002712:	4b62      	ldr	r3, [pc, #392]	; (800289c <transformLat+0x334>)
 8002714:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002718:	e9d7 2300 	ldrd	r2, r3, [r7]
 800271c:	f7fd ff48 	bl	80005b0 <__aeabi_dmul>
 8002720:	4602      	mov	r2, r0
 8002722:	460b      	mov	r3, r1
 8002724:	4610      	mov	r0, r2
 8002726:	4619      	mov	r1, r3
 8002728:	f007 fc9a 	bl	800a060 <sin>
 800272c:	f04f 0200 	mov.w	r2, #0
 8002730:	4b5b      	ldr	r3, [pc, #364]	; (80028a0 <transformLat+0x338>)
 8002732:	f7fd ff3d 	bl	80005b0 <__aeabi_dmul>
 8002736:	4602      	mov	r2, r0
 8002738:	460b      	mov	r3, r1
 800273a:	4614      	mov	r4, r2
 800273c:	461d      	mov	r5, r3
 800273e:	f04f 0200 	mov.w	r2, #0
 8002742:	4b54      	ldr	r3, [pc, #336]	; (8002894 <transformLat+0x32c>)
 8002744:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002748:	f7fe f85c 	bl	8000804 <__aeabi_ddiv>
 800274c:	4602      	mov	r2, r0
 800274e:	460b      	mov	r3, r1
 8002750:	4610      	mov	r0, r2
 8002752:	4619      	mov	r1, r3
 8002754:	4b51      	ldr	r3, [pc, #324]	; (800289c <transformLat+0x334>)
 8002756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800275a:	f7fd ff29 	bl	80005b0 <__aeabi_dmul>
 800275e:	4602      	mov	r2, r0
 8002760:	460b      	mov	r3, r1
 8002762:	4610      	mov	r0, r2
 8002764:	4619      	mov	r1, r3
 8002766:	f007 fc7b 	bl	800a060 <sin>
 800276a:	f04f 0200 	mov.w	r2, #0
 800276e:	4b4d      	ldr	r3, [pc, #308]	; (80028a4 <transformLat+0x33c>)
 8002770:	f7fd ff1e 	bl	80005b0 <__aeabi_dmul>
 8002774:	4602      	mov	r2, r0
 8002776:	460b      	mov	r3, r1
 8002778:	4620      	mov	r0, r4
 800277a:	4629      	mov	r1, r5
 800277c:	f7fd fd62 	bl	8000244 <__adddf3>
 8002780:	4602      	mov	r2, r0
 8002782:	460b      	mov	r3, r1
 8002784:	4610      	mov	r0, r2
 8002786:	4619      	mov	r1, r3
 8002788:	4602      	mov	r2, r0
 800278a:	460b      	mov	r3, r1
 800278c:	f7fd fd5a 	bl	8000244 <__adddf3>
 8002790:	4602      	mov	r2, r0
 8002792:	460b      	mov	r3, r1
 8002794:	4610      	mov	r0, r2
 8002796:	4619      	mov	r1, r3
 8002798:	f04f 0200 	mov.w	r2, #0
 800279c:	4b3d      	ldr	r3, [pc, #244]	; (8002894 <transformLat+0x32c>)
 800279e:	f7fe f831 	bl	8000804 <__aeabi_ddiv>
 80027a2:	4602      	mov	r2, r0
 80027a4:	460b      	mov	r3, r1
 80027a6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80027aa:	f7fd fd4b 	bl	8000244 <__adddf3>
 80027ae:	4602      	mov	r2, r0
 80027b0:	460b      	mov	r3, r1
 80027b2:	e9c7 2304 	strd	r2, r3, [r7, #16]
       ret += (160.0 * sin(y / 12.0 * pi) + 320 * sin(y * pi  / 30.0)) * 2.0 / 3.0;
 80027b6:	f04f 0200 	mov.w	r2, #0
 80027ba:	4b3b      	ldr	r3, [pc, #236]	; (80028a8 <transformLat+0x340>)
 80027bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80027c0:	f7fe f820 	bl	8000804 <__aeabi_ddiv>
 80027c4:	4602      	mov	r2, r0
 80027c6:	460b      	mov	r3, r1
 80027c8:	4610      	mov	r0, r2
 80027ca:	4619      	mov	r1, r3
 80027cc:	4b33      	ldr	r3, [pc, #204]	; (800289c <transformLat+0x334>)
 80027ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027d2:	f7fd feed 	bl	80005b0 <__aeabi_dmul>
 80027d6:	4602      	mov	r2, r0
 80027d8:	460b      	mov	r3, r1
 80027da:	4610      	mov	r0, r2
 80027dc:	4619      	mov	r1, r3
 80027de:	f007 fc3f 	bl	800a060 <sin>
 80027e2:	f04f 0200 	mov.w	r2, #0
 80027e6:	4b31      	ldr	r3, [pc, #196]	; (80028ac <transformLat+0x344>)
 80027e8:	f7fd fee2 	bl	80005b0 <__aeabi_dmul>
 80027ec:	4602      	mov	r2, r0
 80027ee:	460b      	mov	r3, r1
 80027f0:	4614      	mov	r4, r2
 80027f2:	461d      	mov	r5, r3
 80027f4:	4b29      	ldr	r3, [pc, #164]	; (800289c <transformLat+0x334>)
 80027f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80027fe:	f7fd fed7 	bl	80005b0 <__aeabi_dmul>
 8002802:	4602      	mov	r2, r0
 8002804:	460b      	mov	r3, r1
 8002806:	4610      	mov	r0, r2
 8002808:	4619      	mov	r1, r3
 800280a:	f04f 0200 	mov.w	r2, #0
 800280e:	4b28      	ldr	r3, [pc, #160]	; (80028b0 <transformLat+0x348>)
 8002810:	f7fd fff8 	bl	8000804 <__aeabi_ddiv>
 8002814:	4602      	mov	r2, r0
 8002816:	460b      	mov	r3, r1
 8002818:	4610      	mov	r0, r2
 800281a:	4619      	mov	r1, r3
 800281c:	f007 fc20 	bl	800a060 <sin>
 8002820:	f04f 0200 	mov.w	r2, #0
 8002824:	4b23      	ldr	r3, [pc, #140]	; (80028b4 <transformLat+0x34c>)
 8002826:	f7fd fec3 	bl	80005b0 <__aeabi_dmul>
 800282a:	4602      	mov	r2, r0
 800282c:	460b      	mov	r3, r1
 800282e:	4620      	mov	r0, r4
 8002830:	4629      	mov	r1, r5
 8002832:	f7fd fd07 	bl	8000244 <__adddf3>
 8002836:	4602      	mov	r2, r0
 8002838:	460b      	mov	r3, r1
 800283a:	4610      	mov	r0, r2
 800283c:	4619      	mov	r1, r3
 800283e:	4602      	mov	r2, r0
 8002840:	460b      	mov	r3, r1
 8002842:	f7fd fcff 	bl	8000244 <__adddf3>
 8002846:	4602      	mov	r2, r0
 8002848:	460b      	mov	r3, r1
 800284a:	4610      	mov	r0, r2
 800284c:	4619      	mov	r1, r3
 800284e:	f04f 0200 	mov.w	r2, #0
 8002852:	4b10      	ldr	r3, [pc, #64]	; (8002894 <transformLat+0x32c>)
 8002854:	f7fd ffd6 	bl	8000804 <__aeabi_ddiv>
 8002858:	4602      	mov	r2, r0
 800285a:	460b      	mov	r3, r1
 800285c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002860:	f7fd fcf0 	bl	8000244 <__adddf3>
 8002864:	4602      	mov	r2, r0
 8002866:	460b      	mov	r3, r1
 8002868:	e9c7 2304 	strd	r2, r3, [r7, #16]
       return ret;
 800286c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8002870:	4610      	mov	r0, r2
 8002872:	4619      	mov	r1, r3
 8002874:	3718      	adds	r7, #24
 8002876:	46bd      	mov	sp, r7
 8002878:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800287c:	f3af 8000 	nop.w
 8002880:	9999999a 	.word	0x9999999a
 8002884:	3fc99999 	.word	0x3fc99999
 8002888:	9999999a 	.word	0x9999999a
 800288c:	3fb99999 	.word	0x3fb99999
 8002890:	40590000 	.word	0x40590000
 8002894:	40080000 	.word	0x40080000
 8002898:	40180000 	.word	0x40180000
 800289c:	20000000 	.word	0x20000000
 80028a0:	40340000 	.word	0x40340000
 80028a4:	40440000 	.word	0x40440000
 80028a8:	40280000 	.word	0x40280000
 80028ac:	40640000 	.word	0x40640000
 80028b0:	403e0000 	.word	0x403e0000
 80028b4:	40740000 	.word	0x40740000

080028b8 <transformLon>:

// 经度偏移�????????????
double transformLon(double x, double y) {
 80028b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80028bc:	b086      	sub	sp, #24
 80028be:	af00      	add	r7, sp, #0
 80028c0:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80028c4:	e9c7 2300 	strd	r2, r3, [r7]
       double ret = 0.0;
 80028c8:	f04f 0200 	mov.w	r2, #0
 80028cc:	f04f 0300 	mov.w	r3, #0
 80028d0:	e9c7 2304 	strd	r2, r3, [r7, #16]
       ret = 300.0 + x + 2.0 * y + 0.1 * x * x + 0.1 * x * y + 0.1 * sqrt(fabs(x));
 80028d4:	a3ba      	add	r3, pc, #744	; (adr r3, 8002bc0 <transformLon+0x308>)
 80028d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80028de:	f7fd fcb1 	bl	8000244 <__adddf3>
 80028e2:	4602      	mov	r2, r0
 80028e4:	460b      	mov	r3, r1
 80028e6:	4690      	mov	r8, r2
 80028e8:	4699      	mov	r9, r3
 80028ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80028ee:	4602      	mov	r2, r0
 80028f0:	460b      	mov	r3, r1
 80028f2:	f7fd fca7 	bl	8000244 <__adddf3>
 80028f6:	4602      	mov	r2, r0
 80028f8:	460b      	mov	r3, r1
 80028fa:	4640      	mov	r0, r8
 80028fc:	4649      	mov	r1, r9
 80028fe:	f7fd fca1 	bl	8000244 <__adddf3>
 8002902:	4602      	mov	r2, r0
 8002904:	460b      	mov	r3, r1
 8002906:	4690      	mov	r8, r2
 8002908:	4699      	mov	r9, r3
 800290a:	a3af      	add	r3, pc, #700	; (adr r3, 8002bc8 <transformLon+0x310>)
 800290c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002910:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002914:	f7fd fe4c 	bl	80005b0 <__aeabi_dmul>
 8002918:	4602      	mov	r2, r0
 800291a:	460b      	mov	r3, r1
 800291c:	4610      	mov	r0, r2
 800291e:	4619      	mov	r1, r3
 8002920:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002924:	f7fd fe44 	bl	80005b0 <__aeabi_dmul>
 8002928:	4602      	mov	r2, r0
 800292a:	460b      	mov	r3, r1
 800292c:	4640      	mov	r0, r8
 800292e:	4649      	mov	r1, r9
 8002930:	f7fd fc88 	bl	8000244 <__adddf3>
 8002934:	4602      	mov	r2, r0
 8002936:	460b      	mov	r3, r1
 8002938:	4690      	mov	r8, r2
 800293a:	4699      	mov	r9, r3
 800293c:	a3a2      	add	r3, pc, #648	; (adr r3, 8002bc8 <transformLon+0x310>)
 800293e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002942:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002946:	f7fd fe33 	bl	80005b0 <__aeabi_dmul>
 800294a:	4602      	mov	r2, r0
 800294c:	460b      	mov	r3, r1
 800294e:	4610      	mov	r0, r2
 8002950:	4619      	mov	r1, r3
 8002952:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002956:	f7fd fe2b 	bl	80005b0 <__aeabi_dmul>
 800295a:	4602      	mov	r2, r0
 800295c:	460b      	mov	r3, r1
 800295e:	4640      	mov	r0, r8
 8002960:	4649      	mov	r1, r9
 8002962:	f7fd fc6f 	bl	8000244 <__adddf3>
 8002966:	4602      	mov	r2, r0
 8002968:	460b      	mov	r3, r1
 800296a:	4690      	mov	r8, r2
 800296c:	4699      	mov	r9, r3
 800296e:	68bc      	ldr	r4, [r7, #8]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8002976:	4620      	mov	r0, r4
 8002978:	4629      	mov	r1, r5
 800297a:	f007 fbb7 	bl	800a0ec <sqrt>
 800297e:	a392      	add	r3, pc, #584	; (adr r3, 8002bc8 <transformLon+0x310>)
 8002980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002984:	f7fd fe14 	bl	80005b0 <__aeabi_dmul>
 8002988:	4602      	mov	r2, r0
 800298a:	460b      	mov	r3, r1
 800298c:	4640      	mov	r0, r8
 800298e:	4649      	mov	r1, r9
 8002990:	f7fd fc58 	bl	8000244 <__adddf3>
 8002994:	4602      	mov	r2, r0
 8002996:	460b      	mov	r3, r1
 8002998:	e9c7 2304 	strd	r2, r3, [r7, #16]
       ret += (20.0 * sin(6.0 * x * pi) + 20.0 * sin(2.0 * x * pi)) * 2.0 / 3.0;
 800299c:	f04f 0200 	mov.w	r2, #0
 80029a0:	4b8d      	ldr	r3, [pc, #564]	; (8002bd8 <transformLon+0x320>)
 80029a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80029a6:	f7fd fe03 	bl	80005b0 <__aeabi_dmul>
 80029aa:	4602      	mov	r2, r0
 80029ac:	460b      	mov	r3, r1
 80029ae:	4610      	mov	r0, r2
 80029b0:	4619      	mov	r1, r3
 80029b2:	4b8a      	ldr	r3, [pc, #552]	; (8002bdc <transformLon+0x324>)
 80029b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b8:	f7fd fdfa 	bl	80005b0 <__aeabi_dmul>
 80029bc:	4602      	mov	r2, r0
 80029be:	460b      	mov	r3, r1
 80029c0:	4610      	mov	r0, r2
 80029c2:	4619      	mov	r1, r3
 80029c4:	f007 fb4c 	bl	800a060 <sin>
 80029c8:	f04f 0200 	mov.w	r2, #0
 80029cc:	4b84      	ldr	r3, [pc, #528]	; (8002be0 <transformLon+0x328>)
 80029ce:	f7fd fdef 	bl	80005b0 <__aeabi_dmul>
 80029d2:	4602      	mov	r2, r0
 80029d4:	460b      	mov	r3, r1
 80029d6:	4614      	mov	r4, r2
 80029d8:	461d      	mov	r5, r3
 80029da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80029de:	4602      	mov	r2, r0
 80029e0:	460b      	mov	r3, r1
 80029e2:	f7fd fc2f 	bl	8000244 <__adddf3>
 80029e6:	4602      	mov	r2, r0
 80029e8:	460b      	mov	r3, r1
 80029ea:	4610      	mov	r0, r2
 80029ec:	4619      	mov	r1, r3
 80029ee:	4b7b      	ldr	r3, [pc, #492]	; (8002bdc <transformLon+0x324>)
 80029f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029f4:	f7fd fddc 	bl	80005b0 <__aeabi_dmul>
 80029f8:	4602      	mov	r2, r0
 80029fa:	460b      	mov	r3, r1
 80029fc:	4610      	mov	r0, r2
 80029fe:	4619      	mov	r1, r3
 8002a00:	f007 fb2e 	bl	800a060 <sin>
 8002a04:	f04f 0200 	mov.w	r2, #0
 8002a08:	4b75      	ldr	r3, [pc, #468]	; (8002be0 <transformLon+0x328>)
 8002a0a:	f7fd fdd1 	bl	80005b0 <__aeabi_dmul>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	460b      	mov	r3, r1
 8002a12:	4620      	mov	r0, r4
 8002a14:	4629      	mov	r1, r5
 8002a16:	f7fd fc15 	bl	8000244 <__adddf3>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	4610      	mov	r0, r2
 8002a20:	4619      	mov	r1, r3
 8002a22:	4602      	mov	r2, r0
 8002a24:	460b      	mov	r3, r1
 8002a26:	f7fd fc0d 	bl	8000244 <__adddf3>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	4610      	mov	r0, r2
 8002a30:	4619      	mov	r1, r3
 8002a32:	f04f 0200 	mov.w	r2, #0
 8002a36:	4b6b      	ldr	r3, [pc, #428]	; (8002be4 <transformLon+0x32c>)
 8002a38:	f7fd fee4 	bl	8000804 <__aeabi_ddiv>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	460b      	mov	r3, r1
 8002a40:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002a44:	f7fd fbfe 	bl	8000244 <__adddf3>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	e9c7 2304 	strd	r2, r3, [r7, #16]
       ret += (20.0 * sin(x * pi) + 40.0 * sin(x / 3.0 * pi)) * 2.0 / 3.0;
 8002a50:	4b62      	ldr	r3, [pc, #392]	; (8002bdc <transformLon+0x324>)
 8002a52:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a56:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a5a:	f7fd fda9 	bl	80005b0 <__aeabi_dmul>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	460b      	mov	r3, r1
 8002a62:	4610      	mov	r0, r2
 8002a64:	4619      	mov	r1, r3
 8002a66:	f007 fafb 	bl	800a060 <sin>
 8002a6a:	f04f 0200 	mov.w	r2, #0
 8002a6e:	4b5c      	ldr	r3, [pc, #368]	; (8002be0 <transformLon+0x328>)
 8002a70:	f7fd fd9e 	bl	80005b0 <__aeabi_dmul>
 8002a74:	4602      	mov	r2, r0
 8002a76:	460b      	mov	r3, r1
 8002a78:	4614      	mov	r4, r2
 8002a7a:	461d      	mov	r5, r3
 8002a7c:	f04f 0200 	mov.w	r2, #0
 8002a80:	4b58      	ldr	r3, [pc, #352]	; (8002be4 <transformLon+0x32c>)
 8002a82:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002a86:	f7fd febd 	bl	8000804 <__aeabi_ddiv>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	4610      	mov	r0, r2
 8002a90:	4619      	mov	r1, r3
 8002a92:	4b52      	ldr	r3, [pc, #328]	; (8002bdc <transformLon+0x324>)
 8002a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a98:	f7fd fd8a 	bl	80005b0 <__aeabi_dmul>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	460b      	mov	r3, r1
 8002aa0:	4610      	mov	r0, r2
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	f007 fadc 	bl	800a060 <sin>
 8002aa8:	f04f 0200 	mov.w	r2, #0
 8002aac:	4b4e      	ldr	r3, [pc, #312]	; (8002be8 <transformLon+0x330>)
 8002aae:	f7fd fd7f 	bl	80005b0 <__aeabi_dmul>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	4620      	mov	r0, r4
 8002ab8:	4629      	mov	r1, r5
 8002aba:	f7fd fbc3 	bl	8000244 <__adddf3>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	4610      	mov	r0, r2
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	460b      	mov	r3, r1
 8002aca:	f7fd fbbb 	bl	8000244 <__adddf3>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	4610      	mov	r0, r2
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	f04f 0200 	mov.w	r2, #0
 8002ada:	4b42      	ldr	r3, [pc, #264]	; (8002be4 <transformLon+0x32c>)
 8002adc:	f7fd fe92 	bl	8000804 <__aeabi_ddiv>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	460b      	mov	r3, r1
 8002ae4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002ae8:	f7fd fbac 	bl	8000244 <__adddf3>
 8002aec:	4602      	mov	r2, r0
 8002aee:	460b      	mov	r3, r1
 8002af0:	e9c7 2304 	strd	r2, r3, [r7, #16]
       ret += (150.0 * sin(x / 12.0 * pi) + 300.0 * sin(x / 30.0 * pi)) * 2.0 / 3.0;
 8002af4:	f04f 0200 	mov.w	r2, #0
 8002af8:	4b3c      	ldr	r3, [pc, #240]	; (8002bec <transformLon+0x334>)
 8002afa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002afe:	f7fd fe81 	bl	8000804 <__aeabi_ddiv>
 8002b02:	4602      	mov	r2, r0
 8002b04:	460b      	mov	r3, r1
 8002b06:	4610      	mov	r0, r2
 8002b08:	4619      	mov	r1, r3
 8002b0a:	4b34      	ldr	r3, [pc, #208]	; (8002bdc <transformLon+0x324>)
 8002b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b10:	f7fd fd4e 	bl	80005b0 <__aeabi_dmul>
 8002b14:	4602      	mov	r2, r0
 8002b16:	460b      	mov	r3, r1
 8002b18:	4610      	mov	r0, r2
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	f007 faa0 	bl	800a060 <sin>
 8002b20:	a32b      	add	r3, pc, #172	; (adr r3, 8002bd0 <transformLon+0x318>)
 8002b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b26:	f7fd fd43 	bl	80005b0 <__aeabi_dmul>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	4614      	mov	r4, r2
 8002b30:	461d      	mov	r5, r3
 8002b32:	f04f 0200 	mov.w	r2, #0
 8002b36:	4b2e      	ldr	r3, [pc, #184]	; (8002bf0 <transformLon+0x338>)
 8002b38:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002b3c:	f7fd fe62 	bl	8000804 <__aeabi_ddiv>
 8002b40:	4602      	mov	r2, r0
 8002b42:	460b      	mov	r3, r1
 8002b44:	4610      	mov	r0, r2
 8002b46:	4619      	mov	r1, r3
 8002b48:	4b24      	ldr	r3, [pc, #144]	; (8002bdc <transformLon+0x324>)
 8002b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b4e:	f7fd fd2f 	bl	80005b0 <__aeabi_dmul>
 8002b52:	4602      	mov	r2, r0
 8002b54:	460b      	mov	r3, r1
 8002b56:	4610      	mov	r0, r2
 8002b58:	4619      	mov	r1, r3
 8002b5a:	f007 fa81 	bl	800a060 <sin>
 8002b5e:	a318      	add	r3, pc, #96	; (adr r3, 8002bc0 <transformLon+0x308>)
 8002b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b64:	f7fd fd24 	bl	80005b0 <__aeabi_dmul>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	460b      	mov	r3, r1
 8002b6c:	4620      	mov	r0, r4
 8002b6e:	4629      	mov	r1, r5
 8002b70:	f7fd fb68 	bl	8000244 <__adddf3>
 8002b74:	4602      	mov	r2, r0
 8002b76:	460b      	mov	r3, r1
 8002b78:	4610      	mov	r0, r2
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	460b      	mov	r3, r1
 8002b80:	f7fd fb60 	bl	8000244 <__adddf3>
 8002b84:	4602      	mov	r2, r0
 8002b86:	460b      	mov	r3, r1
 8002b88:	4610      	mov	r0, r2
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	f04f 0200 	mov.w	r2, #0
 8002b90:	4b14      	ldr	r3, [pc, #80]	; (8002be4 <transformLon+0x32c>)
 8002b92:	f7fd fe37 	bl	8000804 <__aeabi_ddiv>
 8002b96:	4602      	mov	r2, r0
 8002b98:	460b      	mov	r3, r1
 8002b9a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002b9e:	f7fd fb51 	bl	8000244 <__adddf3>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	e9c7 2304 	strd	r2, r3, [r7, #16]
       return ret;
 8002baa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8002bae:	4610      	mov	r0, r2
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	3718      	adds	r7, #24
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002bba:	bf00      	nop
 8002bbc:	f3af 8000 	nop.w
 8002bc0:	00000000 	.word	0x00000000
 8002bc4:	4072c000 	.word	0x4072c000
 8002bc8:	9999999a 	.word	0x9999999a
 8002bcc:	3fb99999 	.word	0x3fb99999
 8002bd0:	00000000 	.word	0x00000000
 8002bd4:	4062c000 	.word	0x4062c000
 8002bd8:	40180000 	.word	0x40180000
 8002bdc:	20000000 	.word	0x20000000
 8002be0:	40340000 	.word	0x40340000
 8002be4:	40080000 	.word	0x40080000
 8002be8:	40440000 	.word	0x40440000
 8002bec:	40280000 	.word	0x40280000
 8002bf0:	403e0000 	.word	0x403e0000

08002bf4 <wgs2gcj>:

int wgs2gcj(double lat, double lon, double* pLat, double* pLon) {
 8002bf4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002bf8:	b08e      	sub	sp, #56	; 0x38
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002c00:	e9c7 2300 	strd	r2, r3, [r7]
    if (outOfChina(lat,lon))
 8002c04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c08:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002c0c:	f7ff fc64 	bl	80024d8 <outOfChina>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d00b      	beq.n	8002c2e <wgs2gcj+0x3a>
    {
        *pLat = lat;
 8002c16:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002c18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c1c:	e9c1 2300 	strd	r2, r3, [r1]
        *pLon = lon;
 8002c20:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002c22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c26:	e9c1 2300 	strd	r2, r3, [r1]
        return 0;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	e0f6      	b.n	8002e1c <wgs2gcj+0x228>
    }
   double dLat = transformLat(lon - 105.0, lat - 35.0);
 8002c2e:	f04f 0200 	mov.w	r2, #0
 8002c32:	4b7d      	ldr	r3, [pc, #500]	; (8002e28 <wgs2gcj+0x234>)
 8002c34:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002c38:	f7fd fb02 	bl	8000240 <__aeabi_dsub>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	460b      	mov	r3, r1
 8002c40:	4614      	mov	r4, r2
 8002c42:	461d      	mov	r5, r3
 8002c44:	f04f 0200 	mov.w	r2, #0
 8002c48:	4b78      	ldr	r3, [pc, #480]	; (8002e2c <wgs2gcj+0x238>)
 8002c4a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002c4e:	f7fd faf7 	bl	8000240 <__aeabi_dsub>
 8002c52:	4602      	mov	r2, r0
 8002c54:	460b      	mov	r3, r1
 8002c56:	4620      	mov	r0, r4
 8002c58:	4629      	mov	r1, r5
 8002c5a:	f7ff fc85 	bl	8002568 <transformLat>
 8002c5e:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
   double dLon = transformLon(lon - 105.0, lat - 35.0);
 8002c62:	f04f 0200 	mov.w	r2, #0
 8002c66:	4b70      	ldr	r3, [pc, #448]	; (8002e28 <wgs2gcj+0x234>)
 8002c68:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002c6c:	f7fd fae8 	bl	8000240 <__aeabi_dsub>
 8002c70:	4602      	mov	r2, r0
 8002c72:	460b      	mov	r3, r1
 8002c74:	4614      	mov	r4, r2
 8002c76:	461d      	mov	r5, r3
 8002c78:	f04f 0200 	mov.w	r2, #0
 8002c7c:	4b6b      	ldr	r3, [pc, #428]	; (8002e2c <wgs2gcj+0x238>)
 8002c7e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002c82:	f7fd fadd 	bl	8000240 <__aeabi_dsub>
 8002c86:	4602      	mov	r2, r0
 8002c88:	460b      	mov	r3, r1
 8002c8a:	4620      	mov	r0, r4
 8002c8c:	4629      	mov	r1, r5
 8002c8e:	f7ff fe13 	bl	80028b8 <transformLon>
 8002c92:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
   double radLat = lat / 180.0 * pi;
 8002c96:	f04f 0200 	mov.w	r2, #0
 8002c9a:	4b65      	ldr	r3, [pc, #404]	; (8002e30 <wgs2gcj+0x23c>)
 8002c9c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002ca0:	f7fd fdb0 	bl	8000804 <__aeabi_ddiv>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	4610      	mov	r0, r2
 8002caa:	4619      	mov	r1, r3
 8002cac:	4b61      	ldr	r3, [pc, #388]	; (8002e34 <wgs2gcj+0x240>)
 8002cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cb2:	f7fd fc7d 	bl	80005b0 <__aeabi_dmul>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	460b      	mov	r3, r1
 8002cba:	e9c7 2308 	strd	r2, r3, [r7, #32]
   double magic = sin(radLat);
 8002cbe:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002cc2:	f007 f9cd 	bl	800a060 <sin>
 8002cc6:	e9c7 0106 	strd	r0, r1, [r7, #24]
   magic = 1 - ee * magic * magic;
 8002cca:	4b5b      	ldr	r3, [pc, #364]	; (8002e38 <wgs2gcj+0x244>)
 8002ccc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002cd0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cd4:	f7fd fc6c 	bl	80005b0 <__aeabi_dmul>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	460b      	mov	r3, r1
 8002cdc:	4610      	mov	r0, r2
 8002cde:	4619      	mov	r1, r3
 8002ce0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ce4:	f7fd fc64 	bl	80005b0 <__aeabi_dmul>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	460b      	mov	r3, r1
 8002cec:	f04f 0000 	mov.w	r0, #0
 8002cf0:	4952      	ldr	r1, [pc, #328]	; (8002e3c <wgs2gcj+0x248>)
 8002cf2:	f7fd faa5 	bl	8000240 <__aeabi_dsub>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	e9c7 2306 	strd	r2, r3, [r7, #24]
   double sqrtMagic = sqrt(magic);
 8002cfe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002d02:	f007 f9f3 	bl	800a0ec <sqrt>
 8002d06:	e9c7 0104 	strd	r0, r1, [r7, #16]
   dLat = (dLat * 180.0) / ((a * (1 - ee)) / (magic * sqrtMagic) * pi);
 8002d0a:	f04f 0200 	mov.w	r2, #0
 8002d0e:	4b48      	ldr	r3, [pc, #288]	; (8002e30 <wgs2gcj+0x23c>)
 8002d10:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002d14:	f7fd fc4c 	bl	80005b0 <__aeabi_dmul>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	460b      	mov	r3, r1
 8002d1c:	4614      	mov	r4, r2
 8002d1e:	461d      	mov	r5, r3
 8002d20:	4b45      	ldr	r3, [pc, #276]	; (8002e38 <wgs2gcj+0x244>)
 8002d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d26:	f04f 0000 	mov.w	r0, #0
 8002d2a:	4944      	ldr	r1, [pc, #272]	; (8002e3c <wgs2gcj+0x248>)
 8002d2c:	f7fd fa88 	bl	8000240 <__aeabi_dsub>
 8002d30:	4602      	mov	r2, r0
 8002d32:	460b      	mov	r3, r1
 8002d34:	4610      	mov	r0, r2
 8002d36:	4619      	mov	r1, r3
 8002d38:	4b41      	ldr	r3, [pc, #260]	; (8002e40 <wgs2gcj+0x24c>)
 8002d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d3e:	f7fd fc37 	bl	80005b0 <__aeabi_dmul>
 8002d42:	4602      	mov	r2, r0
 8002d44:	460b      	mov	r3, r1
 8002d46:	4690      	mov	r8, r2
 8002d48:	4699      	mov	r9, r3
 8002d4a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002d4e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002d52:	f7fd fc2d 	bl	80005b0 <__aeabi_dmul>
 8002d56:	4602      	mov	r2, r0
 8002d58:	460b      	mov	r3, r1
 8002d5a:	4640      	mov	r0, r8
 8002d5c:	4649      	mov	r1, r9
 8002d5e:	f7fd fd51 	bl	8000804 <__aeabi_ddiv>
 8002d62:	4602      	mov	r2, r0
 8002d64:	460b      	mov	r3, r1
 8002d66:	4610      	mov	r0, r2
 8002d68:	4619      	mov	r1, r3
 8002d6a:	4b32      	ldr	r3, [pc, #200]	; (8002e34 <wgs2gcj+0x240>)
 8002d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d70:	f7fd fc1e 	bl	80005b0 <__aeabi_dmul>
 8002d74:	4602      	mov	r2, r0
 8002d76:	460b      	mov	r3, r1
 8002d78:	4620      	mov	r0, r4
 8002d7a:	4629      	mov	r1, r5
 8002d7c:	f7fd fd42 	bl	8000804 <__aeabi_ddiv>
 8002d80:	4602      	mov	r2, r0
 8002d82:	460b      	mov	r3, r1
 8002d84:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
   dLon = (dLon * 180.0) / (a / sqrtMagic * cos(radLat) * pi);
 8002d88:	f04f 0200 	mov.w	r2, #0
 8002d8c:	4b28      	ldr	r3, [pc, #160]	; (8002e30 <wgs2gcj+0x23c>)
 8002d8e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002d92:	f7fd fc0d 	bl	80005b0 <__aeabi_dmul>
 8002d96:	4602      	mov	r2, r0
 8002d98:	460b      	mov	r3, r1
 8002d9a:	4614      	mov	r4, r2
 8002d9c:	461d      	mov	r5, r3
 8002d9e:	4b28      	ldr	r3, [pc, #160]	; (8002e40 <wgs2gcj+0x24c>)
 8002da0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002da4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002da8:	f7fd fd2c 	bl	8000804 <__aeabi_ddiv>
 8002dac:	4602      	mov	r2, r0
 8002dae:	460b      	mov	r3, r1
 8002db0:	4690      	mov	r8, r2
 8002db2:	4699      	mov	r9, r3
 8002db4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002db8:	f007 f910 	bl	8009fdc <cos>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	460b      	mov	r3, r1
 8002dc0:	4640      	mov	r0, r8
 8002dc2:	4649      	mov	r1, r9
 8002dc4:	f7fd fbf4 	bl	80005b0 <__aeabi_dmul>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	460b      	mov	r3, r1
 8002dcc:	4610      	mov	r0, r2
 8002dce:	4619      	mov	r1, r3
 8002dd0:	4b18      	ldr	r3, [pc, #96]	; (8002e34 <wgs2gcj+0x240>)
 8002dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd6:	f7fd fbeb 	bl	80005b0 <__aeabi_dmul>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	460b      	mov	r3, r1
 8002dde:	4620      	mov	r0, r4
 8002de0:	4629      	mov	r1, r5
 8002de2:	f7fd fd0f 	bl	8000804 <__aeabi_ddiv>
 8002de6:	4602      	mov	r2, r0
 8002de8:	460b      	mov	r3, r1
 8002dea:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   *pLat = lat + dLat;
 8002dee:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002df2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002df6:	f7fd fa25 	bl	8000244 <__adddf3>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002e00:	e9c1 2300 	strd	r2, r3, [r1]
   *pLon = lon + dLon;
 8002e04:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e08:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002e0c:	f7fd fa1a 	bl	8000244 <__adddf3>
 8002e10:	4602      	mov	r2, r0
 8002e12:	460b      	mov	r3, r1
 8002e14:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002e16:	e9c1 2300 	strd	r2, r3, [r1]
   return 0;
 8002e1a:	2300      	movs	r3, #0
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3738      	adds	r7, #56	; 0x38
 8002e20:	46bd      	mov	sp, r7
 8002e22:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002e26:	bf00      	nop
 8002e28:	405a4000 	.word	0x405a4000
 8002e2c:	40418000 	.word	0x40418000
 8002e30:	40668000 	.word	0x40668000
 8002e34:	20000000 	.word	0x20000000
 8002e38:	20000010 	.word	0x20000010
 8002e3c:	3ff00000 	.word	0x3ff00000
 8002e40:	20000008 	.word	0x20000008

08002e44 <n58_normal_check>:



int n58_normal_check(char *in_cmd) {
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]

	memset(USART_RX_BUF, 0, sizeof(USART_RX_BUF));
 8002e4c:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8002e50:	2100      	movs	r1, #0
 8002e52:	4814      	ldr	r0, [pc, #80]	; (8002ea4 <n58_normal_check+0x60>)
 8002e54:	f002 fc90 	bl	8005778 <memset>
    HAL_UART_DMAStop(&huart1);
 8002e58:	4813      	ldr	r0, [pc, #76]	; (8002ea8 <n58_normal_check+0x64>)
 8002e5a:	f002 f85b 	bl	8004f14 <HAL_UART_DMAStop>
    HAL_UART_Receive_DMA(&huart1,USART_RX_BUF, sizeof(USART_RX_BUF));
 8002e5e:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8002e62:	4910      	ldr	r1, [pc, #64]	; (8002ea4 <n58_normal_check+0x60>)
 8002e64:	4810      	ldr	r0, [pc, #64]	; (8002ea8 <n58_normal_check+0x64>)
 8002e66:	f001 ffd5 	bl	8004e14 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart1, (uint8_t*)in_cmd,strlen(in_cmd));//�??????
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f7fd f9dc 	bl	8000228 <strlen>
 8002e70:	4603      	mov	r3, r0
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	461a      	mov	r2, r3
 8002e76:	6879      	ldr	r1, [r7, #4]
 8002e78:	480b      	ldr	r0, [pc, #44]	; (8002ea8 <n58_normal_check+0x64>)
 8002e7a:	f001 ff5f 	bl	8004d3c <HAL_UART_Transmit_DMA>
	HAL_Delay(500);
 8002e7e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002e82:	f000 fb93 	bl	80035ac <HAL_Delay>
    if(strstr((char *)USART_RX_BUF, "OK") != NULL) {
 8002e86:	4909      	ldr	r1, [pc, #36]	; (8002eac <n58_normal_check+0x68>)
 8002e88:	4806      	ldr	r0, [pc, #24]	; (8002ea4 <n58_normal_check+0x60>)
 8002e8a:	f003 fb20 	bl	80064ce <strstr>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d001      	beq.n	8002e98 <n58_normal_check+0x54>
        return 0;
 8002e94:	2300      	movs	r3, #0
 8002e96:	e001      	b.n	8002e9c <n58_normal_check+0x58>
    }
    return -1;
 8002e98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3708      	adds	r7, #8
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	20000470 	.word	0x20000470
 8002ea8:	200003ac 	.word	0x200003ac
 8002eac:	0800b390 	.word	0x0800b390

08002eb0 <n58_check_sim_card>:

int n58_check_sim_card() {
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0
	memset(USART_RX_BUF, 0, sizeof(USART_RX_BUF));
 8002eb4:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8002eb8:	2100      	movs	r1, #0
 8002eba:	4817      	ldr	r0, [pc, #92]	; (8002f18 <n58_check_sim_card+0x68>)
 8002ebc:	f002 fc5c 	bl	8005778 <memset>
    HAL_UART_DMAStop(&huart1);
 8002ec0:	4816      	ldr	r0, [pc, #88]	; (8002f1c <n58_check_sim_card+0x6c>)
 8002ec2:	f002 f827 	bl	8004f14 <HAL_UART_DMAStop>
    HAL_UART_Receive_DMA(&huart1,USART_RX_BUF, sizeof(USART_RX_BUF));
 8002ec6:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8002eca:	4913      	ldr	r1, [pc, #76]	; (8002f18 <n58_check_sim_card+0x68>)
 8002ecc:	4813      	ldr	r0, [pc, #76]	; (8002f1c <n58_check_sim_card+0x6c>)
 8002ece:	f001 ffa1 	bl	8004e14 <HAL_UART_Receive_DMA>
	strcpy((char *)n58_sdata,"AT+CPIN?\r\n");
 8002ed2:	4b13      	ldr	r3, [pc, #76]	; (8002f20 <n58_check_sim_card+0x70>)
 8002ed4:	4a13      	ldr	r2, [pc, #76]	; (8002f24 <n58_check_sim_card+0x74>)
 8002ed6:	ca07      	ldmia	r2, {r0, r1, r2}
 8002ed8:	c303      	stmia	r3!, {r0, r1}
 8002eda:	801a      	strh	r2, [r3, #0]
 8002edc:	3302      	adds	r3, #2
 8002ede:	0c12      	lsrs	r2, r2, #16
 8002ee0:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_DMA(&huart1, (uint8_t*)n58_sdata,strlen(n58_sdata));//�??????
 8002ee2:	480f      	ldr	r0, [pc, #60]	; (8002f20 <n58_check_sim_card+0x70>)
 8002ee4:	f7fd f9a0 	bl	8000228 <strlen>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	461a      	mov	r2, r3
 8002eee:	490c      	ldr	r1, [pc, #48]	; (8002f20 <n58_check_sim_card+0x70>)
 8002ef0:	480a      	ldr	r0, [pc, #40]	; (8002f1c <n58_check_sim_card+0x6c>)
 8002ef2:	f001 ff23 	bl	8004d3c <HAL_UART_Transmit_DMA>
	HAL_Delay(500);
 8002ef6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002efa:	f000 fb57 	bl	80035ac <HAL_Delay>
    if(strstr((char *)USART_RX_BUF, "READY") != NULL) {
 8002efe:	490a      	ldr	r1, [pc, #40]	; (8002f28 <n58_check_sim_card+0x78>)
 8002f00:	4805      	ldr	r0, [pc, #20]	; (8002f18 <n58_check_sim_card+0x68>)
 8002f02:	f003 fae4 	bl	80064ce <strstr>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d001      	beq.n	8002f10 <n58_check_sim_card+0x60>
        return 0;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	e001      	b.n	8002f14 <n58_check_sim_card+0x64>
    }
    return -1;
 8002f10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	20000470 	.word	0x20000470
 8002f1c:	200003ac 	.word	0x200003ac
 8002f20:	20000220 	.word	0x20000220
 8002f24:	0800b41c 	.word	0x0800b41c
 8002f28:	0800b428 	.word	0x0800b428

08002f2c <n58_check_cgatt>:

int n58_check_cgatt() {
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	af00      	add	r7, sp, #0
	memset(USART_RX_BUF, 0, sizeof(USART_RX_BUF));
 8002f30:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8002f34:	2100      	movs	r1, #0
 8002f36:	4816      	ldr	r0, [pc, #88]	; (8002f90 <n58_check_cgatt+0x64>)
 8002f38:	f002 fc1e 	bl	8005778 <memset>
    HAL_UART_DMAStop(&huart1);
 8002f3c:	4815      	ldr	r0, [pc, #84]	; (8002f94 <n58_check_cgatt+0x68>)
 8002f3e:	f001 ffe9 	bl	8004f14 <HAL_UART_DMAStop>
    HAL_UART_Receive_DMA(&huart1,USART_RX_BUF, sizeof(USART_RX_BUF));
 8002f42:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8002f46:	4912      	ldr	r1, [pc, #72]	; (8002f90 <n58_check_cgatt+0x64>)
 8002f48:	4812      	ldr	r0, [pc, #72]	; (8002f94 <n58_check_cgatt+0x68>)
 8002f4a:	f001 ff63 	bl	8004e14 <HAL_UART_Receive_DMA>
	strcpy((char *)n58_sdata,"AT+CGATT?\r\n");
 8002f4e:	4b12      	ldr	r3, [pc, #72]	; (8002f98 <n58_check_cgatt+0x6c>)
 8002f50:	4a12      	ldr	r2, [pc, #72]	; (8002f9c <n58_check_cgatt+0x70>)
 8002f52:	ca07      	ldmia	r2, {r0, r1, r2}
 8002f54:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	HAL_UART_Transmit_DMA(&huart1, (uint8_t*)n58_sdata,strlen(n58_sdata));
 8002f58:	480f      	ldr	r0, [pc, #60]	; (8002f98 <n58_check_cgatt+0x6c>)
 8002f5a:	f7fd f965 	bl	8000228 <strlen>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	461a      	mov	r2, r3
 8002f64:	490c      	ldr	r1, [pc, #48]	; (8002f98 <n58_check_cgatt+0x6c>)
 8002f66:	480b      	ldr	r0, [pc, #44]	; (8002f94 <n58_check_cgatt+0x68>)
 8002f68:	f001 fee8 	bl	8004d3c <HAL_UART_Transmit_DMA>
	HAL_Delay(500);
 8002f6c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002f70:	f000 fb1c 	bl	80035ac <HAL_Delay>
    if(strstr((char *)USART_RX_BUF, "CGATT: 1") != NULL) {
 8002f74:	490a      	ldr	r1, [pc, #40]	; (8002fa0 <n58_check_cgatt+0x74>)
 8002f76:	4806      	ldr	r0, [pc, #24]	; (8002f90 <n58_check_cgatt+0x64>)
 8002f78:	f003 faa9 	bl	80064ce <strstr>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <n58_check_cgatt+0x5a>
        return 0;
 8002f82:	2300      	movs	r3, #0
 8002f84:	e001      	b.n	8002f8a <n58_check_cgatt+0x5e>
    }
    return -1;
 8002f86:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	20000470 	.word	0x20000470
 8002f94:	200003ac 	.word	0x200003ac
 8002f98:	20000220 	.word	0x20000220
 8002f9c:	0800b430 	.word	0x0800b430
 8002fa0:	0800b43c 	.word	0x0800b43c

08002fa4 <n58_check_creg>:

int n58_check_creg() {
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	af00      	add	r7, sp, #0
	memset(USART_RX_BUF, 0, sizeof(USART_RX_BUF));
 8002fa8:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8002fac:	2100      	movs	r1, #0
 8002fae:	4817      	ldr	r0, [pc, #92]	; (800300c <n58_check_creg+0x68>)
 8002fb0:	f002 fbe2 	bl	8005778 <memset>
    HAL_UART_DMAStop(&huart1);
 8002fb4:	4816      	ldr	r0, [pc, #88]	; (8003010 <n58_check_creg+0x6c>)
 8002fb6:	f001 ffad 	bl	8004f14 <HAL_UART_DMAStop>
    HAL_UART_Receive_DMA(&huart1,USART_RX_BUF, sizeof(USART_RX_BUF));
 8002fba:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8002fbe:	4913      	ldr	r1, [pc, #76]	; (800300c <n58_check_creg+0x68>)
 8002fc0:	4813      	ldr	r0, [pc, #76]	; (8003010 <n58_check_creg+0x6c>)
 8002fc2:	f001 ff27 	bl	8004e14 <HAL_UART_Receive_DMA>
	strcpy((char *)n58_sdata,"AT+CREG?\r\n");
 8002fc6:	4b13      	ldr	r3, [pc, #76]	; (8003014 <n58_check_creg+0x70>)
 8002fc8:	4a13      	ldr	r2, [pc, #76]	; (8003018 <n58_check_creg+0x74>)
 8002fca:	ca07      	ldmia	r2, {r0, r1, r2}
 8002fcc:	c303      	stmia	r3!, {r0, r1}
 8002fce:	801a      	strh	r2, [r3, #0]
 8002fd0:	3302      	adds	r3, #2
 8002fd2:	0c12      	lsrs	r2, r2, #16
 8002fd4:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_DMA(&huart1, (uint8_t*)n58_sdata,strlen(n58_sdata));
 8002fd6:	480f      	ldr	r0, [pc, #60]	; (8003014 <n58_check_creg+0x70>)
 8002fd8:	f7fd f926 	bl	8000228 <strlen>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	490c      	ldr	r1, [pc, #48]	; (8003014 <n58_check_creg+0x70>)
 8002fe4:	480a      	ldr	r0, [pc, #40]	; (8003010 <n58_check_creg+0x6c>)
 8002fe6:	f001 fea9 	bl	8004d3c <HAL_UART_Transmit_DMA>
	HAL_Delay(500);
 8002fea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002fee:	f000 fadd 	bl	80035ac <HAL_Delay>
    if(strstr((char *)USART_RX_BUF, "CREG: 2") != NULL) {
 8002ff2:	490a      	ldr	r1, [pc, #40]	; (800301c <n58_check_creg+0x78>)
 8002ff4:	4805      	ldr	r0, [pc, #20]	; (800300c <n58_check_creg+0x68>)
 8002ff6:	f003 fa6a 	bl	80064ce <strstr>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d001      	beq.n	8003004 <n58_check_creg+0x60>
        return 0;
 8003000:	2300      	movs	r3, #0
 8003002:	e001      	b.n	8003008 <n58_check_creg+0x64>
    }
    return -1;
 8003004:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003008:	4618      	mov	r0, r3
 800300a:	bd80      	pop	{r7, pc}
 800300c:	20000470 	.word	0x20000470
 8003010:	200003ac 	.word	0x200003ac
 8003014:	20000220 	.word	0x20000220
 8003018:	0800b448 	.word	0x0800b448
 800301c:	0800b454 	.word	0x0800b454

08003020 <n58_check_xiic>:


int n58_check_xiic() {
 8003020:	b580      	push	{r7, lr}
 8003022:	af00      	add	r7, sp, #0
	memset(USART_RX_BUF, 0, sizeof(USART_RX_BUF));
 8003024:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8003028:	2100      	movs	r1, #0
 800302a:	4817      	ldr	r0, [pc, #92]	; (8003088 <n58_check_xiic+0x68>)
 800302c:	f002 fba4 	bl	8005778 <memset>
    HAL_UART_DMAStop(&huart1);
 8003030:	4816      	ldr	r0, [pc, #88]	; (800308c <n58_check_xiic+0x6c>)
 8003032:	f001 ff6f 	bl	8004f14 <HAL_UART_DMAStop>
    HAL_UART_Receive_DMA(&huart1,USART_RX_BUF, sizeof(USART_RX_BUF));
 8003036:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800303a:	4913      	ldr	r1, [pc, #76]	; (8003088 <n58_check_xiic+0x68>)
 800303c:	4813      	ldr	r0, [pc, #76]	; (800308c <n58_check_xiic+0x6c>)
 800303e:	f001 fee9 	bl	8004e14 <HAL_UART_Receive_DMA>
	strcpy((char *)n58_sdata,"AT+XIIC?\r\n");
 8003042:	4b13      	ldr	r3, [pc, #76]	; (8003090 <n58_check_xiic+0x70>)
 8003044:	4a13      	ldr	r2, [pc, #76]	; (8003094 <n58_check_xiic+0x74>)
 8003046:	ca07      	ldmia	r2, {r0, r1, r2}
 8003048:	c303      	stmia	r3!, {r0, r1}
 800304a:	801a      	strh	r2, [r3, #0]
 800304c:	3302      	adds	r3, #2
 800304e:	0c12      	lsrs	r2, r2, #16
 8003050:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_DMA(&huart1, (uint8_t*)n58_sdata,strlen(n58_sdata));
 8003052:	480f      	ldr	r0, [pc, #60]	; (8003090 <n58_check_xiic+0x70>)
 8003054:	f7fd f8e8 	bl	8000228 <strlen>
 8003058:	4603      	mov	r3, r0
 800305a:	b29b      	uxth	r3, r3
 800305c:	461a      	mov	r2, r3
 800305e:	490c      	ldr	r1, [pc, #48]	; (8003090 <n58_check_xiic+0x70>)
 8003060:	480a      	ldr	r0, [pc, #40]	; (800308c <n58_check_xiic+0x6c>)
 8003062:	f001 fe6b 	bl	8004d3c <HAL_UART_Transmit_DMA>
	HAL_Delay(500);
 8003066:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800306a:	f000 fa9f 	bl	80035ac <HAL_Delay>
    if(strstr((char *)USART_RX_BUF, "+XIIC:    1") != NULL) {
 800306e:	490a      	ldr	r1, [pc, #40]	; (8003098 <n58_check_xiic+0x78>)
 8003070:	4805      	ldr	r0, [pc, #20]	; (8003088 <n58_check_xiic+0x68>)
 8003072:	f003 fa2c 	bl	80064ce <strstr>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d001      	beq.n	8003080 <n58_check_xiic+0x60>
        return 0;
 800307c:	2300      	movs	r3, #0
 800307e:	e001      	b.n	8003084 <n58_check_xiic+0x64>
    }
    return -1;
 8003080:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003084:	4618      	mov	r0, r3
 8003086:	bd80      	pop	{r7, pc}
 8003088:	20000470 	.word	0x20000470
 800308c:	200003ac 	.word	0x200003ac
 8003090:	20000220 	.word	0x20000220
 8003094:	0800b45c 	.word	0x0800b45c
 8003098:	0800b468 	.word	0x0800b468

0800309c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800309c:	b480      	push	{r7}
 800309e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80030a0:	b672      	cpsid	i
}
 80030a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80030a4:	e7fe      	b.n	80030a4 <Error_Handler+0x8>
	...

080030a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80030ae:	4b1a      	ldr	r3, [pc, #104]	; (8003118 <HAL_MspInit+0x70>)
 80030b0:	699b      	ldr	r3, [r3, #24]
 80030b2:	4a19      	ldr	r2, [pc, #100]	; (8003118 <HAL_MspInit+0x70>)
 80030b4:	f043 0301 	orr.w	r3, r3, #1
 80030b8:	6193      	str	r3, [r2, #24]
 80030ba:	4b17      	ldr	r3, [pc, #92]	; (8003118 <HAL_MspInit+0x70>)
 80030bc:	699b      	ldr	r3, [r3, #24]
 80030be:	f003 0301 	and.w	r3, r3, #1
 80030c2:	60bb      	str	r3, [r7, #8]
 80030c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030c6:	4b14      	ldr	r3, [pc, #80]	; (8003118 <HAL_MspInit+0x70>)
 80030c8:	69db      	ldr	r3, [r3, #28]
 80030ca:	4a13      	ldr	r2, [pc, #76]	; (8003118 <HAL_MspInit+0x70>)
 80030cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030d0:	61d3      	str	r3, [r2, #28]
 80030d2:	4b11      	ldr	r3, [pc, #68]	; (8003118 <HAL_MspInit+0x70>)
 80030d4:	69db      	ldr	r3, [r3, #28]
 80030d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030da:	607b      	str	r3, [r7, #4]
 80030dc:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 80030de:	2005      	movs	r0, #5
 80030e0:	f000 fb54 	bl	800378c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80030e4:	2200      	movs	r2, #0
 80030e6:	2100      	movs	r1, #0
 80030e8:	2005      	movs	r0, #5
 80030ea:	f000 fb5a 	bl	80037a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80030ee:	2005      	movs	r0, #5
 80030f0:	f000 fb73 	bl	80037da <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80030f4:	4b09      	ldr	r3, [pc, #36]	; (800311c <HAL_MspInit+0x74>)
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	60fb      	str	r3, [r7, #12]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003100:	60fb      	str	r3, [r7, #12]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003108:	60fb      	str	r3, [r7, #12]
 800310a:	4a04      	ldr	r2, [pc, #16]	; (800311c <HAL_MspInit+0x74>)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003110:	bf00      	nop
 8003112:	3710      	adds	r7, #16
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	40021000 	.word	0x40021000
 800311c:	40010000 	.word	0x40010000

08003120 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b088      	sub	sp, #32
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003128:	f107 0310 	add.w	r3, r7, #16
 800312c:	2200      	movs	r2, #0
 800312e:	601a      	str	r2, [r3, #0]
 8003130:	605a      	str	r2, [r3, #4]
 8003132:	609a      	str	r2, [r3, #8]
 8003134:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a48      	ldr	r2, [pc, #288]	; (800325c <HAL_UART_MspInit+0x13c>)
 800313c:	4293      	cmp	r3, r2
 800313e:	f040 8088 	bne.w	8003252 <HAL_UART_MspInit+0x132>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003142:	4b47      	ldr	r3, [pc, #284]	; (8003260 <HAL_UART_MspInit+0x140>)
 8003144:	699b      	ldr	r3, [r3, #24]
 8003146:	4a46      	ldr	r2, [pc, #280]	; (8003260 <HAL_UART_MspInit+0x140>)
 8003148:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800314c:	6193      	str	r3, [r2, #24]
 800314e:	4b44      	ldr	r3, [pc, #272]	; (8003260 <HAL_UART_MspInit+0x140>)
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003156:	60fb      	str	r3, [r7, #12]
 8003158:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800315a:	4b41      	ldr	r3, [pc, #260]	; (8003260 <HAL_UART_MspInit+0x140>)
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	4a40      	ldr	r2, [pc, #256]	; (8003260 <HAL_UART_MspInit+0x140>)
 8003160:	f043 0304 	orr.w	r3, r3, #4
 8003164:	6193      	str	r3, [r2, #24]
 8003166:	4b3e      	ldr	r3, [pc, #248]	; (8003260 <HAL_UART_MspInit+0x140>)
 8003168:	699b      	ldr	r3, [r3, #24]
 800316a:	f003 0304 	and.w	r3, r3, #4
 800316e:	60bb      	str	r3, [r7, #8]
 8003170:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003172:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003176:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003178:	2302      	movs	r3, #2
 800317a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800317c:	2303      	movs	r3, #3
 800317e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003180:	f107 0310 	add.w	r3, r7, #16
 8003184:	4619      	mov	r1, r3
 8003186:	4837      	ldr	r0, [pc, #220]	; (8003264 <HAL_UART_MspInit+0x144>)
 8003188:	f000 ffc4 	bl	8004114 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800318c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003190:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003192:	2300      	movs	r3, #0
 8003194:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003196:	2300      	movs	r3, #0
 8003198:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800319a:	f107 0310 	add.w	r3, r7, #16
 800319e:	4619      	mov	r1, r3
 80031a0:	4830      	ldr	r0, [pc, #192]	; (8003264 <HAL_UART_MspInit+0x144>)
 80031a2:	f000 ffb7 	bl	8004114 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80031a6:	4b30      	ldr	r3, [pc, #192]	; (8003268 <HAL_UART_MspInit+0x148>)
 80031a8:	4a30      	ldr	r2, [pc, #192]	; (800326c <HAL_UART_MspInit+0x14c>)
 80031aa:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80031ac:	4b2e      	ldr	r3, [pc, #184]	; (8003268 <HAL_UART_MspInit+0x148>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80031b2:	4b2d      	ldr	r3, [pc, #180]	; (8003268 <HAL_UART_MspInit+0x148>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80031b8:	4b2b      	ldr	r3, [pc, #172]	; (8003268 <HAL_UART_MspInit+0x148>)
 80031ba:	2280      	movs	r2, #128	; 0x80
 80031bc:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80031be:	4b2a      	ldr	r3, [pc, #168]	; (8003268 <HAL_UART_MspInit+0x148>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80031c4:	4b28      	ldr	r3, [pc, #160]	; (8003268 <HAL_UART_MspInit+0x148>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80031ca:	4b27      	ldr	r3, [pc, #156]	; (8003268 <HAL_UART_MspInit+0x148>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80031d0:	4b25      	ldr	r3, [pc, #148]	; (8003268 <HAL_UART_MspInit+0x148>)
 80031d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80031d6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80031d8:	4823      	ldr	r0, [pc, #140]	; (8003268 <HAL_UART_MspInit+0x148>)
 80031da:	f000 fb19 	bl	8003810 <HAL_DMA_Init>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d001      	beq.n	80031e8 <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 80031e4:	f7ff ff5a 	bl	800309c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	4a1f      	ldr	r2, [pc, #124]	; (8003268 <HAL_UART_MspInit+0x148>)
 80031ec:	635a      	str	r2, [r3, #52]	; 0x34
 80031ee:	4a1e      	ldr	r2, [pc, #120]	; (8003268 <HAL_UART_MspInit+0x148>)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80031f4:	4b1e      	ldr	r3, [pc, #120]	; (8003270 <HAL_UART_MspInit+0x150>)
 80031f6:	4a1f      	ldr	r2, [pc, #124]	; (8003274 <HAL_UART_MspInit+0x154>)
 80031f8:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80031fa:	4b1d      	ldr	r3, [pc, #116]	; (8003270 <HAL_UART_MspInit+0x150>)
 80031fc:	2210      	movs	r2, #16
 80031fe:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003200:	4b1b      	ldr	r3, [pc, #108]	; (8003270 <HAL_UART_MspInit+0x150>)
 8003202:	2200      	movs	r2, #0
 8003204:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003206:	4b1a      	ldr	r3, [pc, #104]	; (8003270 <HAL_UART_MspInit+0x150>)
 8003208:	2280      	movs	r2, #128	; 0x80
 800320a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800320c:	4b18      	ldr	r3, [pc, #96]	; (8003270 <HAL_UART_MspInit+0x150>)
 800320e:	2200      	movs	r2, #0
 8003210:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003212:	4b17      	ldr	r3, [pc, #92]	; (8003270 <HAL_UART_MspInit+0x150>)
 8003214:	2200      	movs	r2, #0
 8003216:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003218:	4b15      	ldr	r3, [pc, #84]	; (8003270 <HAL_UART_MspInit+0x150>)
 800321a:	2200      	movs	r2, #0
 800321c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800321e:	4b14      	ldr	r3, [pc, #80]	; (8003270 <HAL_UART_MspInit+0x150>)
 8003220:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003224:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003226:	4812      	ldr	r0, [pc, #72]	; (8003270 <HAL_UART_MspInit+0x150>)
 8003228:	f000 faf2 	bl	8003810 <HAL_DMA_Init>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d001      	beq.n	8003236 <HAL_UART_MspInit+0x116>
    {
      Error_Handler();
 8003232:	f7ff ff33 	bl	800309c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a0d      	ldr	r2, [pc, #52]	; (8003270 <HAL_UART_MspInit+0x150>)
 800323a:	631a      	str	r2, [r3, #48]	; 0x30
 800323c:	4a0c      	ldr	r2, [pc, #48]	; (8003270 <HAL_UART_MspInit+0x150>)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003242:	2200      	movs	r2, #0
 8003244:	2100      	movs	r1, #0
 8003246:	2025      	movs	r0, #37	; 0x25
 8003248:	f000 faab 	bl	80037a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800324c:	2025      	movs	r0, #37	; 0x25
 800324e:	f000 fac4 	bl	80037da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003252:	bf00      	nop
 8003254:	3720      	adds	r7, #32
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	40013800 	.word	0x40013800
 8003260:	40021000 	.word	0x40021000
 8003264:	40010800 	.word	0x40010800
 8003268:	20000368 	.word	0x20000368
 800326c:	40020058 	.word	0x40020058
 8003270:	20000324 	.word	0x20000324
 8003274:	40020044 	.word	0x40020044

08003278 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003278:	b480      	push	{r7}
 800327a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800327c:	e7fe      	b.n	800327c <NMI_Handler+0x4>

0800327e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800327e:	b480      	push	{r7}
 8003280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003282:	e7fe      	b.n	8003282 <HardFault_Handler+0x4>

08003284 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003284:	b480      	push	{r7}
 8003286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003288:	e7fe      	b.n	8003288 <MemManage_Handler+0x4>

0800328a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800328a:	b480      	push	{r7}
 800328c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800328e:	e7fe      	b.n	800328e <BusFault_Handler+0x4>

08003290 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003290:	b480      	push	{r7}
 8003292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003294:	e7fe      	b.n	8003294 <UsageFault_Handler+0x4>

08003296 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003296:	b480      	push	{r7}
 8003298:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800329a:	bf00      	nop
 800329c:	46bd      	mov	sp, r7
 800329e:	bc80      	pop	{r7}
 80032a0:	4770      	bx	lr

080032a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032a2:	b480      	push	{r7}
 80032a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032a6:	bf00      	nop
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bc80      	pop	{r7}
 80032ac:	4770      	bx	lr

080032ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80032ae:	b480      	push	{r7}
 80032b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80032b2:	bf00      	nop
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bc80      	pop	{r7}
 80032b8:	4770      	bx	lr

080032ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032ba:	b580      	push	{r7, lr}
 80032bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032be:	f000 f959 	bl	8003574 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032c2:	bf00      	nop
 80032c4:	bd80      	pop	{r7, pc}

080032c6 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80032c6:	b480      	push	{r7}
 80032c8:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80032ca:	bf00      	nop
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bc80      	pop	{r7}
 80032d0:	4770      	bx	lr
	...

080032d4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80032d8:	4802      	ldr	r0, [pc, #8]	; (80032e4 <DMA1_Channel4_IRQHandler+0x10>)
 80032da:	f000 fcb1 	bl	8003c40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80032de:	bf00      	nop
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	20000324 	.word	0x20000324

080032e8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80032ec:	4802      	ldr	r0, [pc, #8]	; (80032f8 <DMA1_Channel5_IRQHandler+0x10>)
 80032ee:	f000 fca7 	bl	8003c40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80032f2:	bf00      	nop
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	20000368 	.word	0x20000368

080032fc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003300:	4802      	ldr	r0, [pc, #8]	; (800330c <USART1_IRQHandler+0x10>)
 8003302:	f001 fe63 	bl	8004fcc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003306:	bf00      	nop
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	200003ac 	.word	0x200003ac

08003310 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003310:	b480      	push	{r7}
 8003312:	af00      	add	r7, sp, #0
	return 1;
 8003314:	2301      	movs	r3, #1
}
 8003316:	4618      	mov	r0, r3
 8003318:	46bd      	mov	sp, r7
 800331a:	bc80      	pop	{r7}
 800331c:	4770      	bx	lr

0800331e <_kill>:

int _kill(int pid, int sig)
{
 800331e:	b580      	push	{r7, lr}
 8003320:	b082      	sub	sp, #8
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
 8003326:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003328:	f002 f9fc 	bl	8005724 <__errno>
 800332c:	4603      	mov	r3, r0
 800332e:	2216      	movs	r2, #22
 8003330:	601a      	str	r2, [r3, #0]
	return -1;
 8003332:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003336:	4618      	mov	r0, r3
 8003338:	3708      	adds	r7, #8
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}

0800333e <_exit>:

void _exit (int status)
{
 800333e:	b580      	push	{r7, lr}
 8003340:	b082      	sub	sp, #8
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003346:	f04f 31ff 	mov.w	r1, #4294967295
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f7ff ffe7 	bl	800331e <_kill>
	while (1) {}		/* Make sure we hang here */
 8003350:	e7fe      	b.n	8003350 <_exit+0x12>

08003352 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003352:	b580      	push	{r7, lr}
 8003354:	b086      	sub	sp, #24
 8003356:	af00      	add	r7, sp, #0
 8003358:	60f8      	str	r0, [r7, #12]
 800335a:	60b9      	str	r1, [r7, #8]
 800335c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800335e:	2300      	movs	r3, #0
 8003360:	617b      	str	r3, [r7, #20]
 8003362:	e00a      	b.n	800337a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003364:	f3af 8000 	nop.w
 8003368:	4601      	mov	r1, r0
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	1c5a      	adds	r2, r3, #1
 800336e:	60ba      	str	r2, [r7, #8]
 8003370:	b2ca      	uxtb	r2, r1
 8003372:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	3301      	adds	r3, #1
 8003378:	617b      	str	r3, [r7, #20]
 800337a:	697a      	ldr	r2, [r7, #20]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	429a      	cmp	r2, r3
 8003380:	dbf0      	blt.n	8003364 <_read+0x12>
	}

return len;
 8003382:	687b      	ldr	r3, [r7, #4]
}
 8003384:	4618      	mov	r0, r3
 8003386:	3718      	adds	r7, #24
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}

0800338c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b086      	sub	sp, #24
 8003390:	af00      	add	r7, sp, #0
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	60b9      	str	r1, [r7, #8]
 8003396:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003398:	2300      	movs	r3, #0
 800339a:	617b      	str	r3, [r7, #20]
 800339c:	e009      	b.n	80033b2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	1c5a      	adds	r2, r3, #1
 80033a2:	60ba      	str	r2, [r7, #8]
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	3301      	adds	r3, #1
 80033b0:	617b      	str	r3, [r7, #20]
 80033b2:	697a      	ldr	r2, [r7, #20]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	dbf1      	blt.n	800339e <_write+0x12>
	}
	return len;
 80033ba:	687b      	ldr	r3, [r7, #4]
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3718      	adds	r7, #24
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <_close>:

int _close(int file)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
	return -1;
 80033cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bc80      	pop	{r7}
 80033d8:	4770      	bx	lr

080033da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80033da:	b480      	push	{r7}
 80033dc:	b083      	sub	sp, #12
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
 80033e2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80033ea:	605a      	str	r2, [r3, #4]
	return 0;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	370c      	adds	r7, #12
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bc80      	pop	{r7}
 80033f6:	4770      	bx	lr

080033f8 <_isatty>:

int _isatty(int file)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
	return 1;
 8003400:	2301      	movs	r3, #1
}
 8003402:	4618      	mov	r0, r3
 8003404:	370c      	adds	r7, #12
 8003406:	46bd      	mov	sp, r7
 8003408:	bc80      	pop	{r7}
 800340a:	4770      	bx	lr

0800340c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800340c:	b480      	push	{r7}
 800340e:	b085      	sub	sp, #20
 8003410:	af00      	add	r7, sp, #0
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	60b9      	str	r1, [r7, #8]
 8003416:	607a      	str	r2, [r7, #4]
	return 0;
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	3714      	adds	r7, #20
 800341e:	46bd      	mov	sp, r7
 8003420:	bc80      	pop	{r7}
 8003422:	4770      	bx	lr

08003424 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b086      	sub	sp, #24
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800342c:	4a14      	ldr	r2, [pc, #80]	; (8003480 <_sbrk+0x5c>)
 800342e:	4b15      	ldr	r3, [pc, #84]	; (8003484 <_sbrk+0x60>)
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003438:	4b13      	ldr	r3, [pc, #76]	; (8003488 <_sbrk+0x64>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d102      	bne.n	8003446 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003440:	4b11      	ldr	r3, [pc, #68]	; (8003488 <_sbrk+0x64>)
 8003442:	4a12      	ldr	r2, [pc, #72]	; (800348c <_sbrk+0x68>)
 8003444:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003446:	4b10      	ldr	r3, [pc, #64]	; (8003488 <_sbrk+0x64>)
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4413      	add	r3, r2
 800344e:	693a      	ldr	r2, [r7, #16]
 8003450:	429a      	cmp	r2, r3
 8003452:	d207      	bcs.n	8003464 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003454:	f002 f966 	bl	8005724 <__errno>
 8003458:	4603      	mov	r3, r0
 800345a:	220c      	movs	r2, #12
 800345c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800345e:	f04f 33ff 	mov.w	r3, #4294967295
 8003462:	e009      	b.n	8003478 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003464:	4b08      	ldr	r3, [pc, #32]	; (8003488 <_sbrk+0x64>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800346a:	4b07      	ldr	r3, [pc, #28]	; (8003488 <_sbrk+0x64>)
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4413      	add	r3, r2
 8003472:	4a05      	ldr	r2, [pc, #20]	; (8003488 <_sbrk+0x64>)
 8003474:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003476:	68fb      	ldr	r3, [r7, #12]
}
 8003478:	4618      	mov	r0, r3
 800347a:	3718      	adds	r7, #24
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}
 8003480:	20010000 	.word	0x20010000
 8003484:	00000400 	.word	0x00000400
 8003488:	20000314 	.word	0x20000314
 800348c:	20000938 	.word	0x20000938

08003490 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003490:	b480      	push	{r7}
 8003492:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003494:	bf00      	nop
 8003496:	46bd      	mov	sp, r7
 8003498:	bc80      	pop	{r7}
 800349a:	4770      	bx	lr

0800349c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800349c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800349e:	e003      	b.n	80034a8 <LoopCopyDataInit>

080034a0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80034a0:	4b0b      	ldr	r3, [pc, #44]	; (80034d0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80034a2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80034a4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80034a6:	3104      	adds	r1, #4

080034a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80034a8:	480a      	ldr	r0, [pc, #40]	; (80034d4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80034aa:	4b0b      	ldr	r3, [pc, #44]	; (80034d8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80034ac:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80034ae:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80034b0:	d3f6      	bcc.n	80034a0 <CopyDataInit>
  ldr r2, =_sbss
 80034b2:	4a0a      	ldr	r2, [pc, #40]	; (80034dc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80034b4:	e002      	b.n	80034bc <LoopFillZerobss>

080034b6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80034b6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80034b8:	f842 3b04 	str.w	r3, [r2], #4

080034bc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80034bc:	4b08      	ldr	r3, [pc, #32]	; (80034e0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80034be:	429a      	cmp	r2, r3
  bcc FillZerobss
 80034c0:	d3f9      	bcc.n	80034b6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80034c2:	f7ff ffe5 	bl	8003490 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80034c6:	f002 f933 	bl	8005730 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80034ca:	f7fd fe71 	bl	80011b0 <main>
  bx lr
 80034ce:	4770      	bx	lr
  ldr r3, =_sidata
 80034d0:	0800bb38 	.word	0x0800bb38
  ldr r0, =_sdata
 80034d4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80034d8:	20000200 	.word	0x20000200
  ldr r2, =_sbss
 80034dc:	20000200 	.word	0x20000200
  ldr r3, = _ebss
 80034e0:	20000934 	.word	0x20000934

080034e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80034e4:	e7fe      	b.n	80034e4 <ADC1_2_IRQHandler>
	...

080034e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80034ec:	4b08      	ldr	r3, [pc, #32]	; (8003510 <HAL_Init+0x28>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a07      	ldr	r2, [pc, #28]	; (8003510 <HAL_Init+0x28>)
 80034f2:	f043 0310 	orr.w	r3, r3, #16
 80034f6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034f8:	2003      	movs	r0, #3
 80034fa:	f000 f947 	bl	800378c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80034fe:	2001      	movs	r0, #1
 8003500:	f000 f808 	bl	8003514 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003504:	f7ff fdd0 	bl	80030a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	40022000 	.word	0x40022000

08003514 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800351c:	4b12      	ldr	r3, [pc, #72]	; (8003568 <HAL_InitTick+0x54>)
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	4b12      	ldr	r3, [pc, #72]	; (800356c <HAL_InitTick+0x58>)
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	4619      	mov	r1, r3
 8003526:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800352a:	fbb3 f3f1 	udiv	r3, r3, r1
 800352e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003532:	4618      	mov	r0, r3
 8003534:	f000 f95f 	bl	80037f6 <HAL_SYSTICK_Config>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d001      	beq.n	8003542 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e00e      	b.n	8003560 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2b0f      	cmp	r3, #15
 8003546:	d80a      	bhi.n	800355e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003548:	2200      	movs	r2, #0
 800354a:	6879      	ldr	r1, [r7, #4]
 800354c:	f04f 30ff 	mov.w	r0, #4294967295
 8003550:	f000 f927 	bl	80037a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003554:	4a06      	ldr	r2, [pc, #24]	; (8003570 <HAL_InitTick+0x5c>)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800355a:	2300      	movs	r3, #0
 800355c:	e000      	b.n	8003560 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
}
 8003560:	4618      	mov	r0, r3
 8003562:	3708      	adds	r7, #8
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	2000001c 	.word	0x2000001c
 800356c:	20000024 	.word	0x20000024
 8003570:	20000020 	.word	0x20000020

08003574 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003574:	b480      	push	{r7}
 8003576:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003578:	4b05      	ldr	r3, [pc, #20]	; (8003590 <HAL_IncTick+0x1c>)
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	461a      	mov	r2, r3
 800357e:	4b05      	ldr	r3, [pc, #20]	; (8003594 <HAL_IncTick+0x20>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4413      	add	r3, r2
 8003584:	4a03      	ldr	r2, [pc, #12]	; (8003594 <HAL_IncTick+0x20>)
 8003586:	6013      	str	r3, [r2, #0]
}
 8003588:	bf00      	nop
 800358a:	46bd      	mov	sp, r7
 800358c:	bc80      	pop	{r7}
 800358e:	4770      	bx	lr
 8003590:	20000024 	.word	0x20000024
 8003594:	20000920 	.word	0x20000920

08003598 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003598:	b480      	push	{r7}
 800359a:	af00      	add	r7, sp, #0
  return uwTick;
 800359c:	4b02      	ldr	r3, [pc, #8]	; (80035a8 <HAL_GetTick+0x10>)
 800359e:	681b      	ldr	r3, [r3, #0]
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bc80      	pop	{r7}
 80035a6:	4770      	bx	lr
 80035a8:	20000920 	.word	0x20000920

080035ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80035b4:	f7ff fff0 	bl	8003598 <HAL_GetTick>
 80035b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c4:	d005      	beq.n	80035d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80035c6:	4b0a      	ldr	r3, [pc, #40]	; (80035f0 <HAL_Delay+0x44>)
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	461a      	mov	r2, r3
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	4413      	add	r3, r2
 80035d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80035d2:	bf00      	nop
 80035d4:	f7ff ffe0 	bl	8003598 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d8f7      	bhi.n	80035d4 <HAL_Delay+0x28>
  {
  }
}
 80035e4:	bf00      	nop
 80035e6:	bf00      	nop
 80035e8:	3710      	adds	r7, #16
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	20000024 	.word	0x20000024

080035f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b085      	sub	sp, #20
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f003 0307 	and.w	r3, r3, #7
 8003602:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003604:	4b0c      	ldr	r3, [pc, #48]	; (8003638 <__NVIC_SetPriorityGrouping+0x44>)
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800360a:	68ba      	ldr	r2, [r7, #8]
 800360c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003610:	4013      	ands	r3, r2
 8003612:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800361c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003624:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003626:	4a04      	ldr	r2, [pc, #16]	; (8003638 <__NVIC_SetPriorityGrouping+0x44>)
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	60d3      	str	r3, [r2, #12]
}
 800362c:	bf00      	nop
 800362e:	3714      	adds	r7, #20
 8003630:	46bd      	mov	sp, r7
 8003632:	bc80      	pop	{r7}
 8003634:	4770      	bx	lr
 8003636:	bf00      	nop
 8003638:	e000ed00 	.word	0xe000ed00

0800363c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800363c:	b480      	push	{r7}
 800363e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003640:	4b04      	ldr	r3, [pc, #16]	; (8003654 <__NVIC_GetPriorityGrouping+0x18>)
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	0a1b      	lsrs	r3, r3, #8
 8003646:	f003 0307 	and.w	r3, r3, #7
}
 800364a:	4618      	mov	r0, r3
 800364c:	46bd      	mov	sp, r7
 800364e:	bc80      	pop	{r7}
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	e000ed00 	.word	0xe000ed00

08003658 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	4603      	mov	r3, r0
 8003660:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003666:	2b00      	cmp	r3, #0
 8003668:	db0b      	blt.n	8003682 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800366a:	79fb      	ldrb	r3, [r7, #7]
 800366c:	f003 021f 	and.w	r2, r3, #31
 8003670:	4906      	ldr	r1, [pc, #24]	; (800368c <__NVIC_EnableIRQ+0x34>)
 8003672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003676:	095b      	lsrs	r3, r3, #5
 8003678:	2001      	movs	r0, #1
 800367a:	fa00 f202 	lsl.w	r2, r0, r2
 800367e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003682:	bf00      	nop
 8003684:	370c      	adds	r7, #12
 8003686:	46bd      	mov	sp, r7
 8003688:	bc80      	pop	{r7}
 800368a:	4770      	bx	lr
 800368c:	e000e100 	.word	0xe000e100

08003690 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	4603      	mov	r3, r0
 8003698:	6039      	str	r1, [r7, #0]
 800369a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800369c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	db0a      	blt.n	80036ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	b2da      	uxtb	r2, r3
 80036a8:	490c      	ldr	r1, [pc, #48]	; (80036dc <__NVIC_SetPriority+0x4c>)
 80036aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ae:	0112      	lsls	r2, r2, #4
 80036b0:	b2d2      	uxtb	r2, r2
 80036b2:	440b      	add	r3, r1
 80036b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036b8:	e00a      	b.n	80036d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	b2da      	uxtb	r2, r3
 80036be:	4908      	ldr	r1, [pc, #32]	; (80036e0 <__NVIC_SetPriority+0x50>)
 80036c0:	79fb      	ldrb	r3, [r7, #7]
 80036c2:	f003 030f 	and.w	r3, r3, #15
 80036c6:	3b04      	subs	r3, #4
 80036c8:	0112      	lsls	r2, r2, #4
 80036ca:	b2d2      	uxtb	r2, r2
 80036cc:	440b      	add	r3, r1
 80036ce:	761a      	strb	r2, [r3, #24]
}
 80036d0:	bf00      	nop
 80036d2:	370c      	adds	r7, #12
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bc80      	pop	{r7}
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	e000e100 	.word	0xe000e100
 80036e0:	e000ed00 	.word	0xe000ed00

080036e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b089      	sub	sp, #36	; 0x24
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	60b9      	str	r1, [r7, #8]
 80036ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f003 0307 	and.w	r3, r3, #7
 80036f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	f1c3 0307 	rsb	r3, r3, #7
 80036fe:	2b04      	cmp	r3, #4
 8003700:	bf28      	it	cs
 8003702:	2304      	movcs	r3, #4
 8003704:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	3304      	adds	r3, #4
 800370a:	2b06      	cmp	r3, #6
 800370c:	d902      	bls.n	8003714 <NVIC_EncodePriority+0x30>
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	3b03      	subs	r3, #3
 8003712:	e000      	b.n	8003716 <NVIC_EncodePriority+0x32>
 8003714:	2300      	movs	r3, #0
 8003716:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003718:	f04f 32ff 	mov.w	r2, #4294967295
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	fa02 f303 	lsl.w	r3, r2, r3
 8003722:	43da      	mvns	r2, r3
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	401a      	ands	r2, r3
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800372c:	f04f 31ff 	mov.w	r1, #4294967295
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	fa01 f303 	lsl.w	r3, r1, r3
 8003736:	43d9      	mvns	r1, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800373c:	4313      	orrs	r3, r2
         );
}
 800373e:	4618      	mov	r0, r3
 8003740:	3724      	adds	r7, #36	; 0x24
 8003742:	46bd      	mov	sp, r7
 8003744:	bc80      	pop	{r7}
 8003746:	4770      	bx	lr

08003748 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	3b01      	subs	r3, #1
 8003754:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003758:	d301      	bcc.n	800375e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800375a:	2301      	movs	r3, #1
 800375c:	e00f      	b.n	800377e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800375e:	4a0a      	ldr	r2, [pc, #40]	; (8003788 <SysTick_Config+0x40>)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	3b01      	subs	r3, #1
 8003764:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003766:	210f      	movs	r1, #15
 8003768:	f04f 30ff 	mov.w	r0, #4294967295
 800376c:	f7ff ff90 	bl	8003690 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003770:	4b05      	ldr	r3, [pc, #20]	; (8003788 <SysTick_Config+0x40>)
 8003772:	2200      	movs	r2, #0
 8003774:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003776:	4b04      	ldr	r3, [pc, #16]	; (8003788 <SysTick_Config+0x40>)
 8003778:	2207      	movs	r2, #7
 800377a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3708      	adds	r7, #8
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	e000e010 	.word	0xe000e010

0800378c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f7ff ff2d 	bl	80035f4 <__NVIC_SetPriorityGrouping>
}
 800379a:	bf00      	nop
 800379c:	3708      	adds	r7, #8
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}

080037a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80037a2:	b580      	push	{r7, lr}
 80037a4:	b086      	sub	sp, #24
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	4603      	mov	r3, r0
 80037aa:	60b9      	str	r1, [r7, #8]
 80037ac:	607a      	str	r2, [r7, #4]
 80037ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80037b0:	2300      	movs	r3, #0
 80037b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80037b4:	f7ff ff42 	bl	800363c <__NVIC_GetPriorityGrouping>
 80037b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	68b9      	ldr	r1, [r7, #8]
 80037be:	6978      	ldr	r0, [r7, #20]
 80037c0:	f7ff ff90 	bl	80036e4 <NVIC_EncodePriority>
 80037c4:	4602      	mov	r2, r0
 80037c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037ca:	4611      	mov	r1, r2
 80037cc:	4618      	mov	r0, r3
 80037ce:	f7ff ff5f 	bl	8003690 <__NVIC_SetPriority>
}
 80037d2:	bf00      	nop
 80037d4:	3718      	adds	r7, #24
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}

080037da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037da:	b580      	push	{r7, lr}
 80037dc:	b082      	sub	sp, #8
 80037de:	af00      	add	r7, sp, #0
 80037e0:	4603      	mov	r3, r0
 80037e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037e8:	4618      	mov	r0, r3
 80037ea:	f7ff ff35 	bl	8003658 <__NVIC_EnableIRQ>
}
 80037ee:	bf00      	nop
 80037f0:	3708      	adds	r7, #8
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}

080037f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037f6:	b580      	push	{r7, lr}
 80037f8:	b082      	sub	sp, #8
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f7ff ffa2 	bl	8003748 <SysTick_Config>
 8003804:	4603      	mov	r3, r0
}
 8003806:	4618      	mov	r0, r3
 8003808:	3708      	adds	r7, #8
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
	...

08003810 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003810:	b480      	push	{r7}
 8003812:	b085      	sub	sp, #20
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003818:	2300      	movs	r3, #0
 800381a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d101      	bne.n	8003826 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e059      	b.n	80038da <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	461a      	mov	r2, r3
 800382c:	4b2d      	ldr	r3, [pc, #180]	; (80038e4 <HAL_DMA_Init+0xd4>)
 800382e:	429a      	cmp	r2, r3
 8003830:	d80f      	bhi.n	8003852 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	461a      	mov	r2, r3
 8003838:	4b2b      	ldr	r3, [pc, #172]	; (80038e8 <HAL_DMA_Init+0xd8>)
 800383a:	4413      	add	r3, r2
 800383c:	4a2b      	ldr	r2, [pc, #172]	; (80038ec <HAL_DMA_Init+0xdc>)
 800383e:	fba2 2303 	umull	r2, r3, r2, r3
 8003842:	091b      	lsrs	r3, r3, #4
 8003844:	009a      	lsls	r2, r3, #2
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a28      	ldr	r2, [pc, #160]	; (80038f0 <HAL_DMA_Init+0xe0>)
 800384e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003850:	e00e      	b.n	8003870 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	461a      	mov	r2, r3
 8003858:	4b26      	ldr	r3, [pc, #152]	; (80038f4 <HAL_DMA_Init+0xe4>)
 800385a:	4413      	add	r3, r2
 800385c:	4a23      	ldr	r2, [pc, #140]	; (80038ec <HAL_DMA_Init+0xdc>)
 800385e:	fba2 2303 	umull	r2, r3, r2, r3
 8003862:	091b      	lsrs	r3, r3, #4
 8003864:	009a      	lsls	r2, r3, #2
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a22      	ldr	r2, [pc, #136]	; (80038f8 <HAL_DMA_Init+0xe8>)
 800386e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2202      	movs	r2, #2
 8003874:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003886:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800388a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003894:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	695b      	ldr	r3, [r3, #20]
 80038a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	69db      	ldr	r3, [r3, #28]
 80038b2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80038b4:	68fa      	ldr	r2, [r7, #12]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	68fa      	ldr	r2, [r7, #12]
 80038c0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3714      	adds	r7, #20
 80038de:	46bd      	mov	sp, r7
 80038e0:	bc80      	pop	{r7}
 80038e2:	4770      	bx	lr
 80038e4:	40020407 	.word	0x40020407
 80038e8:	bffdfff8 	.word	0xbffdfff8
 80038ec:	cccccccd 	.word	0xcccccccd
 80038f0:	40020000 	.word	0x40020000
 80038f4:	bffdfbf8 	.word	0xbffdfbf8
 80038f8:	40020400 	.word	0x40020400

080038fc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b086      	sub	sp, #24
 8003900:	af00      	add	r7, sp, #0
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	607a      	str	r2, [r7, #4]
 8003908:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800390a:	2300      	movs	r3, #0
 800390c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003914:	2b01      	cmp	r3, #1
 8003916:	d101      	bne.n	800391c <HAL_DMA_Start_IT+0x20>
 8003918:	2302      	movs	r3, #2
 800391a:	e04a      	b.n	80039b2 <HAL_DMA_Start_IT+0xb6>
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800392a:	2b01      	cmp	r3, #1
 800392c:	d13a      	bne.n	80039a4 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2202      	movs	r2, #2
 8003932:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2200      	movs	r2, #0
 800393a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f022 0201 	bic.w	r2, r2, #1
 800394a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	68b9      	ldr	r1, [r7, #8]
 8003952:	68f8      	ldr	r0, [r7, #12]
 8003954:	f000 fbb0 	bl	80040b8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800395c:	2b00      	cmp	r3, #0
 800395e:	d008      	beq.n	8003972 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f042 020e 	orr.w	r2, r2, #14
 800396e:	601a      	str	r2, [r3, #0]
 8003970:	e00f      	b.n	8003992 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f022 0204 	bic.w	r2, r2, #4
 8003980:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f042 020a 	orr.w	r2, r2, #10
 8003990:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f042 0201 	orr.w	r2, r2, #1
 80039a0:	601a      	str	r2, [r3, #0]
 80039a2:	e005      	b.n	80039b0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80039ac:	2302      	movs	r3, #2
 80039ae:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80039b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3718      	adds	r7, #24
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}

080039ba <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80039ba:	b480      	push	{r7}
 80039bc:	b085      	sub	sp, #20
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039c2:	2300      	movs	r3, #0
 80039c4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d008      	beq.n	80039e2 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2204      	movs	r2, #4
 80039d4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e020      	b.n	8003a24 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f022 020e 	bic.w	r2, r2, #14
 80039f0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f022 0201 	bic.w	r2, r2, #1
 8003a00:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a0a:	2101      	movs	r1, #1
 8003a0c:	fa01 f202 	lsl.w	r2, r1, r2
 8003a10:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2201      	movs	r2, #1
 8003a16:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3714      	adds	r7, #20
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bc80      	pop	{r7}
 8003a2c:	4770      	bx	lr
	...

08003a30 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d005      	beq.n	8003a52 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2204      	movs	r2, #4
 8003a4a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	73fb      	strb	r3, [r7, #15]
 8003a50:	e0d6      	b.n	8003c00 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f022 020e 	bic.w	r2, r2, #14
 8003a60:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f022 0201 	bic.w	r2, r2, #1
 8003a70:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	461a      	mov	r2, r3
 8003a78:	4b64      	ldr	r3, [pc, #400]	; (8003c0c <HAL_DMA_Abort_IT+0x1dc>)
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d958      	bls.n	8003b30 <HAL_DMA_Abort_IT+0x100>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a63      	ldr	r2, [pc, #396]	; (8003c10 <HAL_DMA_Abort_IT+0x1e0>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d04f      	beq.n	8003b28 <HAL_DMA_Abort_IT+0xf8>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a61      	ldr	r2, [pc, #388]	; (8003c14 <HAL_DMA_Abort_IT+0x1e4>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d048      	beq.n	8003b24 <HAL_DMA_Abort_IT+0xf4>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a60      	ldr	r2, [pc, #384]	; (8003c18 <HAL_DMA_Abort_IT+0x1e8>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d040      	beq.n	8003b1e <HAL_DMA_Abort_IT+0xee>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a5e      	ldr	r2, [pc, #376]	; (8003c1c <HAL_DMA_Abort_IT+0x1ec>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d038      	beq.n	8003b18 <HAL_DMA_Abort_IT+0xe8>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a5d      	ldr	r2, [pc, #372]	; (8003c20 <HAL_DMA_Abort_IT+0x1f0>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d030      	beq.n	8003b12 <HAL_DMA_Abort_IT+0xe2>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a5b      	ldr	r2, [pc, #364]	; (8003c24 <HAL_DMA_Abort_IT+0x1f4>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d028      	beq.n	8003b0c <HAL_DMA_Abort_IT+0xdc>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a53      	ldr	r2, [pc, #332]	; (8003c0c <HAL_DMA_Abort_IT+0x1dc>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d020      	beq.n	8003b06 <HAL_DMA_Abort_IT+0xd6>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a57      	ldr	r2, [pc, #348]	; (8003c28 <HAL_DMA_Abort_IT+0x1f8>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d019      	beq.n	8003b02 <HAL_DMA_Abort_IT+0xd2>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a56      	ldr	r2, [pc, #344]	; (8003c2c <HAL_DMA_Abort_IT+0x1fc>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d012      	beq.n	8003afe <HAL_DMA_Abort_IT+0xce>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a54      	ldr	r2, [pc, #336]	; (8003c30 <HAL_DMA_Abort_IT+0x200>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d00a      	beq.n	8003af8 <HAL_DMA_Abort_IT+0xc8>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a53      	ldr	r2, [pc, #332]	; (8003c34 <HAL_DMA_Abort_IT+0x204>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d102      	bne.n	8003af2 <HAL_DMA_Abort_IT+0xc2>
 8003aec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003af0:	e01b      	b.n	8003b2a <HAL_DMA_Abort_IT+0xfa>
 8003af2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003af6:	e018      	b.n	8003b2a <HAL_DMA_Abort_IT+0xfa>
 8003af8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003afc:	e015      	b.n	8003b2a <HAL_DMA_Abort_IT+0xfa>
 8003afe:	2310      	movs	r3, #16
 8003b00:	e013      	b.n	8003b2a <HAL_DMA_Abort_IT+0xfa>
 8003b02:	2301      	movs	r3, #1
 8003b04:	e011      	b.n	8003b2a <HAL_DMA_Abort_IT+0xfa>
 8003b06:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b0a:	e00e      	b.n	8003b2a <HAL_DMA_Abort_IT+0xfa>
 8003b0c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003b10:	e00b      	b.n	8003b2a <HAL_DMA_Abort_IT+0xfa>
 8003b12:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b16:	e008      	b.n	8003b2a <HAL_DMA_Abort_IT+0xfa>
 8003b18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b1c:	e005      	b.n	8003b2a <HAL_DMA_Abort_IT+0xfa>
 8003b1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b22:	e002      	b.n	8003b2a <HAL_DMA_Abort_IT+0xfa>
 8003b24:	2310      	movs	r3, #16
 8003b26:	e000      	b.n	8003b2a <HAL_DMA_Abort_IT+0xfa>
 8003b28:	2301      	movs	r3, #1
 8003b2a:	4a43      	ldr	r2, [pc, #268]	; (8003c38 <HAL_DMA_Abort_IT+0x208>)
 8003b2c:	6053      	str	r3, [r2, #4]
 8003b2e:	e057      	b.n	8003be0 <HAL_DMA_Abort_IT+0x1b0>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a36      	ldr	r2, [pc, #216]	; (8003c10 <HAL_DMA_Abort_IT+0x1e0>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d04f      	beq.n	8003bda <HAL_DMA_Abort_IT+0x1aa>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a35      	ldr	r2, [pc, #212]	; (8003c14 <HAL_DMA_Abort_IT+0x1e4>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d048      	beq.n	8003bd6 <HAL_DMA_Abort_IT+0x1a6>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a33      	ldr	r2, [pc, #204]	; (8003c18 <HAL_DMA_Abort_IT+0x1e8>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d040      	beq.n	8003bd0 <HAL_DMA_Abort_IT+0x1a0>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a32      	ldr	r2, [pc, #200]	; (8003c1c <HAL_DMA_Abort_IT+0x1ec>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d038      	beq.n	8003bca <HAL_DMA_Abort_IT+0x19a>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a30      	ldr	r2, [pc, #192]	; (8003c20 <HAL_DMA_Abort_IT+0x1f0>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d030      	beq.n	8003bc4 <HAL_DMA_Abort_IT+0x194>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a2f      	ldr	r2, [pc, #188]	; (8003c24 <HAL_DMA_Abort_IT+0x1f4>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d028      	beq.n	8003bbe <HAL_DMA_Abort_IT+0x18e>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a26      	ldr	r2, [pc, #152]	; (8003c0c <HAL_DMA_Abort_IT+0x1dc>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d020      	beq.n	8003bb8 <HAL_DMA_Abort_IT+0x188>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a2b      	ldr	r2, [pc, #172]	; (8003c28 <HAL_DMA_Abort_IT+0x1f8>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d019      	beq.n	8003bb4 <HAL_DMA_Abort_IT+0x184>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a29      	ldr	r2, [pc, #164]	; (8003c2c <HAL_DMA_Abort_IT+0x1fc>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d012      	beq.n	8003bb0 <HAL_DMA_Abort_IT+0x180>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a28      	ldr	r2, [pc, #160]	; (8003c30 <HAL_DMA_Abort_IT+0x200>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d00a      	beq.n	8003baa <HAL_DMA_Abort_IT+0x17a>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a26      	ldr	r2, [pc, #152]	; (8003c34 <HAL_DMA_Abort_IT+0x204>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d102      	bne.n	8003ba4 <HAL_DMA_Abort_IT+0x174>
 8003b9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ba2:	e01b      	b.n	8003bdc <HAL_DMA_Abort_IT+0x1ac>
 8003ba4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ba8:	e018      	b.n	8003bdc <HAL_DMA_Abort_IT+0x1ac>
 8003baa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003bae:	e015      	b.n	8003bdc <HAL_DMA_Abort_IT+0x1ac>
 8003bb0:	2310      	movs	r3, #16
 8003bb2:	e013      	b.n	8003bdc <HAL_DMA_Abort_IT+0x1ac>
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e011      	b.n	8003bdc <HAL_DMA_Abort_IT+0x1ac>
 8003bb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003bbc:	e00e      	b.n	8003bdc <HAL_DMA_Abort_IT+0x1ac>
 8003bbe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003bc2:	e00b      	b.n	8003bdc <HAL_DMA_Abort_IT+0x1ac>
 8003bc4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003bc8:	e008      	b.n	8003bdc <HAL_DMA_Abort_IT+0x1ac>
 8003bca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003bce:	e005      	b.n	8003bdc <HAL_DMA_Abort_IT+0x1ac>
 8003bd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003bd4:	e002      	b.n	8003bdc <HAL_DMA_Abort_IT+0x1ac>
 8003bd6:	2310      	movs	r3, #16
 8003bd8:	e000      	b.n	8003bdc <HAL_DMA_Abort_IT+0x1ac>
 8003bda:	2301      	movs	r3, #1
 8003bdc:	4a17      	ldr	r2, [pc, #92]	; (8003c3c <HAL_DMA_Abort_IT+0x20c>)
 8003bde:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d003      	beq.n	8003c00 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	4798      	blx	r3
    } 
  }
  return status;
 8003c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3710      	adds	r7, #16
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	40020080 	.word	0x40020080
 8003c10:	40020008 	.word	0x40020008
 8003c14:	4002001c 	.word	0x4002001c
 8003c18:	40020030 	.word	0x40020030
 8003c1c:	40020044 	.word	0x40020044
 8003c20:	40020058 	.word	0x40020058
 8003c24:	4002006c 	.word	0x4002006c
 8003c28:	40020408 	.word	0x40020408
 8003c2c:	4002041c 	.word	0x4002041c
 8003c30:	40020430 	.word	0x40020430
 8003c34:	40020444 	.word	0x40020444
 8003c38:	40020400 	.word	0x40020400
 8003c3c:	40020000 	.word	0x40020000

08003c40 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5c:	2204      	movs	r2, #4
 8003c5e:	409a      	lsls	r2, r3
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	4013      	ands	r3, r2
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	f000 80d6 	beq.w	8003e16 <HAL_DMA_IRQHandler+0x1d6>
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	f003 0304 	and.w	r3, r3, #4
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	f000 80d0 	beq.w	8003e16 <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0320 	and.w	r3, r3, #32
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d107      	bne.n	8003c94 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f022 0204 	bic.w	r2, r2, #4
 8003c92:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	461a      	mov	r2, r3
 8003c9a:	4b9b      	ldr	r3, [pc, #620]	; (8003f08 <HAL_DMA_IRQHandler+0x2c8>)
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d958      	bls.n	8003d52 <HAL_DMA_IRQHandler+0x112>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a99      	ldr	r2, [pc, #612]	; (8003f0c <HAL_DMA_IRQHandler+0x2cc>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d04f      	beq.n	8003d4a <HAL_DMA_IRQHandler+0x10a>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a98      	ldr	r2, [pc, #608]	; (8003f10 <HAL_DMA_IRQHandler+0x2d0>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d048      	beq.n	8003d46 <HAL_DMA_IRQHandler+0x106>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a96      	ldr	r2, [pc, #600]	; (8003f14 <HAL_DMA_IRQHandler+0x2d4>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d040      	beq.n	8003d40 <HAL_DMA_IRQHandler+0x100>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a95      	ldr	r2, [pc, #596]	; (8003f18 <HAL_DMA_IRQHandler+0x2d8>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d038      	beq.n	8003d3a <HAL_DMA_IRQHandler+0xfa>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a93      	ldr	r2, [pc, #588]	; (8003f1c <HAL_DMA_IRQHandler+0x2dc>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d030      	beq.n	8003d34 <HAL_DMA_IRQHandler+0xf4>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a92      	ldr	r2, [pc, #584]	; (8003f20 <HAL_DMA_IRQHandler+0x2e0>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d028      	beq.n	8003d2e <HAL_DMA_IRQHandler+0xee>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a89      	ldr	r2, [pc, #548]	; (8003f08 <HAL_DMA_IRQHandler+0x2c8>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d020      	beq.n	8003d28 <HAL_DMA_IRQHandler+0xe8>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a8e      	ldr	r2, [pc, #568]	; (8003f24 <HAL_DMA_IRQHandler+0x2e4>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d019      	beq.n	8003d24 <HAL_DMA_IRQHandler+0xe4>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a8c      	ldr	r2, [pc, #560]	; (8003f28 <HAL_DMA_IRQHandler+0x2e8>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d012      	beq.n	8003d20 <HAL_DMA_IRQHandler+0xe0>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a8b      	ldr	r2, [pc, #556]	; (8003f2c <HAL_DMA_IRQHandler+0x2ec>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d00a      	beq.n	8003d1a <HAL_DMA_IRQHandler+0xda>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a89      	ldr	r2, [pc, #548]	; (8003f30 <HAL_DMA_IRQHandler+0x2f0>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d102      	bne.n	8003d14 <HAL_DMA_IRQHandler+0xd4>
 8003d0e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003d12:	e01b      	b.n	8003d4c <HAL_DMA_IRQHandler+0x10c>
 8003d14:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003d18:	e018      	b.n	8003d4c <HAL_DMA_IRQHandler+0x10c>
 8003d1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d1e:	e015      	b.n	8003d4c <HAL_DMA_IRQHandler+0x10c>
 8003d20:	2340      	movs	r3, #64	; 0x40
 8003d22:	e013      	b.n	8003d4c <HAL_DMA_IRQHandler+0x10c>
 8003d24:	2304      	movs	r3, #4
 8003d26:	e011      	b.n	8003d4c <HAL_DMA_IRQHandler+0x10c>
 8003d28:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003d2c:	e00e      	b.n	8003d4c <HAL_DMA_IRQHandler+0x10c>
 8003d2e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003d32:	e00b      	b.n	8003d4c <HAL_DMA_IRQHandler+0x10c>
 8003d34:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003d38:	e008      	b.n	8003d4c <HAL_DMA_IRQHandler+0x10c>
 8003d3a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003d3e:	e005      	b.n	8003d4c <HAL_DMA_IRQHandler+0x10c>
 8003d40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d44:	e002      	b.n	8003d4c <HAL_DMA_IRQHandler+0x10c>
 8003d46:	2340      	movs	r3, #64	; 0x40
 8003d48:	e000      	b.n	8003d4c <HAL_DMA_IRQHandler+0x10c>
 8003d4a:	2304      	movs	r3, #4
 8003d4c:	4a79      	ldr	r2, [pc, #484]	; (8003f34 <HAL_DMA_IRQHandler+0x2f4>)
 8003d4e:	6053      	str	r3, [r2, #4]
 8003d50:	e057      	b.n	8003e02 <HAL_DMA_IRQHandler+0x1c2>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a6d      	ldr	r2, [pc, #436]	; (8003f0c <HAL_DMA_IRQHandler+0x2cc>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d04f      	beq.n	8003dfc <HAL_DMA_IRQHandler+0x1bc>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a6b      	ldr	r2, [pc, #428]	; (8003f10 <HAL_DMA_IRQHandler+0x2d0>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d048      	beq.n	8003df8 <HAL_DMA_IRQHandler+0x1b8>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a6a      	ldr	r2, [pc, #424]	; (8003f14 <HAL_DMA_IRQHandler+0x2d4>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d040      	beq.n	8003df2 <HAL_DMA_IRQHandler+0x1b2>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a68      	ldr	r2, [pc, #416]	; (8003f18 <HAL_DMA_IRQHandler+0x2d8>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d038      	beq.n	8003dec <HAL_DMA_IRQHandler+0x1ac>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a67      	ldr	r2, [pc, #412]	; (8003f1c <HAL_DMA_IRQHandler+0x2dc>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d030      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x1a6>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a65      	ldr	r2, [pc, #404]	; (8003f20 <HAL_DMA_IRQHandler+0x2e0>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d028      	beq.n	8003de0 <HAL_DMA_IRQHandler+0x1a0>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a5d      	ldr	r2, [pc, #372]	; (8003f08 <HAL_DMA_IRQHandler+0x2c8>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d020      	beq.n	8003dda <HAL_DMA_IRQHandler+0x19a>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a61      	ldr	r2, [pc, #388]	; (8003f24 <HAL_DMA_IRQHandler+0x2e4>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d019      	beq.n	8003dd6 <HAL_DMA_IRQHandler+0x196>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a60      	ldr	r2, [pc, #384]	; (8003f28 <HAL_DMA_IRQHandler+0x2e8>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d012      	beq.n	8003dd2 <HAL_DMA_IRQHandler+0x192>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a5e      	ldr	r2, [pc, #376]	; (8003f2c <HAL_DMA_IRQHandler+0x2ec>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d00a      	beq.n	8003dcc <HAL_DMA_IRQHandler+0x18c>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a5d      	ldr	r2, [pc, #372]	; (8003f30 <HAL_DMA_IRQHandler+0x2f0>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d102      	bne.n	8003dc6 <HAL_DMA_IRQHandler+0x186>
 8003dc0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003dc4:	e01b      	b.n	8003dfe <HAL_DMA_IRQHandler+0x1be>
 8003dc6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003dca:	e018      	b.n	8003dfe <HAL_DMA_IRQHandler+0x1be>
 8003dcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003dd0:	e015      	b.n	8003dfe <HAL_DMA_IRQHandler+0x1be>
 8003dd2:	2340      	movs	r3, #64	; 0x40
 8003dd4:	e013      	b.n	8003dfe <HAL_DMA_IRQHandler+0x1be>
 8003dd6:	2304      	movs	r3, #4
 8003dd8:	e011      	b.n	8003dfe <HAL_DMA_IRQHandler+0x1be>
 8003dda:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003dde:	e00e      	b.n	8003dfe <HAL_DMA_IRQHandler+0x1be>
 8003de0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003de4:	e00b      	b.n	8003dfe <HAL_DMA_IRQHandler+0x1be>
 8003de6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003dea:	e008      	b.n	8003dfe <HAL_DMA_IRQHandler+0x1be>
 8003dec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003df0:	e005      	b.n	8003dfe <HAL_DMA_IRQHandler+0x1be>
 8003df2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003df6:	e002      	b.n	8003dfe <HAL_DMA_IRQHandler+0x1be>
 8003df8:	2340      	movs	r3, #64	; 0x40
 8003dfa:	e000      	b.n	8003dfe <HAL_DMA_IRQHandler+0x1be>
 8003dfc:	2304      	movs	r3, #4
 8003dfe:	4a4e      	ldr	r2, [pc, #312]	; (8003f38 <HAL_DMA_IRQHandler+0x2f8>)
 8003e00:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	f000 8136 	beq.w	8004078 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003e14:	e130      	b.n	8004078 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1a:	2202      	movs	r2, #2
 8003e1c:	409a      	lsls	r2, r3
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	4013      	ands	r3, r2
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	f000 80f8 	beq.w	8004018 <HAL_DMA_IRQHandler+0x3d8>
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	f003 0302 	and.w	r3, r3, #2
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	f000 80f2 	beq.w	8004018 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0320 	and.w	r3, r3, #32
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d10b      	bne.n	8003e5a <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f022 020a 	bic.w	r2, r2, #10
 8003e50:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2201      	movs	r2, #1
 8003e56:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	461a      	mov	r2, r3
 8003e60:	4b29      	ldr	r3, [pc, #164]	; (8003f08 <HAL_DMA_IRQHandler+0x2c8>)
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d973      	bls.n	8003f4e <HAL_DMA_IRQHandler+0x30e>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a28      	ldr	r2, [pc, #160]	; (8003f0c <HAL_DMA_IRQHandler+0x2cc>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d06a      	beq.n	8003f46 <HAL_DMA_IRQHandler+0x306>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a26      	ldr	r2, [pc, #152]	; (8003f10 <HAL_DMA_IRQHandler+0x2d0>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d063      	beq.n	8003f42 <HAL_DMA_IRQHandler+0x302>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a25      	ldr	r2, [pc, #148]	; (8003f14 <HAL_DMA_IRQHandler+0x2d4>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d05b      	beq.n	8003f3c <HAL_DMA_IRQHandler+0x2fc>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a23      	ldr	r2, [pc, #140]	; (8003f18 <HAL_DMA_IRQHandler+0x2d8>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d038      	beq.n	8003f00 <HAL_DMA_IRQHandler+0x2c0>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a22      	ldr	r2, [pc, #136]	; (8003f1c <HAL_DMA_IRQHandler+0x2dc>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d030      	beq.n	8003efa <HAL_DMA_IRQHandler+0x2ba>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a20      	ldr	r2, [pc, #128]	; (8003f20 <HAL_DMA_IRQHandler+0x2e0>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d028      	beq.n	8003ef4 <HAL_DMA_IRQHandler+0x2b4>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a18      	ldr	r2, [pc, #96]	; (8003f08 <HAL_DMA_IRQHandler+0x2c8>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d020      	beq.n	8003eee <HAL_DMA_IRQHandler+0x2ae>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a1c      	ldr	r2, [pc, #112]	; (8003f24 <HAL_DMA_IRQHandler+0x2e4>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d019      	beq.n	8003eea <HAL_DMA_IRQHandler+0x2aa>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a1b      	ldr	r2, [pc, #108]	; (8003f28 <HAL_DMA_IRQHandler+0x2e8>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d012      	beq.n	8003ee6 <HAL_DMA_IRQHandler+0x2a6>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a19      	ldr	r2, [pc, #100]	; (8003f2c <HAL_DMA_IRQHandler+0x2ec>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d00a      	beq.n	8003ee0 <HAL_DMA_IRQHandler+0x2a0>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a18      	ldr	r2, [pc, #96]	; (8003f30 <HAL_DMA_IRQHandler+0x2f0>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d102      	bne.n	8003eda <HAL_DMA_IRQHandler+0x29a>
 8003ed4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ed8:	e036      	b.n	8003f48 <HAL_DMA_IRQHandler+0x308>
 8003eda:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ede:	e033      	b.n	8003f48 <HAL_DMA_IRQHandler+0x308>
 8003ee0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ee4:	e030      	b.n	8003f48 <HAL_DMA_IRQHandler+0x308>
 8003ee6:	2320      	movs	r3, #32
 8003ee8:	e02e      	b.n	8003f48 <HAL_DMA_IRQHandler+0x308>
 8003eea:	2302      	movs	r3, #2
 8003eec:	e02c      	b.n	8003f48 <HAL_DMA_IRQHandler+0x308>
 8003eee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ef2:	e029      	b.n	8003f48 <HAL_DMA_IRQHandler+0x308>
 8003ef4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003ef8:	e026      	b.n	8003f48 <HAL_DMA_IRQHandler+0x308>
 8003efa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003efe:	e023      	b.n	8003f48 <HAL_DMA_IRQHandler+0x308>
 8003f00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f04:	e020      	b.n	8003f48 <HAL_DMA_IRQHandler+0x308>
 8003f06:	bf00      	nop
 8003f08:	40020080 	.word	0x40020080
 8003f0c:	40020008 	.word	0x40020008
 8003f10:	4002001c 	.word	0x4002001c
 8003f14:	40020030 	.word	0x40020030
 8003f18:	40020044 	.word	0x40020044
 8003f1c:	40020058 	.word	0x40020058
 8003f20:	4002006c 	.word	0x4002006c
 8003f24:	40020408 	.word	0x40020408
 8003f28:	4002041c 	.word	0x4002041c
 8003f2c:	40020430 	.word	0x40020430
 8003f30:	40020444 	.word	0x40020444
 8003f34:	40020400 	.word	0x40020400
 8003f38:	40020000 	.word	0x40020000
 8003f3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f40:	e002      	b.n	8003f48 <HAL_DMA_IRQHandler+0x308>
 8003f42:	2320      	movs	r3, #32
 8003f44:	e000      	b.n	8003f48 <HAL_DMA_IRQHandler+0x308>
 8003f46:	2302      	movs	r3, #2
 8003f48:	4a4e      	ldr	r2, [pc, #312]	; (8004084 <HAL_DMA_IRQHandler+0x444>)
 8003f4a:	6053      	str	r3, [r2, #4]
 8003f4c:	e057      	b.n	8003ffe <HAL_DMA_IRQHandler+0x3be>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a4d      	ldr	r2, [pc, #308]	; (8004088 <HAL_DMA_IRQHandler+0x448>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d04f      	beq.n	8003ff8 <HAL_DMA_IRQHandler+0x3b8>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a4b      	ldr	r2, [pc, #300]	; (800408c <HAL_DMA_IRQHandler+0x44c>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d048      	beq.n	8003ff4 <HAL_DMA_IRQHandler+0x3b4>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a4a      	ldr	r2, [pc, #296]	; (8004090 <HAL_DMA_IRQHandler+0x450>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d040      	beq.n	8003fee <HAL_DMA_IRQHandler+0x3ae>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a48      	ldr	r2, [pc, #288]	; (8004094 <HAL_DMA_IRQHandler+0x454>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d038      	beq.n	8003fe8 <HAL_DMA_IRQHandler+0x3a8>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a47      	ldr	r2, [pc, #284]	; (8004098 <HAL_DMA_IRQHandler+0x458>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d030      	beq.n	8003fe2 <HAL_DMA_IRQHandler+0x3a2>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a45      	ldr	r2, [pc, #276]	; (800409c <HAL_DMA_IRQHandler+0x45c>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d028      	beq.n	8003fdc <HAL_DMA_IRQHandler+0x39c>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a44      	ldr	r2, [pc, #272]	; (80040a0 <HAL_DMA_IRQHandler+0x460>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d020      	beq.n	8003fd6 <HAL_DMA_IRQHandler+0x396>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a42      	ldr	r2, [pc, #264]	; (80040a4 <HAL_DMA_IRQHandler+0x464>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d019      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0x392>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a41      	ldr	r2, [pc, #260]	; (80040a8 <HAL_DMA_IRQHandler+0x468>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d012      	beq.n	8003fce <HAL_DMA_IRQHandler+0x38e>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a3f      	ldr	r2, [pc, #252]	; (80040ac <HAL_DMA_IRQHandler+0x46c>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d00a      	beq.n	8003fc8 <HAL_DMA_IRQHandler+0x388>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a3e      	ldr	r2, [pc, #248]	; (80040b0 <HAL_DMA_IRQHandler+0x470>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d102      	bne.n	8003fc2 <HAL_DMA_IRQHandler+0x382>
 8003fbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003fc0:	e01b      	b.n	8003ffa <HAL_DMA_IRQHandler+0x3ba>
 8003fc2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003fc6:	e018      	b.n	8003ffa <HAL_DMA_IRQHandler+0x3ba>
 8003fc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003fcc:	e015      	b.n	8003ffa <HAL_DMA_IRQHandler+0x3ba>
 8003fce:	2320      	movs	r3, #32
 8003fd0:	e013      	b.n	8003ffa <HAL_DMA_IRQHandler+0x3ba>
 8003fd2:	2302      	movs	r3, #2
 8003fd4:	e011      	b.n	8003ffa <HAL_DMA_IRQHandler+0x3ba>
 8003fd6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003fda:	e00e      	b.n	8003ffa <HAL_DMA_IRQHandler+0x3ba>
 8003fdc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003fe0:	e00b      	b.n	8003ffa <HAL_DMA_IRQHandler+0x3ba>
 8003fe2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003fe6:	e008      	b.n	8003ffa <HAL_DMA_IRQHandler+0x3ba>
 8003fe8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003fec:	e005      	b.n	8003ffa <HAL_DMA_IRQHandler+0x3ba>
 8003fee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ff2:	e002      	b.n	8003ffa <HAL_DMA_IRQHandler+0x3ba>
 8003ff4:	2320      	movs	r3, #32
 8003ff6:	e000      	b.n	8003ffa <HAL_DMA_IRQHandler+0x3ba>
 8003ff8:	2302      	movs	r3, #2
 8003ffa:	4a2e      	ldr	r2, [pc, #184]	; (80040b4 <HAL_DMA_IRQHandler+0x474>)
 8003ffc:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800400a:	2b00      	cmp	r3, #0
 800400c:	d034      	beq.n	8004078 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004016:	e02f      	b.n	8004078 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401c:	2208      	movs	r2, #8
 800401e:	409a      	lsls	r2, r3
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	4013      	ands	r3, r2
 8004024:	2b00      	cmp	r3, #0
 8004026:	d028      	beq.n	800407a <HAL_DMA_IRQHandler+0x43a>
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	f003 0308 	and.w	r3, r3, #8
 800402e:	2b00      	cmp	r3, #0
 8004030:	d023      	beq.n	800407a <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f022 020e 	bic.w	r2, r2, #14
 8004040:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800404a:	2101      	movs	r1, #1
 800404c:	fa01 f202 	lsl.w	r2, r1, r2
 8004050:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2201      	movs	r2, #1
 8004056:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800406c:	2b00      	cmp	r3, #0
 800406e:	d004      	beq.n	800407a <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	4798      	blx	r3
    }
  }
  return;
 8004078:	bf00      	nop
 800407a:	bf00      	nop
}
 800407c:	3710      	adds	r7, #16
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	40020400 	.word	0x40020400
 8004088:	40020008 	.word	0x40020008
 800408c:	4002001c 	.word	0x4002001c
 8004090:	40020030 	.word	0x40020030
 8004094:	40020044 	.word	0x40020044
 8004098:	40020058 	.word	0x40020058
 800409c:	4002006c 	.word	0x4002006c
 80040a0:	40020080 	.word	0x40020080
 80040a4:	40020408 	.word	0x40020408
 80040a8:	4002041c 	.word	0x4002041c
 80040ac:	40020430 	.word	0x40020430
 80040b0:	40020444 	.word	0x40020444
 80040b4:	40020000 	.word	0x40020000

080040b8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b085      	sub	sp, #20
 80040bc:	af00      	add	r7, sp, #0
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	60b9      	str	r1, [r7, #8]
 80040c2:	607a      	str	r2, [r7, #4]
 80040c4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ce:	2101      	movs	r1, #1
 80040d0:	fa01 f202 	lsl.w	r2, r1, r2
 80040d4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	683a      	ldr	r2, [r7, #0]
 80040dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	2b10      	cmp	r3, #16
 80040e4:	d108      	bne.n	80040f8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	68ba      	ldr	r2, [r7, #8]
 80040f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80040f6:	e007      	b.n	8004108 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	68ba      	ldr	r2, [r7, #8]
 80040fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	60da      	str	r2, [r3, #12]
}
 8004108:	bf00      	nop
 800410a:	3714      	adds	r7, #20
 800410c:	46bd      	mov	sp, r7
 800410e:	bc80      	pop	{r7}
 8004110:	4770      	bx	lr
	...

08004114 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004114:	b480      	push	{r7}
 8004116:	b08b      	sub	sp, #44	; 0x2c
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800411e:	2300      	movs	r3, #0
 8004120:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004122:	2300      	movs	r3, #0
 8004124:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004126:	e179      	b.n	800441c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004128:	2201      	movs	r2, #1
 800412a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412c:	fa02 f303 	lsl.w	r3, r2, r3
 8004130:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	69fa      	ldr	r2, [r7, #28]
 8004138:	4013      	ands	r3, r2
 800413a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800413c:	69ba      	ldr	r2, [r7, #24]
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	429a      	cmp	r2, r3
 8004142:	f040 8168 	bne.w	8004416 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	4aa0      	ldr	r2, [pc, #640]	; (80043cc <HAL_GPIO_Init+0x2b8>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d05e      	beq.n	800420e <HAL_GPIO_Init+0xfa>
 8004150:	4a9e      	ldr	r2, [pc, #632]	; (80043cc <HAL_GPIO_Init+0x2b8>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d875      	bhi.n	8004242 <HAL_GPIO_Init+0x12e>
 8004156:	4a9e      	ldr	r2, [pc, #632]	; (80043d0 <HAL_GPIO_Init+0x2bc>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d058      	beq.n	800420e <HAL_GPIO_Init+0xfa>
 800415c:	4a9c      	ldr	r2, [pc, #624]	; (80043d0 <HAL_GPIO_Init+0x2bc>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d86f      	bhi.n	8004242 <HAL_GPIO_Init+0x12e>
 8004162:	4a9c      	ldr	r2, [pc, #624]	; (80043d4 <HAL_GPIO_Init+0x2c0>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d052      	beq.n	800420e <HAL_GPIO_Init+0xfa>
 8004168:	4a9a      	ldr	r2, [pc, #616]	; (80043d4 <HAL_GPIO_Init+0x2c0>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d869      	bhi.n	8004242 <HAL_GPIO_Init+0x12e>
 800416e:	4a9a      	ldr	r2, [pc, #616]	; (80043d8 <HAL_GPIO_Init+0x2c4>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d04c      	beq.n	800420e <HAL_GPIO_Init+0xfa>
 8004174:	4a98      	ldr	r2, [pc, #608]	; (80043d8 <HAL_GPIO_Init+0x2c4>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d863      	bhi.n	8004242 <HAL_GPIO_Init+0x12e>
 800417a:	4a98      	ldr	r2, [pc, #608]	; (80043dc <HAL_GPIO_Init+0x2c8>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d046      	beq.n	800420e <HAL_GPIO_Init+0xfa>
 8004180:	4a96      	ldr	r2, [pc, #600]	; (80043dc <HAL_GPIO_Init+0x2c8>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d85d      	bhi.n	8004242 <HAL_GPIO_Init+0x12e>
 8004186:	2b12      	cmp	r3, #18
 8004188:	d82a      	bhi.n	80041e0 <HAL_GPIO_Init+0xcc>
 800418a:	2b12      	cmp	r3, #18
 800418c:	d859      	bhi.n	8004242 <HAL_GPIO_Init+0x12e>
 800418e:	a201      	add	r2, pc, #4	; (adr r2, 8004194 <HAL_GPIO_Init+0x80>)
 8004190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004194:	0800420f 	.word	0x0800420f
 8004198:	080041e9 	.word	0x080041e9
 800419c:	080041fb 	.word	0x080041fb
 80041a0:	0800423d 	.word	0x0800423d
 80041a4:	08004243 	.word	0x08004243
 80041a8:	08004243 	.word	0x08004243
 80041ac:	08004243 	.word	0x08004243
 80041b0:	08004243 	.word	0x08004243
 80041b4:	08004243 	.word	0x08004243
 80041b8:	08004243 	.word	0x08004243
 80041bc:	08004243 	.word	0x08004243
 80041c0:	08004243 	.word	0x08004243
 80041c4:	08004243 	.word	0x08004243
 80041c8:	08004243 	.word	0x08004243
 80041cc:	08004243 	.word	0x08004243
 80041d0:	08004243 	.word	0x08004243
 80041d4:	08004243 	.word	0x08004243
 80041d8:	080041f1 	.word	0x080041f1
 80041dc:	08004205 	.word	0x08004205
 80041e0:	4a7f      	ldr	r2, [pc, #508]	; (80043e0 <HAL_GPIO_Init+0x2cc>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d013      	beq.n	800420e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80041e6:	e02c      	b.n	8004242 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	623b      	str	r3, [r7, #32]
          break;
 80041ee:	e029      	b.n	8004244 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	3304      	adds	r3, #4
 80041f6:	623b      	str	r3, [r7, #32]
          break;
 80041f8:	e024      	b.n	8004244 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	3308      	adds	r3, #8
 8004200:	623b      	str	r3, [r7, #32]
          break;
 8004202:	e01f      	b.n	8004244 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	330c      	adds	r3, #12
 800420a:	623b      	str	r3, [r7, #32]
          break;
 800420c:	e01a      	b.n	8004244 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d102      	bne.n	800421c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004216:	2304      	movs	r3, #4
 8004218:	623b      	str	r3, [r7, #32]
          break;
 800421a:	e013      	b.n	8004244 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	2b01      	cmp	r3, #1
 8004222:	d105      	bne.n	8004230 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004224:	2308      	movs	r3, #8
 8004226:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	69fa      	ldr	r2, [r7, #28]
 800422c:	611a      	str	r2, [r3, #16]
          break;
 800422e:	e009      	b.n	8004244 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004230:	2308      	movs	r3, #8
 8004232:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	69fa      	ldr	r2, [r7, #28]
 8004238:	615a      	str	r2, [r3, #20]
          break;
 800423a:	e003      	b.n	8004244 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800423c:	2300      	movs	r3, #0
 800423e:	623b      	str	r3, [r7, #32]
          break;
 8004240:	e000      	b.n	8004244 <HAL_GPIO_Init+0x130>
          break;
 8004242:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004244:	69bb      	ldr	r3, [r7, #24]
 8004246:	2bff      	cmp	r3, #255	; 0xff
 8004248:	d801      	bhi.n	800424e <HAL_GPIO_Init+0x13a>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	e001      	b.n	8004252 <HAL_GPIO_Init+0x13e>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	3304      	adds	r3, #4
 8004252:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	2bff      	cmp	r3, #255	; 0xff
 8004258:	d802      	bhi.n	8004260 <HAL_GPIO_Init+0x14c>
 800425a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	e002      	b.n	8004266 <HAL_GPIO_Init+0x152>
 8004260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004262:	3b08      	subs	r3, #8
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	210f      	movs	r1, #15
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	fa01 f303 	lsl.w	r3, r1, r3
 8004274:	43db      	mvns	r3, r3
 8004276:	401a      	ands	r2, r3
 8004278:	6a39      	ldr	r1, [r7, #32]
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	fa01 f303 	lsl.w	r3, r1, r3
 8004280:	431a      	orrs	r2, r3
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800428e:	2b00      	cmp	r3, #0
 8004290:	f000 80c1 	beq.w	8004416 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004294:	4b53      	ldr	r3, [pc, #332]	; (80043e4 <HAL_GPIO_Init+0x2d0>)
 8004296:	699b      	ldr	r3, [r3, #24]
 8004298:	4a52      	ldr	r2, [pc, #328]	; (80043e4 <HAL_GPIO_Init+0x2d0>)
 800429a:	f043 0301 	orr.w	r3, r3, #1
 800429e:	6193      	str	r3, [r2, #24]
 80042a0:	4b50      	ldr	r3, [pc, #320]	; (80043e4 <HAL_GPIO_Init+0x2d0>)
 80042a2:	699b      	ldr	r3, [r3, #24]
 80042a4:	f003 0301 	and.w	r3, r3, #1
 80042a8:	60bb      	str	r3, [r7, #8]
 80042aa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80042ac:	4a4e      	ldr	r2, [pc, #312]	; (80043e8 <HAL_GPIO_Init+0x2d4>)
 80042ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b0:	089b      	lsrs	r3, r3, #2
 80042b2:	3302      	adds	r3, #2
 80042b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042b8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80042ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042bc:	f003 0303 	and.w	r3, r3, #3
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	220f      	movs	r2, #15
 80042c4:	fa02 f303 	lsl.w	r3, r2, r3
 80042c8:	43db      	mvns	r3, r3
 80042ca:	68fa      	ldr	r2, [r7, #12]
 80042cc:	4013      	ands	r3, r2
 80042ce:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a46      	ldr	r2, [pc, #280]	; (80043ec <HAL_GPIO_Init+0x2d8>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d01f      	beq.n	8004318 <HAL_GPIO_Init+0x204>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a45      	ldr	r2, [pc, #276]	; (80043f0 <HAL_GPIO_Init+0x2dc>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d019      	beq.n	8004314 <HAL_GPIO_Init+0x200>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	4a44      	ldr	r2, [pc, #272]	; (80043f4 <HAL_GPIO_Init+0x2e0>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d013      	beq.n	8004310 <HAL_GPIO_Init+0x1fc>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	4a43      	ldr	r2, [pc, #268]	; (80043f8 <HAL_GPIO_Init+0x2e4>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d00d      	beq.n	800430c <HAL_GPIO_Init+0x1f8>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	4a42      	ldr	r2, [pc, #264]	; (80043fc <HAL_GPIO_Init+0x2e8>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d007      	beq.n	8004308 <HAL_GPIO_Init+0x1f4>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	4a41      	ldr	r2, [pc, #260]	; (8004400 <HAL_GPIO_Init+0x2ec>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d101      	bne.n	8004304 <HAL_GPIO_Init+0x1f0>
 8004300:	2305      	movs	r3, #5
 8004302:	e00a      	b.n	800431a <HAL_GPIO_Init+0x206>
 8004304:	2306      	movs	r3, #6
 8004306:	e008      	b.n	800431a <HAL_GPIO_Init+0x206>
 8004308:	2304      	movs	r3, #4
 800430a:	e006      	b.n	800431a <HAL_GPIO_Init+0x206>
 800430c:	2303      	movs	r3, #3
 800430e:	e004      	b.n	800431a <HAL_GPIO_Init+0x206>
 8004310:	2302      	movs	r3, #2
 8004312:	e002      	b.n	800431a <HAL_GPIO_Init+0x206>
 8004314:	2301      	movs	r3, #1
 8004316:	e000      	b.n	800431a <HAL_GPIO_Init+0x206>
 8004318:	2300      	movs	r3, #0
 800431a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800431c:	f002 0203 	and.w	r2, r2, #3
 8004320:	0092      	lsls	r2, r2, #2
 8004322:	4093      	lsls	r3, r2
 8004324:	68fa      	ldr	r2, [r7, #12]
 8004326:	4313      	orrs	r3, r2
 8004328:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800432a:	492f      	ldr	r1, [pc, #188]	; (80043e8 <HAL_GPIO_Init+0x2d4>)
 800432c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432e:	089b      	lsrs	r3, r3, #2
 8004330:	3302      	adds	r3, #2
 8004332:	68fa      	ldr	r2, [r7, #12]
 8004334:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004340:	2b00      	cmp	r3, #0
 8004342:	d006      	beq.n	8004352 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004344:	4b2f      	ldr	r3, [pc, #188]	; (8004404 <HAL_GPIO_Init+0x2f0>)
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	492e      	ldr	r1, [pc, #184]	; (8004404 <HAL_GPIO_Init+0x2f0>)
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	4313      	orrs	r3, r2
 800434e:	600b      	str	r3, [r1, #0]
 8004350:	e006      	b.n	8004360 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004352:	4b2c      	ldr	r3, [pc, #176]	; (8004404 <HAL_GPIO_Init+0x2f0>)
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	43db      	mvns	r3, r3
 800435a:	492a      	ldr	r1, [pc, #168]	; (8004404 <HAL_GPIO_Init+0x2f0>)
 800435c:	4013      	ands	r3, r2
 800435e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d006      	beq.n	800437a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800436c:	4b25      	ldr	r3, [pc, #148]	; (8004404 <HAL_GPIO_Init+0x2f0>)
 800436e:	685a      	ldr	r2, [r3, #4]
 8004370:	4924      	ldr	r1, [pc, #144]	; (8004404 <HAL_GPIO_Init+0x2f0>)
 8004372:	69bb      	ldr	r3, [r7, #24]
 8004374:	4313      	orrs	r3, r2
 8004376:	604b      	str	r3, [r1, #4]
 8004378:	e006      	b.n	8004388 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800437a:	4b22      	ldr	r3, [pc, #136]	; (8004404 <HAL_GPIO_Init+0x2f0>)
 800437c:	685a      	ldr	r2, [r3, #4]
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	43db      	mvns	r3, r3
 8004382:	4920      	ldr	r1, [pc, #128]	; (8004404 <HAL_GPIO_Init+0x2f0>)
 8004384:	4013      	ands	r3, r2
 8004386:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004390:	2b00      	cmp	r3, #0
 8004392:	d006      	beq.n	80043a2 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004394:	4b1b      	ldr	r3, [pc, #108]	; (8004404 <HAL_GPIO_Init+0x2f0>)
 8004396:	689a      	ldr	r2, [r3, #8]
 8004398:	491a      	ldr	r1, [pc, #104]	; (8004404 <HAL_GPIO_Init+0x2f0>)
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	4313      	orrs	r3, r2
 800439e:	608b      	str	r3, [r1, #8]
 80043a0:	e006      	b.n	80043b0 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80043a2:	4b18      	ldr	r3, [pc, #96]	; (8004404 <HAL_GPIO_Init+0x2f0>)
 80043a4:	689a      	ldr	r2, [r3, #8]
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	43db      	mvns	r3, r3
 80043aa:	4916      	ldr	r1, [pc, #88]	; (8004404 <HAL_GPIO_Init+0x2f0>)
 80043ac:	4013      	ands	r3, r2
 80043ae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d025      	beq.n	8004408 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80043bc:	4b11      	ldr	r3, [pc, #68]	; (8004404 <HAL_GPIO_Init+0x2f0>)
 80043be:	68da      	ldr	r2, [r3, #12]
 80043c0:	4910      	ldr	r1, [pc, #64]	; (8004404 <HAL_GPIO_Init+0x2f0>)
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	60cb      	str	r3, [r1, #12]
 80043c8:	e025      	b.n	8004416 <HAL_GPIO_Init+0x302>
 80043ca:	bf00      	nop
 80043cc:	10320000 	.word	0x10320000
 80043d0:	10310000 	.word	0x10310000
 80043d4:	10220000 	.word	0x10220000
 80043d8:	10210000 	.word	0x10210000
 80043dc:	10120000 	.word	0x10120000
 80043e0:	10110000 	.word	0x10110000
 80043e4:	40021000 	.word	0x40021000
 80043e8:	40010000 	.word	0x40010000
 80043ec:	40010800 	.word	0x40010800
 80043f0:	40010c00 	.word	0x40010c00
 80043f4:	40011000 	.word	0x40011000
 80043f8:	40011400 	.word	0x40011400
 80043fc:	40011800 	.word	0x40011800
 8004400:	40011c00 	.word	0x40011c00
 8004404:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004408:	4b0b      	ldr	r3, [pc, #44]	; (8004438 <HAL_GPIO_Init+0x324>)
 800440a:	68da      	ldr	r2, [r3, #12]
 800440c:	69bb      	ldr	r3, [r7, #24]
 800440e:	43db      	mvns	r3, r3
 8004410:	4909      	ldr	r1, [pc, #36]	; (8004438 <HAL_GPIO_Init+0x324>)
 8004412:	4013      	ands	r3, r2
 8004414:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004418:	3301      	adds	r3, #1
 800441a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004422:	fa22 f303 	lsr.w	r3, r2, r3
 8004426:	2b00      	cmp	r3, #0
 8004428:	f47f ae7e 	bne.w	8004128 <HAL_GPIO_Init+0x14>
  }
}
 800442c:	bf00      	nop
 800442e:	bf00      	nop
 8004430:	372c      	adds	r7, #44	; 0x2c
 8004432:	46bd      	mov	sp, r7
 8004434:	bc80      	pop	{r7}
 8004436:	4770      	bx	lr
 8004438:	40010400 	.word	0x40010400

0800443c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	460b      	mov	r3, r1
 8004446:	807b      	strh	r3, [r7, #2]
 8004448:	4613      	mov	r3, r2
 800444a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800444c:	787b      	ldrb	r3, [r7, #1]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d003      	beq.n	800445a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004452:	887a      	ldrh	r2, [r7, #2]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004458:	e003      	b.n	8004462 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800445a:	887b      	ldrh	r3, [r7, #2]
 800445c:	041a      	lsls	r2, r3, #16
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	611a      	str	r2, [r3, #16]
}
 8004462:	bf00      	nop
 8004464:	370c      	adds	r7, #12
 8004466:	46bd      	mov	sp, r7
 8004468:	bc80      	pop	{r7}
 800446a:	4770      	bx	lr

0800446c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b086      	sub	sp, #24
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d101      	bne.n	800447e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e26c      	b.n	8004958 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0301 	and.w	r3, r3, #1
 8004486:	2b00      	cmp	r3, #0
 8004488:	f000 8087 	beq.w	800459a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800448c:	4b92      	ldr	r3, [pc, #584]	; (80046d8 <HAL_RCC_OscConfig+0x26c>)
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	f003 030c 	and.w	r3, r3, #12
 8004494:	2b04      	cmp	r3, #4
 8004496:	d00c      	beq.n	80044b2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004498:	4b8f      	ldr	r3, [pc, #572]	; (80046d8 <HAL_RCC_OscConfig+0x26c>)
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f003 030c 	and.w	r3, r3, #12
 80044a0:	2b08      	cmp	r3, #8
 80044a2:	d112      	bne.n	80044ca <HAL_RCC_OscConfig+0x5e>
 80044a4:	4b8c      	ldr	r3, [pc, #560]	; (80046d8 <HAL_RCC_OscConfig+0x26c>)
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044b0:	d10b      	bne.n	80044ca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044b2:	4b89      	ldr	r3, [pc, #548]	; (80046d8 <HAL_RCC_OscConfig+0x26c>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d06c      	beq.n	8004598 <HAL_RCC_OscConfig+0x12c>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d168      	bne.n	8004598 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e246      	b.n	8004958 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044d2:	d106      	bne.n	80044e2 <HAL_RCC_OscConfig+0x76>
 80044d4:	4b80      	ldr	r3, [pc, #512]	; (80046d8 <HAL_RCC_OscConfig+0x26c>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a7f      	ldr	r2, [pc, #508]	; (80046d8 <HAL_RCC_OscConfig+0x26c>)
 80044da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044de:	6013      	str	r3, [r2, #0]
 80044e0:	e02e      	b.n	8004540 <HAL_RCC_OscConfig+0xd4>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d10c      	bne.n	8004504 <HAL_RCC_OscConfig+0x98>
 80044ea:	4b7b      	ldr	r3, [pc, #492]	; (80046d8 <HAL_RCC_OscConfig+0x26c>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a7a      	ldr	r2, [pc, #488]	; (80046d8 <HAL_RCC_OscConfig+0x26c>)
 80044f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044f4:	6013      	str	r3, [r2, #0]
 80044f6:	4b78      	ldr	r3, [pc, #480]	; (80046d8 <HAL_RCC_OscConfig+0x26c>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a77      	ldr	r2, [pc, #476]	; (80046d8 <HAL_RCC_OscConfig+0x26c>)
 80044fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004500:	6013      	str	r3, [r2, #0]
 8004502:	e01d      	b.n	8004540 <HAL_RCC_OscConfig+0xd4>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800450c:	d10c      	bne.n	8004528 <HAL_RCC_OscConfig+0xbc>
 800450e:	4b72      	ldr	r3, [pc, #456]	; (80046d8 <HAL_RCC_OscConfig+0x26c>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a71      	ldr	r2, [pc, #452]	; (80046d8 <HAL_RCC_OscConfig+0x26c>)
 8004514:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004518:	6013      	str	r3, [r2, #0]
 800451a:	4b6f      	ldr	r3, [pc, #444]	; (80046d8 <HAL_RCC_OscConfig+0x26c>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a6e      	ldr	r2, [pc, #440]	; (80046d8 <HAL_RCC_OscConfig+0x26c>)
 8004520:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004524:	6013      	str	r3, [r2, #0]
 8004526:	e00b      	b.n	8004540 <HAL_RCC_OscConfig+0xd4>
 8004528:	4b6b      	ldr	r3, [pc, #428]	; (80046d8 <HAL_RCC_OscConfig+0x26c>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a6a      	ldr	r2, [pc, #424]	; (80046d8 <HAL_RCC_OscConfig+0x26c>)
 800452e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004532:	6013      	str	r3, [r2, #0]
 8004534:	4b68      	ldr	r3, [pc, #416]	; (80046d8 <HAL_RCC_OscConfig+0x26c>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a67      	ldr	r2, [pc, #412]	; (80046d8 <HAL_RCC_OscConfig+0x26c>)
 800453a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800453e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d013      	beq.n	8004570 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004548:	f7ff f826 	bl	8003598 <HAL_GetTick>
 800454c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800454e:	e008      	b.n	8004562 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004550:	f7ff f822 	bl	8003598 <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	2b64      	cmp	r3, #100	; 0x64
 800455c:	d901      	bls.n	8004562 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e1fa      	b.n	8004958 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004562:	4b5d      	ldr	r3, [pc, #372]	; (80046d8 <HAL_RCC_OscConfig+0x26c>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d0f0      	beq.n	8004550 <HAL_RCC_OscConfig+0xe4>
 800456e:	e014      	b.n	800459a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004570:	f7ff f812 	bl	8003598 <HAL_GetTick>
 8004574:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004576:	e008      	b.n	800458a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004578:	f7ff f80e 	bl	8003598 <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	2b64      	cmp	r3, #100	; 0x64
 8004584:	d901      	bls.n	800458a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	e1e6      	b.n	8004958 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800458a:	4b53      	ldr	r3, [pc, #332]	; (80046d8 <HAL_RCC_OscConfig+0x26c>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d1f0      	bne.n	8004578 <HAL_RCC_OscConfig+0x10c>
 8004596:	e000      	b.n	800459a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004598:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0302 	and.w	r3, r3, #2
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d063      	beq.n	800466e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80045a6:	4b4c      	ldr	r3, [pc, #304]	; (80046d8 <HAL_RCC_OscConfig+0x26c>)
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	f003 030c 	and.w	r3, r3, #12
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d00b      	beq.n	80045ca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80045b2:	4b49      	ldr	r3, [pc, #292]	; (80046d8 <HAL_RCC_OscConfig+0x26c>)
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	f003 030c 	and.w	r3, r3, #12
 80045ba:	2b08      	cmp	r3, #8
 80045bc:	d11c      	bne.n	80045f8 <HAL_RCC_OscConfig+0x18c>
 80045be:	4b46      	ldr	r3, [pc, #280]	; (80046d8 <HAL_RCC_OscConfig+0x26c>)
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d116      	bne.n	80045f8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045ca:	4b43      	ldr	r3, [pc, #268]	; (80046d8 <HAL_RCC_OscConfig+0x26c>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 0302 	and.w	r3, r3, #2
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d005      	beq.n	80045e2 <HAL_RCC_OscConfig+0x176>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d001      	beq.n	80045e2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e1ba      	b.n	8004958 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045e2:	4b3d      	ldr	r3, [pc, #244]	; (80046d8 <HAL_RCC_OscConfig+0x26c>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	695b      	ldr	r3, [r3, #20]
 80045ee:	00db      	lsls	r3, r3, #3
 80045f0:	4939      	ldr	r1, [pc, #228]	; (80046d8 <HAL_RCC_OscConfig+0x26c>)
 80045f2:	4313      	orrs	r3, r2
 80045f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045f6:	e03a      	b.n	800466e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	691b      	ldr	r3, [r3, #16]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d020      	beq.n	8004642 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004600:	4b36      	ldr	r3, [pc, #216]	; (80046dc <HAL_RCC_OscConfig+0x270>)
 8004602:	2201      	movs	r2, #1
 8004604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004606:	f7fe ffc7 	bl	8003598 <HAL_GetTick>
 800460a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800460c:	e008      	b.n	8004620 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800460e:	f7fe ffc3 	bl	8003598 <HAL_GetTick>
 8004612:	4602      	mov	r2, r0
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	1ad3      	subs	r3, r2, r3
 8004618:	2b02      	cmp	r3, #2
 800461a:	d901      	bls.n	8004620 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800461c:	2303      	movs	r3, #3
 800461e:	e19b      	b.n	8004958 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004620:	4b2d      	ldr	r3, [pc, #180]	; (80046d8 <HAL_RCC_OscConfig+0x26c>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 0302 	and.w	r3, r3, #2
 8004628:	2b00      	cmp	r3, #0
 800462a:	d0f0      	beq.n	800460e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800462c:	4b2a      	ldr	r3, [pc, #168]	; (80046d8 <HAL_RCC_OscConfig+0x26c>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	695b      	ldr	r3, [r3, #20]
 8004638:	00db      	lsls	r3, r3, #3
 800463a:	4927      	ldr	r1, [pc, #156]	; (80046d8 <HAL_RCC_OscConfig+0x26c>)
 800463c:	4313      	orrs	r3, r2
 800463e:	600b      	str	r3, [r1, #0]
 8004640:	e015      	b.n	800466e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004642:	4b26      	ldr	r3, [pc, #152]	; (80046dc <HAL_RCC_OscConfig+0x270>)
 8004644:	2200      	movs	r2, #0
 8004646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004648:	f7fe ffa6 	bl	8003598 <HAL_GetTick>
 800464c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800464e:	e008      	b.n	8004662 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004650:	f7fe ffa2 	bl	8003598 <HAL_GetTick>
 8004654:	4602      	mov	r2, r0
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	2b02      	cmp	r3, #2
 800465c:	d901      	bls.n	8004662 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e17a      	b.n	8004958 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004662:	4b1d      	ldr	r3, [pc, #116]	; (80046d8 <HAL_RCC_OscConfig+0x26c>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0302 	and.w	r3, r3, #2
 800466a:	2b00      	cmp	r3, #0
 800466c:	d1f0      	bne.n	8004650 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0308 	and.w	r3, r3, #8
 8004676:	2b00      	cmp	r3, #0
 8004678:	d03a      	beq.n	80046f0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	699b      	ldr	r3, [r3, #24]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d019      	beq.n	80046b6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004682:	4b17      	ldr	r3, [pc, #92]	; (80046e0 <HAL_RCC_OscConfig+0x274>)
 8004684:	2201      	movs	r2, #1
 8004686:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004688:	f7fe ff86 	bl	8003598 <HAL_GetTick>
 800468c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800468e:	e008      	b.n	80046a2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004690:	f7fe ff82 	bl	8003598 <HAL_GetTick>
 8004694:	4602      	mov	r2, r0
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	2b02      	cmp	r3, #2
 800469c:	d901      	bls.n	80046a2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e15a      	b.n	8004958 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046a2:	4b0d      	ldr	r3, [pc, #52]	; (80046d8 <HAL_RCC_OscConfig+0x26c>)
 80046a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a6:	f003 0302 	and.w	r3, r3, #2
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d0f0      	beq.n	8004690 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80046ae:	2001      	movs	r0, #1
 80046b0:	f000 fad8 	bl	8004c64 <RCC_Delay>
 80046b4:	e01c      	b.n	80046f0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046b6:	4b0a      	ldr	r3, [pc, #40]	; (80046e0 <HAL_RCC_OscConfig+0x274>)
 80046b8:	2200      	movs	r2, #0
 80046ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046bc:	f7fe ff6c 	bl	8003598 <HAL_GetTick>
 80046c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046c2:	e00f      	b.n	80046e4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046c4:	f7fe ff68 	bl	8003598 <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d908      	bls.n	80046e4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e140      	b.n	8004958 <HAL_RCC_OscConfig+0x4ec>
 80046d6:	bf00      	nop
 80046d8:	40021000 	.word	0x40021000
 80046dc:	42420000 	.word	0x42420000
 80046e0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046e4:	4b9e      	ldr	r3, [pc, #632]	; (8004960 <HAL_RCC_OscConfig+0x4f4>)
 80046e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e8:	f003 0302 	and.w	r3, r3, #2
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d1e9      	bne.n	80046c4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0304 	and.w	r3, r3, #4
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	f000 80a6 	beq.w	800484a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046fe:	2300      	movs	r3, #0
 8004700:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004702:	4b97      	ldr	r3, [pc, #604]	; (8004960 <HAL_RCC_OscConfig+0x4f4>)
 8004704:	69db      	ldr	r3, [r3, #28]
 8004706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d10d      	bne.n	800472a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800470e:	4b94      	ldr	r3, [pc, #592]	; (8004960 <HAL_RCC_OscConfig+0x4f4>)
 8004710:	69db      	ldr	r3, [r3, #28]
 8004712:	4a93      	ldr	r2, [pc, #588]	; (8004960 <HAL_RCC_OscConfig+0x4f4>)
 8004714:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004718:	61d3      	str	r3, [r2, #28]
 800471a:	4b91      	ldr	r3, [pc, #580]	; (8004960 <HAL_RCC_OscConfig+0x4f4>)
 800471c:	69db      	ldr	r3, [r3, #28]
 800471e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004722:	60bb      	str	r3, [r7, #8]
 8004724:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004726:	2301      	movs	r3, #1
 8004728:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800472a:	4b8e      	ldr	r3, [pc, #568]	; (8004964 <HAL_RCC_OscConfig+0x4f8>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004732:	2b00      	cmp	r3, #0
 8004734:	d118      	bne.n	8004768 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004736:	4b8b      	ldr	r3, [pc, #556]	; (8004964 <HAL_RCC_OscConfig+0x4f8>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a8a      	ldr	r2, [pc, #552]	; (8004964 <HAL_RCC_OscConfig+0x4f8>)
 800473c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004740:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004742:	f7fe ff29 	bl	8003598 <HAL_GetTick>
 8004746:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004748:	e008      	b.n	800475c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800474a:	f7fe ff25 	bl	8003598 <HAL_GetTick>
 800474e:	4602      	mov	r2, r0
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	1ad3      	subs	r3, r2, r3
 8004754:	2b64      	cmp	r3, #100	; 0x64
 8004756:	d901      	bls.n	800475c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004758:	2303      	movs	r3, #3
 800475a:	e0fd      	b.n	8004958 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800475c:	4b81      	ldr	r3, [pc, #516]	; (8004964 <HAL_RCC_OscConfig+0x4f8>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004764:	2b00      	cmp	r3, #0
 8004766:	d0f0      	beq.n	800474a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	2b01      	cmp	r3, #1
 800476e:	d106      	bne.n	800477e <HAL_RCC_OscConfig+0x312>
 8004770:	4b7b      	ldr	r3, [pc, #492]	; (8004960 <HAL_RCC_OscConfig+0x4f4>)
 8004772:	6a1b      	ldr	r3, [r3, #32]
 8004774:	4a7a      	ldr	r2, [pc, #488]	; (8004960 <HAL_RCC_OscConfig+0x4f4>)
 8004776:	f043 0301 	orr.w	r3, r3, #1
 800477a:	6213      	str	r3, [r2, #32]
 800477c:	e02d      	b.n	80047da <HAL_RCC_OscConfig+0x36e>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d10c      	bne.n	80047a0 <HAL_RCC_OscConfig+0x334>
 8004786:	4b76      	ldr	r3, [pc, #472]	; (8004960 <HAL_RCC_OscConfig+0x4f4>)
 8004788:	6a1b      	ldr	r3, [r3, #32]
 800478a:	4a75      	ldr	r2, [pc, #468]	; (8004960 <HAL_RCC_OscConfig+0x4f4>)
 800478c:	f023 0301 	bic.w	r3, r3, #1
 8004790:	6213      	str	r3, [r2, #32]
 8004792:	4b73      	ldr	r3, [pc, #460]	; (8004960 <HAL_RCC_OscConfig+0x4f4>)
 8004794:	6a1b      	ldr	r3, [r3, #32]
 8004796:	4a72      	ldr	r2, [pc, #456]	; (8004960 <HAL_RCC_OscConfig+0x4f4>)
 8004798:	f023 0304 	bic.w	r3, r3, #4
 800479c:	6213      	str	r3, [r2, #32]
 800479e:	e01c      	b.n	80047da <HAL_RCC_OscConfig+0x36e>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	2b05      	cmp	r3, #5
 80047a6:	d10c      	bne.n	80047c2 <HAL_RCC_OscConfig+0x356>
 80047a8:	4b6d      	ldr	r3, [pc, #436]	; (8004960 <HAL_RCC_OscConfig+0x4f4>)
 80047aa:	6a1b      	ldr	r3, [r3, #32]
 80047ac:	4a6c      	ldr	r2, [pc, #432]	; (8004960 <HAL_RCC_OscConfig+0x4f4>)
 80047ae:	f043 0304 	orr.w	r3, r3, #4
 80047b2:	6213      	str	r3, [r2, #32]
 80047b4:	4b6a      	ldr	r3, [pc, #424]	; (8004960 <HAL_RCC_OscConfig+0x4f4>)
 80047b6:	6a1b      	ldr	r3, [r3, #32]
 80047b8:	4a69      	ldr	r2, [pc, #420]	; (8004960 <HAL_RCC_OscConfig+0x4f4>)
 80047ba:	f043 0301 	orr.w	r3, r3, #1
 80047be:	6213      	str	r3, [r2, #32]
 80047c0:	e00b      	b.n	80047da <HAL_RCC_OscConfig+0x36e>
 80047c2:	4b67      	ldr	r3, [pc, #412]	; (8004960 <HAL_RCC_OscConfig+0x4f4>)
 80047c4:	6a1b      	ldr	r3, [r3, #32]
 80047c6:	4a66      	ldr	r2, [pc, #408]	; (8004960 <HAL_RCC_OscConfig+0x4f4>)
 80047c8:	f023 0301 	bic.w	r3, r3, #1
 80047cc:	6213      	str	r3, [r2, #32]
 80047ce:	4b64      	ldr	r3, [pc, #400]	; (8004960 <HAL_RCC_OscConfig+0x4f4>)
 80047d0:	6a1b      	ldr	r3, [r3, #32]
 80047d2:	4a63      	ldr	r2, [pc, #396]	; (8004960 <HAL_RCC_OscConfig+0x4f4>)
 80047d4:	f023 0304 	bic.w	r3, r3, #4
 80047d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d015      	beq.n	800480e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047e2:	f7fe fed9 	bl	8003598 <HAL_GetTick>
 80047e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047e8:	e00a      	b.n	8004800 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047ea:	f7fe fed5 	bl	8003598 <HAL_GetTick>
 80047ee:	4602      	mov	r2, r0
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d901      	bls.n	8004800 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80047fc:	2303      	movs	r3, #3
 80047fe:	e0ab      	b.n	8004958 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004800:	4b57      	ldr	r3, [pc, #348]	; (8004960 <HAL_RCC_OscConfig+0x4f4>)
 8004802:	6a1b      	ldr	r3, [r3, #32]
 8004804:	f003 0302 	and.w	r3, r3, #2
 8004808:	2b00      	cmp	r3, #0
 800480a:	d0ee      	beq.n	80047ea <HAL_RCC_OscConfig+0x37e>
 800480c:	e014      	b.n	8004838 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800480e:	f7fe fec3 	bl	8003598 <HAL_GetTick>
 8004812:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004814:	e00a      	b.n	800482c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004816:	f7fe febf 	bl	8003598 <HAL_GetTick>
 800481a:	4602      	mov	r2, r0
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	f241 3288 	movw	r2, #5000	; 0x1388
 8004824:	4293      	cmp	r3, r2
 8004826:	d901      	bls.n	800482c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004828:	2303      	movs	r3, #3
 800482a:	e095      	b.n	8004958 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800482c:	4b4c      	ldr	r3, [pc, #304]	; (8004960 <HAL_RCC_OscConfig+0x4f4>)
 800482e:	6a1b      	ldr	r3, [r3, #32]
 8004830:	f003 0302 	and.w	r3, r3, #2
 8004834:	2b00      	cmp	r3, #0
 8004836:	d1ee      	bne.n	8004816 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004838:	7dfb      	ldrb	r3, [r7, #23]
 800483a:	2b01      	cmp	r3, #1
 800483c:	d105      	bne.n	800484a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800483e:	4b48      	ldr	r3, [pc, #288]	; (8004960 <HAL_RCC_OscConfig+0x4f4>)
 8004840:	69db      	ldr	r3, [r3, #28]
 8004842:	4a47      	ldr	r2, [pc, #284]	; (8004960 <HAL_RCC_OscConfig+0x4f4>)
 8004844:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004848:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	69db      	ldr	r3, [r3, #28]
 800484e:	2b00      	cmp	r3, #0
 8004850:	f000 8081 	beq.w	8004956 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004854:	4b42      	ldr	r3, [pc, #264]	; (8004960 <HAL_RCC_OscConfig+0x4f4>)
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	f003 030c 	and.w	r3, r3, #12
 800485c:	2b08      	cmp	r3, #8
 800485e:	d061      	beq.n	8004924 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	69db      	ldr	r3, [r3, #28]
 8004864:	2b02      	cmp	r3, #2
 8004866:	d146      	bne.n	80048f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004868:	4b3f      	ldr	r3, [pc, #252]	; (8004968 <HAL_RCC_OscConfig+0x4fc>)
 800486a:	2200      	movs	r2, #0
 800486c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800486e:	f7fe fe93 	bl	8003598 <HAL_GetTick>
 8004872:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004874:	e008      	b.n	8004888 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004876:	f7fe fe8f 	bl	8003598 <HAL_GetTick>
 800487a:	4602      	mov	r2, r0
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	2b02      	cmp	r3, #2
 8004882:	d901      	bls.n	8004888 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004884:	2303      	movs	r3, #3
 8004886:	e067      	b.n	8004958 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004888:	4b35      	ldr	r3, [pc, #212]	; (8004960 <HAL_RCC_OscConfig+0x4f4>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004890:	2b00      	cmp	r3, #0
 8004892:	d1f0      	bne.n	8004876 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6a1b      	ldr	r3, [r3, #32]
 8004898:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800489c:	d108      	bne.n	80048b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800489e:	4b30      	ldr	r3, [pc, #192]	; (8004960 <HAL_RCC_OscConfig+0x4f4>)
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	492d      	ldr	r1, [pc, #180]	; (8004960 <HAL_RCC_OscConfig+0x4f4>)
 80048ac:	4313      	orrs	r3, r2
 80048ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048b0:	4b2b      	ldr	r3, [pc, #172]	; (8004960 <HAL_RCC_OscConfig+0x4f4>)
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6a19      	ldr	r1, [r3, #32]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c0:	430b      	orrs	r3, r1
 80048c2:	4927      	ldr	r1, [pc, #156]	; (8004960 <HAL_RCC_OscConfig+0x4f4>)
 80048c4:	4313      	orrs	r3, r2
 80048c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048c8:	4b27      	ldr	r3, [pc, #156]	; (8004968 <HAL_RCC_OscConfig+0x4fc>)
 80048ca:	2201      	movs	r2, #1
 80048cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048ce:	f7fe fe63 	bl	8003598 <HAL_GetTick>
 80048d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80048d4:	e008      	b.n	80048e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048d6:	f7fe fe5f 	bl	8003598 <HAL_GetTick>
 80048da:	4602      	mov	r2, r0
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	1ad3      	subs	r3, r2, r3
 80048e0:	2b02      	cmp	r3, #2
 80048e2:	d901      	bls.n	80048e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	e037      	b.n	8004958 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80048e8:	4b1d      	ldr	r3, [pc, #116]	; (8004960 <HAL_RCC_OscConfig+0x4f4>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d0f0      	beq.n	80048d6 <HAL_RCC_OscConfig+0x46a>
 80048f4:	e02f      	b.n	8004956 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048f6:	4b1c      	ldr	r3, [pc, #112]	; (8004968 <HAL_RCC_OscConfig+0x4fc>)
 80048f8:	2200      	movs	r2, #0
 80048fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048fc:	f7fe fe4c 	bl	8003598 <HAL_GetTick>
 8004900:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004902:	e008      	b.n	8004916 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004904:	f7fe fe48 	bl	8003598 <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	2b02      	cmp	r3, #2
 8004910:	d901      	bls.n	8004916 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e020      	b.n	8004958 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004916:	4b12      	ldr	r3, [pc, #72]	; (8004960 <HAL_RCC_OscConfig+0x4f4>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d1f0      	bne.n	8004904 <HAL_RCC_OscConfig+0x498>
 8004922:	e018      	b.n	8004956 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	69db      	ldr	r3, [r3, #28]
 8004928:	2b01      	cmp	r3, #1
 800492a:	d101      	bne.n	8004930 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e013      	b.n	8004958 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004930:	4b0b      	ldr	r3, [pc, #44]	; (8004960 <HAL_RCC_OscConfig+0x4f4>)
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6a1b      	ldr	r3, [r3, #32]
 8004940:	429a      	cmp	r2, r3
 8004942:	d106      	bne.n	8004952 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800494e:	429a      	cmp	r2, r3
 8004950:	d001      	beq.n	8004956 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e000      	b.n	8004958 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004956:	2300      	movs	r3, #0
}
 8004958:	4618      	mov	r0, r3
 800495a:	3718      	adds	r7, #24
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}
 8004960:	40021000 	.word	0x40021000
 8004964:	40007000 	.word	0x40007000
 8004968:	42420060 	.word	0x42420060

0800496c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b084      	sub	sp, #16
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d101      	bne.n	8004980 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	e0d0      	b.n	8004b22 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004980:	4b6a      	ldr	r3, [pc, #424]	; (8004b2c <HAL_RCC_ClockConfig+0x1c0>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 0307 	and.w	r3, r3, #7
 8004988:	683a      	ldr	r2, [r7, #0]
 800498a:	429a      	cmp	r2, r3
 800498c:	d910      	bls.n	80049b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800498e:	4b67      	ldr	r3, [pc, #412]	; (8004b2c <HAL_RCC_ClockConfig+0x1c0>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f023 0207 	bic.w	r2, r3, #7
 8004996:	4965      	ldr	r1, [pc, #404]	; (8004b2c <HAL_RCC_ClockConfig+0x1c0>)
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	4313      	orrs	r3, r2
 800499c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800499e:	4b63      	ldr	r3, [pc, #396]	; (8004b2c <HAL_RCC_ClockConfig+0x1c0>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 0307 	and.w	r3, r3, #7
 80049a6:	683a      	ldr	r2, [r7, #0]
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d001      	beq.n	80049b0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e0b8      	b.n	8004b22 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 0302 	and.w	r3, r3, #2
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d020      	beq.n	80049fe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0304 	and.w	r3, r3, #4
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d005      	beq.n	80049d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049c8:	4b59      	ldr	r3, [pc, #356]	; (8004b30 <HAL_RCC_ClockConfig+0x1c4>)
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	4a58      	ldr	r2, [pc, #352]	; (8004b30 <HAL_RCC_ClockConfig+0x1c4>)
 80049ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80049d2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0308 	and.w	r3, r3, #8
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d005      	beq.n	80049ec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049e0:	4b53      	ldr	r3, [pc, #332]	; (8004b30 <HAL_RCC_ClockConfig+0x1c4>)
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	4a52      	ldr	r2, [pc, #328]	; (8004b30 <HAL_RCC_ClockConfig+0x1c4>)
 80049e6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80049ea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049ec:	4b50      	ldr	r3, [pc, #320]	; (8004b30 <HAL_RCC_ClockConfig+0x1c4>)
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	494d      	ldr	r1, [pc, #308]	; (8004b30 <HAL_RCC_ClockConfig+0x1c4>)
 80049fa:	4313      	orrs	r3, r2
 80049fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0301 	and.w	r3, r3, #1
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d040      	beq.n	8004a8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d107      	bne.n	8004a22 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a12:	4b47      	ldr	r3, [pc, #284]	; (8004b30 <HAL_RCC_ClockConfig+0x1c4>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d115      	bne.n	8004a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e07f      	b.n	8004b22 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d107      	bne.n	8004a3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a2a:	4b41      	ldr	r3, [pc, #260]	; (8004b30 <HAL_RCC_ClockConfig+0x1c4>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d109      	bne.n	8004a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e073      	b.n	8004b22 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a3a:	4b3d      	ldr	r3, [pc, #244]	; (8004b30 <HAL_RCC_ClockConfig+0x1c4>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0302 	and.w	r3, r3, #2
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d101      	bne.n	8004a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e06b      	b.n	8004b22 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a4a:	4b39      	ldr	r3, [pc, #228]	; (8004b30 <HAL_RCC_ClockConfig+0x1c4>)
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	f023 0203 	bic.w	r2, r3, #3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	4936      	ldr	r1, [pc, #216]	; (8004b30 <HAL_RCC_ClockConfig+0x1c4>)
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a5c:	f7fe fd9c 	bl	8003598 <HAL_GetTick>
 8004a60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a62:	e00a      	b.n	8004a7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a64:	f7fe fd98 	bl	8003598 <HAL_GetTick>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d901      	bls.n	8004a7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	e053      	b.n	8004b22 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a7a:	4b2d      	ldr	r3, [pc, #180]	; (8004b30 <HAL_RCC_ClockConfig+0x1c4>)
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	f003 020c 	and.w	r2, r3, #12
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d1eb      	bne.n	8004a64 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a8c:	4b27      	ldr	r3, [pc, #156]	; (8004b2c <HAL_RCC_ClockConfig+0x1c0>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0307 	and.w	r3, r3, #7
 8004a94:	683a      	ldr	r2, [r7, #0]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d210      	bcs.n	8004abc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a9a:	4b24      	ldr	r3, [pc, #144]	; (8004b2c <HAL_RCC_ClockConfig+0x1c0>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f023 0207 	bic.w	r2, r3, #7
 8004aa2:	4922      	ldr	r1, [pc, #136]	; (8004b2c <HAL_RCC_ClockConfig+0x1c0>)
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aaa:	4b20      	ldr	r3, [pc, #128]	; (8004b2c <HAL_RCC_ClockConfig+0x1c0>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 0307 	and.w	r3, r3, #7
 8004ab2:	683a      	ldr	r2, [r7, #0]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d001      	beq.n	8004abc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e032      	b.n	8004b22 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0304 	and.w	r3, r3, #4
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d008      	beq.n	8004ada <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ac8:	4b19      	ldr	r3, [pc, #100]	; (8004b30 <HAL_RCC_ClockConfig+0x1c4>)
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	4916      	ldr	r1, [pc, #88]	; (8004b30 <HAL_RCC_ClockConfig+0x1c4>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0308 	and.w	r3, r3, #8
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d009      	beq.n	8004afa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004ae6:	4b12      	ldr	r3, [pc, #72]	; (8004b30 <HAL_RCC_ClockConfig+0x1c4>)
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	00db      	lsls	r3, r3, #3
 8004af4:	490e      	ldr	r1, [pc, #56]	; (8004b30 <HAL_RCC_ClockConfig+0x1c4>)
 8004af6:	4313      	orrs	r3, r2
 8004af8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004afa:	f000 f821 	bl	8004b40 <HAL_RCC_GetSysClockFreq>
 8004afe:	4602      	mov	r2, r0
 8004b00:	4b0b      	ldr	r3, [pc, #44]	; (8004b30 <HAL_RCC_ClockConfig+0x1c4>)
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	091b      	lsrs	r3, r3, #4
 8004b06:	f003 030f 	and.w	r3, r3, #15
 8004b0a:	490a      	ldr	r1, [pc, #40]	; (8004b34 <HAL_RCC_ClockConfig+0x1c8>)
 8004b0c:	5ccb      	ldrb	r3, [r1, r3]
 8004b0e:	fa22 f303 	lsr.w	r3, r2, r3
 8004b12:	4a09      	ldr	r2, [pc, #36]	; (8004b38 <HAL_RCC_ClockConfig+0x1cc>)
 8004b14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004b16:	4b09      	ldr	r3, [pc, #36]	; (8004b3c <HAL_RCC_ClockConfig+0x1d0>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f7fe fcfa 	bl	8003514 <HAL_InitTick>

  return HAL_OK;
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3710      	adds	r7, #16
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	40022000 	.word	0x40022000
 8004b30:	40021000 	.word	0x40021000
 8004b34:	0800b484 	.word	0x0800b484
 8004b38:	2000001c 	.word	0x2000001c
 8004b3c:	20000020 	.word	0x20000020

08004b40 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b40:	b490      	push	{r4, r7}
 8004b42:	b08a      	sub	sp, #40	; 0x28
 8004b44:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004b46:	4b2a      	ldr	r3, [pc, #168]	; (8004bf0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004b48:	1d3c      	adds	r4, r7, #4
 8004b4a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004b4c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004b50:	f240 2301 	movw	r3, #513	; 0x201
 8004b54:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004b56:	2300      	movs	r3, #0
 8004b58:	61fb      	str	r3, [r7, #28]
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	61bb      	str	r3, [r7, #24]
 8004b5e:	2300      	movs	r3, #0
 8004b60:	627b      	str	r3, [r7, #36]	; 0x24
 8004b62:	2300      	movs	r3, #0
 8004b64:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004b66:	2300      	movs	r3, #0
 8004b68:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004b6a:	4b22      	ldr	r3, [pc, #136]	; (8004bf4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	f003 030c 	and.w	r3, r3, #12
 8004b76:	2b04      	cmp	r3, #4
 8004b78:	d002      	beq.n	8004b80 <HAL_RCC_GetSysClockFreq+0x40>
 8004b7a:	2b08      	cmp	r3, #8
 8004b7c:	d003      	beq.n	8004b86 <HAL_RCC_GetSysClockFreq+0x46>
 8004b7e:	e02d      	b.n	8004bdc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004b80:	4b1d      	ldr	r3, [pc, #116]	; (8004bf8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b82:	623b      	str	r3, [r7, #32]
      break;
 8004b84:	e02d      	b.n	8004be2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004b86:	69fb      	ldr	r3, [r7, #28]
 8004b88:	0c9b      	lsrs	r3, r3, #18
 8004b8a:	f003 030f 	and.w	r3, r3, #15
 8004b8e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004b92:	4413      	add	r3, r2
 8004b94:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004b98:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d013      	beq.n	8004bcc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004ba4:	4b13      	ldr	r3, [pc, #76]	; (8004bf4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	0c5b      	lsrs	r3, r3, #17
 8004baa:	f003 0301 	and.w	r3, r3, #1
 8004bae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004bb2:	4413      	add	r3, r2
 8004bb4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004bb8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	4a0e      	ldr	r2, [pc, #56]	; (8004bf8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004bbe:	fb02 f203 	mul.w	r2, r2, r3
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bc8:	627b      	str	r3, [r7, #36]	; 0x24
 8004bca:	e004      	b.n	8004bd6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	4a0b      	ldr	r2, [pc, #44]	; (8004bfc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004bd0:	fb02 f303 	mul.w	r3, r2, r3
 8004bd4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd8:	623b      	str	r3, [r7, #32]
      break;
 8004bda:	e002      	b.n	8004be2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004bdc:	4b06      	ldr	r3, [pc, #24]	; (8004bf8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004bde:	623b      	str	r3, [r7, #32]
      break;
 8004be0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004be2:	6a3b      	ldr	r3, [r7, #32]
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3728      	adds	r7, #40	; 0x28
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bc90      	pop	{r4, r7}
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop
 8004bf0:	0800b474 	.word	0x0800b474
 8004bf4:	40021000 	.word	0x40021000
 8004bf8:	007a1200 	.word	0x007a1200
 8004bfc:	003d0900 	.word	0x003d0900

08004c00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c00:	b480      	push	{r7}
 8004c02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c04:	4b02      	ldr	r3, [pc, #8]	; (8004c10 <HAL_RCC_GetHCLKFreq+0x10>)
 8004c06:	681b      	ldr	r3, [r3, #0]
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bc80      	pop	{r7}
 8004c0e:	4770      	bx	lr
 8004c10:	2000001c 	.word	0x2000001c

08004c14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c18:	f7ff fff2 	bl	8004c00 <HAL_RCC_GetHCLKFreq>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	4b05      	ldr	r3, [pc, #20]	; (8004c34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	0a1b      	lsrs	r3, r3, #8
 8004c24:	f003 0307 	and.w	r3, r3, #7
 8004c28:	4903      	ldr	r1, [pc, #12]	; (8004c38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c2a:	5ccb      	ldrb	r3, [r1, r3]
 8004c2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	40021000 	.word	0x40021000
 8004c38:	0800b494 	.word	0x0800b494

08004c3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004c40:	f7ff ffde 	bl	8004c00 <HAL_RCC_GetHCLKFreq>
 8004c44:	4602      	mov	r2, r0
 8004c46:	4b05      	ldr	r3, [pc, #20]	; (8004c5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	0adb      	lsrs	r3, r3, #11
 8004c4c:	f003 0307 	and.w	r3, r3, #7
 8004c50:	4903      	ldr	r1, [pc, #12]	; (8004c60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c52:	5ccb      	ldrb	r3, [r1, r3]
 8004c54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	40021000 	.word	0x40021000
 8004c60:	0800b494 	.word	0x0800b494

08004c64 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b085      	sub	sp, #20
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004c6c:	4b0a      	ldr	r3, [pc, #40]	; (8004c98 <RCC_Delay+0x34>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a0a      	ldr	r2, [pc, #40]	; (8004c9c <RCC_Delay+0x38>)
 8004c72:	fba2 2303 	umull	r2, r3, r2, r3
 8004c76:	0a5b      	lsrs	r3, r3, #9
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	fb02 f303 	mul.w	r3, r2, r3
 8004c7e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004c80:	bf00      	nop
  }
  while (Delay --);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	1e5a      	subs	r2, r3, #1
 8004c86:	60fa      	str	r2, [r7, #12]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d1f9      	bne.n	8004c80 <RCC_Delay+0x1c>
}
 8004c8c:	bf00      	nop
 8004c8e:	bf00      	nop
 8004c90:	3714      	adds	r7, #20
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bc80      	pop	{r7}
 8004c96:	4770      	bx	lr
 8004c98:	2000001c 	.word	0x2000001c
 8004c9c:	10624dd3 	.word	0x10624dd3

08004ca0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b082      	sub	sp, #8
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d101      	bne.n	8004cb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e03f      	b.n	8004d32 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d106      	bne.n	8004ccc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f7fe fa2a 	bl	8003120 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2224      	movs	r2, #36	; 0x24
 8004cd0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	68da      	ldr	r2, [r3, #12]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ce2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f000 fc8f 	bl	8005608 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	691a      	ldr	r2, [r3, #16]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004cf8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	695a      	ldr	r2, [r3, #20]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	68da      	ldr	r2, [r3, #12]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2220      	movs	r2, #32
 8004d24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2220      	movs	r2, #32
 8004d2c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004d30:	2300      	movs	r3, #0
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3708      	adds	r7, #8
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
	...

08004d3c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b086      	sub	sp, #24
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	60b9      	str	r1, [r7, #8]
 8004d46:	4613      	mov	r3, r2
 8004d48:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	2b20      	cmp	r3, #32
 8004d54:	d153      	bne.n	8004dfe <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d002      	beq.n	8004d62 <HAL_UART_Transmit_DMA+0x26>
 8004d5c:	88fb      	ldrh	r3, [r7, #6]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d101      	bne.n	8004d66 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e04c      	b.n	8004e00 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d101      	bne.n	8004d74 <HAL_UART_Transmit_DMA+0x38>
 8004d70:	2302      	movs	r3, #2
 8004d72:	e045      	b.n	8004e00 <HAL_UART_Transmit_DMA+0xc4>
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2201      	movs	r2, #1
 8004d78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8004d7c:	68ba      	ldr	r2, [r7, #8]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	88fa      	ldrh	r2, [r7, #6]
 8004d86:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	88fa      	ldrh	r2, [r7, #6]
 8004d8c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2200      	movs	r2, #0
 8004d92:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2221      	movs	r2, #33	; 0x21
 8004d98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da0:	4a19      	ldr	r2, [pc, #100]	; (8004e08 <HAL_UART_Transmit_DMA+0xcc>)
 8004da2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da8:	4a18      	ldr	r2, [pc, #96]	; (8004e0c <HAL_UART_Transmit_DMA+0xd0>)
 8004daa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db0:	4a17      	ldr	r2, [pc, #92]	; (8004e10 <HAL_UART_Transmit_DMA+0xd4>)
 8004db2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db8:	2200      	movs	r2, #0
 8004dba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8004dbc:	f107 0308 	add.w	r3, r7, #8
 8004dc0:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	6819      	ldr	r1, [r3, #0]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	3304      	adds	r3, #4
 8004dd0:	461a      	mov	r2, r3
 8004dd2:	88fb      	ldrh	r3, [r7, #6]
 8004dd4:	f7fe fd92 	bl	80038fc <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004de0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	695a      	ldr	r2, [r3, #20]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004df8:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	e000      	b.n	8004e00 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8004dfe:	2302      	movs	r3, #2
  }
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3718      	adds	r7, #24
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}
 8004e08:	08005227 	.word	0x08005227
 8004e0c:	08005279 	.word	0x08005279
 8004e10:	08005319 	.word	0x08005319

08004e14 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b086      	sub	sp, #24
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	60b9      	str	r1, [r7, #8]
 8004e1e:	4613      	mov	r3, r2
 8004e20:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	2b20      	cmp	r3, #32
 8004e2c:	d166      	bne.n	8004efc <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d002      	beq.n	8004e3a <HAL_UART_Receive_DMA+0x26>
 8004e34:	88fb      	ldrh	r3, [r7, #6]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d101      	bne.n	8004e3e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e05f      	b.n	8004efe <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d101      	bne.n	8004e4c <HAL_UART_Receive_DMA+0x38>
 8004e48:	2302      	movs	r3, #2
 8004e4a:	e058      	b.n	8004efe <HAL_UART_Receive_DMA+0xea>
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8004e54:	68ba      	ldr	r2, [r7, #8]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	88fa      	ldrh	r2, [r7, #6]
 8004e5e:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2200      	movs	r2, #0
 8004e64:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2222      	movs	r2, #34	; 0x22
 8004e6a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e72:	4a25      	ldr	r2, [pc, #148]	; (8004f08 <HAL_UART_Receive_DMA+0xf4>)
 8004e74:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e7a:	4a24      	ldr	r2, [pc, #144]	; (8004f0c <HAL_UART_Receive_DMA+0xf8>)
 8004e7c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e82:	4a23      	ldr	r2, [pc, #140]	; (8004f10 <HAL_UART_Receive_DMA+0xfc>)
 8004e84:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 8004e8e:	f107 0308 	add.w	r3, r7, #8
 8004e92:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	3304      	adds	r3, #4
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	88fb      	ldrh	r3, [r7, #6]
 8004ea6:	f7fe fd29 	bl	80038fc <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8004eaa:	2300      	movs	r3, #0
 8004eac:	613b      	str	r3, [r7, #16]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	613b      	str	r3, [r7, #16]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	613b      	str	r3, [r7, #16]
 8004ebe:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	68da      	ldr	r2, [r3, #12]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ed6:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	695a      	ldr	r2, [r3, #20]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f042 0201 	orr.w	r2, r2, #1
 8004ee6:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	695a      	ldr	r2, [r3, #20]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ef6:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	e000      	b.n	8004efe <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8004efc:	2302      	movs	r3, #2
  }
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3718      	adds	r7, #24
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop
 8004f08:	08005295 	.word	0x08005295
 8004f0c:	080052fd 	.word	0x080052fd
 8004f10:	08005319 	.word	0x08005319

08004f14 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	695b      	ldr	r3, [r3, #20]
 8004f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	bf14      	ite	ne
 8004f2e:	2301      	movne	r3, #1
 8004f30:	2300      	moveq	r3, #0
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	2b21      	cmp	r3, #33	; 0x21
 8004f40:	d116      	bne.n	8004f70 <HAL_UART_DMAStop+0x5c>
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d013      	beq.n	8004f70 <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	695a      	ldr	r2, [r3, #20]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f56:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d004      	beq.n	8004f6a <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f64:	4618      	mov	r0, r3
 8004f66:	f7fe fd28 	bl	80039ba <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 fa1e 	bl	80053ac <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	695b      	ldr	r3, [r3, #20]
 8004f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	bf14      	ite	ne
 8004f7e:	2301      	movne	r3, #1
 8004f80:	2300      	moveq	r3, #0
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	2b22      	cmp	r3, #34	; 0x22
 8004f90:	d116      	bne.n	8004fc0 <HAL_UART_DMAStop+0xac>
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d013      	beq.n	8004fc0 <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	695a      	ldr	r2, [r3, #20]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fa6:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d004      	beq.n	8004fba <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f7fe fd00 	bl	80039ba <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f000 fa0b 	bl	80053d6 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8004fc0:	2300      	movs	r3, #0
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3710      	adds	r7, #16
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
	...

08004fcc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b088      	sub	sp, #32
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	695b      	ldr	r3, [r3, #20]
 8004fea:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004fec:	2300      	movs	r3, #0
 8004fee:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	f003 030f 	and.w	r3, r3, #15
 8004ffa:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d10d      	bne.n	800501e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	f003 0320 	and.w	r3, r3, #32
 8005008:	2b00      	cmp	r3, #0
 800500a:	d008      	beq.n	800501e <HAL_UART_IRQHandler+0x52>
 800500c:	69bb      	ldr	r3, [r7, #24]
 800500e:	f003 0320 	and.w	r3, r3, #32
 8005012:	2b00      	cmp	r3, #0
 8005014:	d003      	beq.n	800501e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 fa75 	bl	8005506 <UART_Receive_IT>
      return;
 800501c:	e0d0      	b.n	80051c0 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	2b00      	cmp	r3, #0
 8005022:	f000 80b0 	beq.w	8005186 <HAL_UART_IRQHandler+0x1ba>
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	f003 0301 	and.w	r3, r3, #1
 800502c:	2b00      	cmp	r3, #0
 800502e:	d105      	bne.n	800503c <HAL_UART_IRQHandler+0x70>
 8005030:	69bb      	ldr	r3, [r7, #24]
 8005032:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005036:	2b00      	cmp	r3, #0
 8005038:	f000 80a5 	beq.w	8005186 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800503c:	69fb      	ldr	r3, [r7, #28]
 800503e:	f003 0301 	and.w	r3, r3, #1
 8005042:	2b00      	cmp	r3, #0
 8005044:	d00a      	beq.n	800505c <HAL_UART_IRQHandler+0x90>
 8005046:	69bb      	ldr	r3, [r7, #24]
 8005048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800504c:	2b00      	cmp	r3, #0
 800504e:	d005      	beq.n	800505c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005054:	f043 0201 	orr.w	r2, r3, #1
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	f003 0304 	and.w	r3, r3, #4
 8005062:	2b00      	cmp	r3, #0
 8005064:	d00a      	beq.n	800507c <HAL_UART_IRQHandler+0xb0>
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	f003 0301 	and.w	r3, r3, #1
 800506c:	2b00      	cmp	r3, #0
 800506e:	d005      	beq.n	800507c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005074:	f043 0202 	orr.w	r2, r3, #2
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	f003 0302 	and.w	r3, r3, #2
 8005082:	2b00      	cmp	r3, #0
 8005084:	d00a      	beq.n	800509c <HAL_UART_IRQHandler+0xd0>
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	f003 0301 	and.w	r3, r3, #1
 800508c:	2b00      	cmp	r3, #0
 800508e:	d005      	beq.n	800509c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005094:	f043 0204 	orr.w	r2, r3, #4
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	f003 0308 	and.w	r3, r3, #8
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d00f      	beq.n	80050c6 <HAL_UART_IRQHandler+0xfa>
 80050a6:	69bb      	ldr	r3, [r7, #24]
 80050a8:	f003 0320 	and.w	r3, r3, #32
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d104      	bne.n	80050ba <HAL_UART_IRQHandler+0xee>
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	f003 0301 	and.w	r3, r3, #1
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d005      	beq.n	80050c6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050be:	f043 0208 	orr.w	r2, r3, #8
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d077      	beq.n	80051be <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80050ce:	69fb      	ldr	r3, [r7, #28]
 80050d0:	f003 0320 	and.w	r3, r3, #32
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d007      	beq.n	80050e8 <HAL_UART_IRQHandler+0x11c>
 80050d8:	69bb      	ldr	r3, [r7, #24]
 80050da:	f003 0320 	and.w	r3, r3, #32
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d002      	beq.n	80050e8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f000 fa0f 	bl	8005506 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	695b      	ldr	r3, [r3, #20]
 80050ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	bf14      	ite	ne
 80050f6:	2301      	movne	r3, #1
 80050f8:	2300      	moveq	r3, #0
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005102:	f003 0308 	and.w	r3, r3, #8
 8005106:	2b00      	cmp	r3, #0
 8005108:	d102      	bne.n	8005110 <HAL_UART_IRQHandler+0x144>
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d031      	beq.n	8005174 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f000 f960 	bl	80053d6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	695b      	ldr	r3, [r3, #20]
 800511c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005120:	2b00      	cmp	r3, #0
 8005122:	d023      	beq.n	800516c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	695a      	ldr	r2, [r3, #20]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005132:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005138:	2b00      	cmp	r3, #0
 800513a:	d013      	beq.n	8005164 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005140:	4a21      	ldr	r2, [pc, #132]	; (80051c8 <HAL_UART_IRQHandler+0x1fc>)
 8005142:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005148:	4618      	mov	r0, r3
 800514a:	f7fe fc71 	bl	8003a30 <HAL_DMA_Abort_IT>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d016      	beq.n	8005182 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800515e:	4610      	mov	r0, r2
 8005160:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005162:	e00e      	b.n	8005182 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f000 f855 	bl	8005214 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800516a:	e00a      	b.n	8005182 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f000 f851 	bl	8005214 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005172:	e006      	b.n	8005182 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f000 f84d 	bl	8005214 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005180:	e01d      	b.n	80051be <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005182:	bf00      	nop
    return;
 8005184:	e01b      	b.n	80051be <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800518c:	2b00      	cmp	r3, #0
 800518e:	d008      	beq.n	80051a2 <HAL_UART_IRQHandler+0x1d6>
 8005190:	69bb      	ldr	r3, [r7, #24]
 8005192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005196:	2b00      	cmp	r3, #0
 8005198:	d003      	beq.n	80051a2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f000 f94c 	bl	8005438 <UART_Transmit_IT>
    return;
 80051a0:	e00e      	b.n	80051c0 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d009      	beq.n	80051c0 <HAL_UART_IRQHandler+0x1f4>
 80051ac:	69bb      	ldr	r3, [r7, #24]
 80051ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d004      	beq.n	80051c0 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f000 f98d 	bl	80054d6 <UART_EndTransmit_IT>
    return;
 80051bc:	e000      	b.n	80051c0 <HAL_UART_IRQHandler+0x1f4>
    return;
 80051be:	bf00      	nop
  }
}
 80051c0:	3720      	adds	r7, #32
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}
 80051c6:	bf00      	nop
 80051c8:	08005411 	.word	0x08005411

080051cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b083      	sub	sp, #12
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80051d4:	bf00      	nop
 80051d6:	370c      	adds	r7, #12
 80051d8:	46bd      	mov	sp, r7
 80051da:	bc80      	pop	{r7}
 80051dc:	4770      	bx	lr

080051de <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80051de:	b480      	push	{r7}
 80051e0:	b083      	sub	sp, #12
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80051e6:	bf00      	nop
 80051e8:	370c      	adds	r7, #12
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bc80      	pop	{r7}
 80051ee:	4770      	bx	lr

080051f0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80051f8:	bf00      	nop
 80051fa:	370c      	adds	r7, #12
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bc80      	pop	{r7}
 8005200:	4770      	bx	lr

08005202 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005202:	b480      	push	{r7}
 8005204:	b083      	sub	sp, #12
 8005206:	af00      	add	r7, sp, #0
 8005208:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800520a:	bf00      	nop
 800520c:	370c      	adds	r7, #12
 800520e:	46bd      	mov	sp, r7
 8005210:	bc80      	pop	{r7}
 8005212:	4770      	bx	lr

08005214 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005214:	b480      	push	{r7}
 8005216:	b083      	sub	sp, #12
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800521c:	bf00      	nop
 800521e:	370c      	adds	r7, #12
 8005220:	46bd      	mov	sp, r7
 8005222:	bc80      	pop	{r7}
 8005224:	4770      	bx	lr

08005226 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005226:	b580      	push	{r7, lr}
 8005228:	b084      	sub	sp, #16
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005232:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 0320 	and.w	r3, r3, #32
 800523e:	2b00      	cmp	r3, #0
 8005240:	d113      	bne.n	800526a <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2200      	movs	r2, #0
 8005246:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	695a      	ldr	r2, [r3, #20]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005256:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	68da      	ldr	r2, [r3, #12]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005266:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005268:	e002      	b.n	8005270 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800526a:	68f8      	ldr	r0, [r7, #12]
 800526c:	f7ff ffae 	bl	80051cc <HAL_UART_TxCpltCallback>
}
 8005270:	bf00      	nop
 8005272:	3710      	adds	r7, #16
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}

08005278 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b084      	sub	sp, #16
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005284:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005286:	68f8      	ldr	r0, [r7, #12]
 8005288:	f7ff ffa9 	bl	80051de <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800528c:	bf00      	nop
 800528e:	3710      	adds	r7, #16
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}

08005294 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b084      	sub	sp, #16
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a0:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 0320 	and.w	r3, r3, #32
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d11e      	bne.n	80052ee <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2200      	movs	r2, #0
 80052b4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	68da      	ldr	r2, [r3, #12]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80052c4:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	695a      	ldr	r2, [r3, #20]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f022 0201 	bic.w	r2, r2, #1
 80052d4:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	695a      	ldr	r2, [r3, #20]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052e4:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2220      	movs	r2, #32
 80052ea:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80052ee:	68f8      	ldr	r0, [r7, #12]
 80052f0:	f7ff ff7e 	bl	80051f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80052f4:	bf00      	nop
 80052f6:	3710      	adds	r7, #16
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}

080052fc <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b084      	sub	sp, #16
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005308:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800530a:	68f8      	ldr	r0, [r7, #12]
 800530c:	f7ff ff79 	bl	8005202 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005310:	bf00      	nop
 8005312:	3710      	adds	r7, #16
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}

08005318 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b084      	sub	sp, #16
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005320:	2300      	movs	r3, #0
 8005322:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005328:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	695b      	ldr	r3, [r3, #20]
 8005330:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005334:	2b00      	cmp	r3, #0
 8005336:	bf14      	ite	ne
 8005338:	2301      	movne	r3, #1
 800533a:	2300      	moveq	r3, #0
 800533c:	b2db      	uxtb	r3, r3
 800533e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005346:	b2db      	uxtb	r3, r3
 8005348:	2b21      	cmp	r3, #33	; 0x21
 800534a:	d108      	bne.n	800535e <UART_DMAError+0x46>
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d005      	beq.n	800535e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	2200      	movs	r2, #0
 8005356:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005358:	68b8      	ldr	r0, [r7, #8]
 800535a:	f000 f827 	bl	80053ac <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	695b      	ldr	r3, [r3, #20]
 8005364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005368:	2b00      	cmp	r3, #0
 800536a:	bf14      	ite	ne
 800536c:	2301      	movne	r3, #1
 800536e:	2300      	moveq	r3, #0
 8005370:	b2db      	uxtb	r3, r3
 8005372:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800537a:	b2db      	uxtb	r3, r3
 800537c:	2b22      	cmp	r3, #34	; 0x22
 800537e:	d108      	bne.n	8005392 <UART_DMAError+0x7a>
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d005      	beq.n	8005392 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	2200      	movs	r2, #0
 800538a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800538c:	68b8      	ldr	r0, [r7, #8]
 800538e:	f000 f822 	bl	80053d6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005396:	f043 0210 	orr.w	r2, r3, #16
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800539e:	68b8      	ldr	r0, [r7, #8]
 80053a0:	f7ff ff38 	bl	8005214 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053a4:	bf00      	nop
 80053a6:	3710      	adds	r7, #16
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}

080053ac <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b083      	sub	sp, #12
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	68da      	ldr	r2, [r3, #12]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80053c2:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2220      	movs	r2, #32
 80053c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80053cc:	bf00      	nop
 80053ce:	370c      	adds	r7, #12
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bc80      	pop	{r7}
 80053d4:	4770      	bx	lr

080053d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80053d6:	b480      	push	{r7}
 80053d8:	b083      	sub	sp, #12
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	68da      	ldr	r2, [r3, #12]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80053ec:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	695a      	ldr	r2, [r3, #20]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f022 0201 	bic.w	r2, r2, #1
 80053fc:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2220      	movs	r2, #32
 8005402:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005406:	bf00      	nop
 8005408:	370c      	adds	r7, #12
 800540a:	46bd      	mov	sp, r7
 800540c:	bc80      	pop	{r7}
 800540e:	4770      	bx	lr

08005410 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b084      	sub	sp, #16
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800541c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2200      	movs	r2, #0
 8005422:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2200      	movs	r2, #0
 8005428:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800542a:	68f8      	ldr	r0, [r7, #12]
 800542c:	f7ff fef2 	bl	8005214 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005430:	bf00      	nop
 8005432:	3710      	adds	r7, #16
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}

08005438 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005438:	b480      	push	{r7}
 800543a:	b085      	sub	sp, #20
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005446:	b2db      	uxtb	r3, r3
 8005448:	2b21      	cmp	r3, #33	; 0x21
 800544a:	d13e      	bne.n	80054ca <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005454:	d114      	bne.n	8005480 <UART_Transmit_IT+0x48>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	691b      	ldr	r3, [r3, #16]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d110      	bne.n	8005480 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a1b      	ldr	r3, [r3, #32]
 8005462:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	881b      	ldrh	r3, [r3, #0]
 8005468:	461a      	mov	r2, r3
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005472:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6a1b      	ldr	r3, [r3, #32]
 8005478:	1c9a      	adds	r2, r3, #2
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	621a      	str	r2, [r3, #32]
 800547e:	e008      	b.n	8005492 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6a1b      	ldr	r3, [r3, #32]
 8005484:	1c59      	adds	r1, r3, #1
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	6211      	str	r1, [r2, #32]
 800548a:	781a      	ldrb	r2, [r3, #0]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005496:	b29b      	uxth	r3, r3
 8005498:	3b01      	subs	r3, #1
 800549a:	b29b      	uxth	r3, r3
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	4619      	mov	r1, r3
 80054a0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d10f      	bne.n	80054c6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	68da      	ldr	r2, [r3, #12]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80054b4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	68da      	ldr	r2, [r3, #12]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054c4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80054c6:	2300      	movs	r3, #0
 80054c8:	e000      	b.n	80054cc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80054ca:	2302      	movs	r3, #2
  }
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3714      	adds	r7, #20
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bc80      	pop	{r7}
 80054d4:	4770      	bx	lr

080054d6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80054d6:	b580      	push	{r7, lr}
 80054d8:	b082      	sub	sp, #8
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	68da      	ldr	r2, [r3, #12]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054ec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2220      	movs	r2, #32
 80054f2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f7ff fe68 	bl	80051cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80054fc:	2300      	movs	r3, #0
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3708      	adds	r7, #8
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}

08005506 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005506:	b580      	push	{r7, lr}
 8005508:	b084      	sub	sp, #16
 800550a:	af00      	add	r7, sp, #0
 800550c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005514:	b2db      	uxtb	r3, r3
 8005516:	2b22      	cmp	r3, #34	; 0x22
 8005518:	d170      	bne.n	80055fc <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005522:	d117      	bne.n	8005554 <UART_Receive_IT+0x4e>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	691b      	ldr	r3, [r3, #16]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d113      	bne.n	8005554 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 800552c:	2300      	movs	r3, #0
 800552e:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005534:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	b29b      	uxth	r3, r3
 800553e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005542:	b29a      	uxth	r2, r3
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800554c:	1c9a      	adds	r2, r3, #2
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	629a      	str	r2, [r3, #40]	; 0x28
 8005552:	e026      	b.n	80055a2 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005558:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800555a:	2300      	movs	r3, #0
 800555c:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005566:	d007      	beq.n	8005578 <UART_Receive_IT+0x72>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d10a      	bne.n	8005586 <UART_Receive_IT+0x80>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	691b      	ldr	r3, [r3, #16]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d106      	bne.n	8005586 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	b2da      	uxtb	r2, r3
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	701a      	strb	r2, [r3, #0]
 8005584:	e008      	b.n	8005598 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	b2db      	uxtb	r3, r3
 800558e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005592:	b2da      	uxtb	r2, r3
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800559c:	1c5a      	adds	r2, r3, #1
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	3b01      	subs	r3, #1
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	4619      	mov	r1, r3
 80055b0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d120      	bne.n	80055f8 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	68da      	ldr	r2, [r3, #12]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f022 0220 	bic.w	r2, r2, #32
 80055c4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	68da      	ldr	r2, [r3, #12]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80055d4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	695a      	ldr	r2, [r3, #20]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f022 0201 	bic.w	r2, r2, #1
 80055e4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2220      	movs	r2, #32
 80055ea:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f7ff fdfe 	bl	80051f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80055f4:	2300      	movs	r3, #0
 80055f6:	e002      	b.n	80055fe <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 80055f8:	2300      	movs	r3, #0
 80055fa:	e000      	b.n	80055fe <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 80055fc:	2302      	movs	r3, #2
  }
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3710      	adds	r7, #16
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
	...

08005608 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b084      	sub	sp, #16
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	691b      	ldr	r3, [r3, #16]
 8005616:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	68da      	ldr	r2, [r3, #12]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	430a      	orrs	r2, r1
 8005624:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	689a      	ldr	r2, [r3, #8]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	431a      	orrs	r2, r3
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	695b      	ldr	r3, [r3, #20]
 8005634:	4313      	orrs	r3, r2
 8005636:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005642:	f023 030c 	bic.w	r3, r3, #12
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	6812      	ldr	r2, [r2, #0]
 800564a:	68b9      	ldr	r1, [r7, #8]
 800564c:	430b      	orrs	r3, r1
 800564e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	695b      	ldr	r3, [r3, #20]
 8005656:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	699a      	ldr	r2, [r3, #24]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	430a      	orrs	r2, r1
 8005664:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a2c      	ldr	r2, [pc, #176]	; (800571c <UART_SetConfig+0x114>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d103      	bne.n	8005678 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005670:	f7ff fae4 	bl	8004c3c <HAL_RCC_GetPCLK2Freq>
 8005674:	60f8      	str	r0, [r7, #12]
 8005676:	e002      	b.n	800567e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005678:	f7ff facc 	bl	8004c14 <HAL_RCC_GetPCLK1Freq>
 800567c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800567e:	68fa      	ldr	r2, [r7, #12]
 8005680:	4613      	mov	r3, r2
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	4413      	add	r3, r2
 8005686:	009a      	lsls	r2, r3, #2
 8005688:	441a      	add	r2, r3
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	fbb2 f3f3 	udiv	r3, r2, r3
 8005694:	4a22      	ldr	r2, [pc, #136]	; (8005720 <UART_SetConfig+0x118>)
 8005696:	fba2 2303 	umull	r2, r3, r2, r3
 800569a:	095b      	lsrs	r3, r3, #5
 800569c:	0119      	lsls	r1, r3, #4
 800569e:	68fa      	ldr	r2, [r7, #12]
 80056a0:	4613      	mov	r3, r2
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	4413      	add	r3, r2
 80056a6:	009a      	lsls	r2, r3, #2
 80056a8:	441a      	add	r2, r3
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80056b4:	4b1a      	ldr	r3, [pc, #104]	; (8005720 <UART_SetConfig+0x118>)
 80056b6:	fba3 0302 	umull	r0, r3, r3, r2
 80056ba:	095b      	lsrs	r3, r3, #5
 80056bc:	2064      	movs	r0, #100	; 0x64
 80056be:	fb00 f303 	mul.w	r3, r0, r3
 80056c2:	1ad3      	subs	r3, r2, r3
 80056c4:	011b      	lsls	r3, r3, #4
 80056c6:	3332      	adds	r3, #50	; 0x32
 80056c8:	4a15      	ldr	r2, [pc, #84]	; (8005720 <UART_SetConfig+0x118>)
 80056ca:	fba2 2303 	umull	r2, r3, r2, r3
 80056ce:	095b      	lsrs	r3, r3, #5
 80056d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056d4:	4419      	add	r1, r3
 80056d6:	68fa      	ldr	r2, [r7, #12]
 80056d8:	4613      	mov	r3, r2
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	4413      	add	r3, r2
 80056de:	009a      	lsls	r2, r3, #2
 80056e0:	441a      	add	r2, r3
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80056ec:	4b0c      	ldr	r3, [pc, #48]	; (8005720 <UART_SetConfig+0x118>)
 80056ee:	fba3 0302 	umull	r0, r3, r3, r2
 80056f2:	095b      	lsrs	r3, r3, #5
 80056f4:	2064      	movs	r0, #100	; 0x64
 80056f6:	fb00 f303 	mul.w	r3, r0, r3
 80056fa:	1ad3      	subs	r3, r2, r3
 80056fc:	011b      	lsls	r3, r3, #4
 80056fe:	3332      	adds	r3, #50	; 0x32
 8005700:	4a07      	ldr	r2, [pc, #28]	; (8005720 <UART_SetConfig+0x118>)
 8005702:	fba2 2303 	umull	r2, r3, r2, r3
 8005706:	095b      	lsrs	r3, r3, #5
 8005708:	f003 020f 	and.w	r2, r3, #15
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	440a      	add	r2, r1
 8005712:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005714:	bf00      	nop
 8005716:	3710      	adds	r7, #16
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}
 800571c:	40013800 	.word	0x40013800
 8005720:	51eb851f 	.word	0x51eb851f

08005724 <__errno>:
 8005724:	4b01      	ldr	r3, [pc, #4]	; (800572c <__errno+0x8>)
 8005726:	6818      	ldr	r0, [r3, #0]
 8005728:	4770      	bx	lr
 800572a:	bf00      	nop
 800572c:	20000028 	.word	0x20000028

08005730 <__libc_init_array>:
 8005730:	b570      	push	{r4, r5, r6, lr}
 8005732:	2600      	movs	r6, #0
 8005734:	4d0c      	ldr	r5, [pc, #48]	; (8005768 <__libc_init_array+0x38>)
 8005736:	4c0d      	ldr	r4, [pc, #52]	; (800576c <__libc_init_array+0x3c>)
 8005738:	1b64      	subs	r4, r4, r5
 800573a:	10a4      	asrs	r4, r4, #2
 800573c:	42a6      	cmp	r6, r4
 800573e:	d109      	bne.n	8005754 <__libc_init_array+0x24>
 8005740:	f005 fd68 	bl	800b214 <_init>
 8005744:	2600      	movs	r6, #0
 8005746:	4d0a      	ldr	r5, [pc, #40]	; (8005770 <__libc_init_array+0x40>)
 8005748:	4c0a      	ldr	r4, [pc, #40]	; (8005774 <__libc_init_array+0x44>)
 800574a:	1b64      	subs	r4, r4, r5
 800574c:	10a4      	asrs	r4, r4, #2
 800574e:	42a6      	cmp	r6, r4
 8005750:	d105      	bne.n	800575e <__libc_init_array+0x2e>
 8005752:	bd70      	pop	{r4, r5, r6, pc}
 8005754:	f855 3b04 	ldr.w	r3, [r5], #4
 8005758:	4798      	blx	r3
 800575a:	3601      	adds	r6, #1
 800575c:	e7ee      	b.n	800573c <__libc_init_array+0xc>
 800575e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005762:	4798      	blx	r3
 8005764:	3601      	adds	r6, #1
 8005766:	e7f2      	b.n	800574e <__libc_init_array+0x1e>
 8005768:	0800bb30 	.word	0x0800bb30
 800576c:	0800bb30 	.word	0x0800bb30
 8005770:	0800bb30 	.word	0x0800bb30
 8005774:	0800bb34 	.word	0x0800bb34

08005778 <memset>:
 8005778:	4603      	mov	r3, r0
 800577a:	4402      	add	r2, r0
 800577c:	4293      	cmp	r3, r2
 800577e:	d100      	bne.n	8005782 <memset+0xa>
 8005780:	4770      	bx	lr
 8005782:	f803 1b01 	strb.w	r1, [r3], #1
 8005786:	e7f9      	b.n	800577c <memset+0x4>

08005788 <__cvt>:
 8005788:	2b00      	cmp	r3, #0
 800578a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800578e:	461f      	mov	r7, r3
 8005790:	bfbb      	ittet	lt
 8005792:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005796:	461f      	movlt	r7, r3
 8005798:	2300      	movge	r3, #0
 800579a:	232d      	movlt	r3, #45	; 0x2d
 800579c:	b088      	sub	sp, #32
 800579e:	4614      	mov	r4, r2
 80057a0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80057a2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80057a4:	7013      	strb	r3, [r2, #0]
 80057a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80057a8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80057ac:	f023 0820 	bic.w	r8, r3, #32
 80057b0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80057b4:	d005      	beq.n	80057c2 <__cvt+0x3a>
 80057b6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80057ba:	d100      	bne.n	80057be <__cvt+0x36>
 80057bc:	3501      	adds	r5, #1
 80057be:	2302      	movs	r3, #2
 80057c0:	e000      	b.n	80057c4 <__cvt+0x3c>
 80057c2:	2303      	movs	r3, #3
 80057c4:	aa07      	add	r2, sp, #28
 80057c6:	9204      	str	r2, [sp, #16]
 80057c8:	aa06      	add	r2, sp, #24
 80057ca:	e9cd a202 	strd	sl, r2, [sp, #8]
 80057ce:	e9cd 3500 	strd	r3, r5, [sp]
 80057d2:	4622      	mov	r2, r4
 80057d4:	463b      	mov	r3, r7
 80057d6:	f001 fdc3 	bl	8007360 <_dtoa_r>
 80057da:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80057de:	4606      	mov	r6, r0
 80057e0:	d102      	bne.n	80057e8 <__cvt+0x60>
 80057e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80057e4:	07db      	lsls	r3, r3, #31
 80057e6:	d522      	bpl.n	800582e <__cvt+0xa6>
 80057e8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80057ec:	eb06 0905 	add.w	r9, r6, r5
 80057f0:	d110      	bne.n	8005814 <__cvt+0x8c>
 80057f2:	7833      	ldrb	r3, [r6, #0]
 80057f4:	2b30      	cmp	r3, #48	; 0x30
 80057f6:	d10a      	bne.n	800580e <__cvt+0x86>
 80057f8:	2200      	movs	r2, #0
 80057fa:	2300      	movs	r3, #0
 80057fc:	4620      	mov	r0, r4
 80057fe:	4639      	mov	r1, r7
 8005800:	f7fb f93e 	bl	8000a80 <__aeabi_dcmpeq>
 8005804:	b918      	cbnz	r0, 800580e <__cvt+0x86>
 8005806:	f1c5 0501 	rsb	r5, r5, #1
 800580a:	f8ca 5000 	str.w	r5, [sl]
 800580e:	f8da 3000 	ldr.w	r3, [sl]
 8005812:	4499      	add	r9, r3
 8005814:	2200      	movs	r2, #0
 8005816:	2300      	movs	r3, #0
 8005818:	4620      	mov	r0, r4
 800581a:	4639      	mov	r1, r7
 800581c:	f7fb f930 	bl	8000a80 <__aeabi_dcmpeq>
 8005820:	b108      	cbz	r0, 8005826 <__cvt+0x9e>
 8005822:	f8cd 901c 	str.w	r9, [sp, #28]
 8005826:	2230      	movs	r2, #48	; 0x30
 8005828:	9b07      	ldr	r3, [sp, #28]
 800582a:	454b      	cmp	r3, r9
 800582c:	d307      	bcc.n	800583e <__cvt+0xb6>
 800582e:	4630      	mov	r0, r6
 8005830:	9b07      	ldr	r3, [sp, #28]
 8005832:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005834:	1b9b      	subs	r3, r3, r6
 8005836:	6013      	str	r3, [r2, #0]
 8005838:	b008      	add	sp, #32
 800583a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800583e:	1c59      	adds	r1, r3, #1
 8005840:	9107      	str	r1, [sp, #28]
 8005842:	701a      	strb	r2, [r3, #0]
 8005844:	e7f0      	b.n	8005828 <__cvt+0xa0>

08005846 <__exponent>:
 8005846:	4603      	mov	r3, r0
 8005848:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800584a:	2900      	cmp	r1, #0
 800584c:	f803 2b02 	strb.w	r2, [r3], #2
 8005850:	bfb6      	itet	lt
 8005852:	222d      	movlt	r2, #45	; 0x2d
 8005854:	222b      	movge	r2, #43	; 0x2b
 8005856:	4249      	neglt	r1, r1
 8005858:	2909      	cmp	r1, #9
 800585a:	7042      	strb	r2, [r0, #1]
 800585c:	dd2b      	ble.n	80058b6 <__exponent+0x70>
 800585e:	f10d 0407 	add.w	r4, sp, #7
 8005862:	46a4      	mov	ip, r4
 8005864:	270a      	movs	r7, #10
 8005866:	fb91 f6f7 	sdiv	r6, r1, r7
 800586a:	460a      	mov	r2, r1
 800586c:	46a6      	mov	lr, r4
 800586e:	fb07 1516 	mls	r5, r7, r6, r1
 8005872:	2a63      	cmp	r2, #99	; 0x63
 8005874:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8005878:	4631      	mov	r1, r6
 800587a:	f104 34ff 	add.w	r4, r4, #4294967295
 800587e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005882:	dcf0      	bgt.n	8005866 <__exponent+0x20>
 8005884:	3130      	adds	r1, #48	; 0x30
 8005886:	f1ae 0502 	sub.w	r5, lr, #2
 800588a:	f804 1c01 	strb.w	r1, [r4, #-1]
 800588e:	4629      	mov	r1, r5
 8005890:	1c44      	adds	r4, r0, #1
 8005892:	4561      	cmp	r1, ip
 8005894:	d30a      	bcc.n	80058ac <__exponent+0x66>
 8005896:	f10d 0209 	add.w	r2, sp, #9
 800589a:	eba2 020e 	sub.w	r2, r2, lr
 800589e:	4565      	cmp	r5, ip
 80058a0:	bf88      	it	hi
 80058a2:	2200      	movhi	r2, #0
 80058a4:	4413      	add	r3, r2
 80058a6:	1a18      	subs	r0, r3, r0
 80058a8:	b003      	add	sp, #12
 80058aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058ac:	f811 2b01 	ldrb.w	r2, [r1], #1
 80058b0:	f804 2f01 	strb.w	r2, [r4, #1]!
 80058b4:	e7ed      	b.n	8005892 <__exponent+0x4c>
 80058b6:	2330      	movs	r3, #48	; 0x30
 80058b8:	3130      	adds	r1, #48	; 0x30
 80058ba:	7083      	strb	r3, [r0, #2]
 80058bc:	70c1      	strb	r1, [r0, #3]
 80058be:	1d03      	adds	r3, r0, #4
 80058c0:	e7f1      	b.n	80058a6 <__exponent+0x60>
	...

080058c4 <_printf_float>:
 80058c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058c8:	b091      	sub	sp, #68	; 0x44
 80058ca:	460c      	mov	r4, r1
 80058cc:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80058d0:	4616      	mov	r6, r2
 80058d2:	461f      	mov	r7, r3
 80058d4:	4605      	mov	r5, r0
 80058d6:	f002 fe97 	bl	8008608 <_localeconv_r>
 80058da:	6803      	ldr	r3, [r0, #0]
 80058dc:	4618      	mov	r0, r3
 80058de:	9309      	str	r3, [sp, #36]	; 0x24
 80058e0:	f7fa fca2 	bl	8000228 <strlen>
 80058e4:	2300      	movs	r3, #0
 80058e6:	930e      	str	r3, [sp, #56]	; 0x38
 80058e8:	f8d8 3000 	ldr.w	r3, [r8]
 80058ec:	900a      	str	r0, [sp, #40]	; 0x28
 80058ee:	3307      	adds	r3, #7
 80058f0:	f023 0307 	bic.w	r3, r3, #7
 80058f4:	f103 0208 	add.w	r2, r3, #8
 80058f8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80058fc:	f8d4 b000 	ldr.w	fp, [r4]
 8005900:	f8c8 2000 	str.w	r2, [r8]
 8005904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005908:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800590c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8005910:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005914:	930b      	str	r3, [sp, #44]	; 0x2c
 8005916:	f04f 32ff 	mov.w	r2, #4294967295
 800591a:	4640      	mov	r0, r8
 800591c:	4b9c      	ldr	r3, [pc, #624]	; (8005b90 <_printf_float+0x2cc>)
 800591e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005920:	f7fb f8e0 	bl	8000ae4 <__aeabi_dcmpun>
 8005924:	bb70      	cbnz	r0, 8005984 <_printf_float+0xc0>
 8005926:	f04f 32ff 	mov.w	r2, #4294967295
 800592a:	4640      	mov	r0, r8
 800592c:	4b98      	ldr	r3, [pc, #608]	; (8005b90 <_printf_float+0x2cc>)
 800592e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005930:	f7fb f8ba 	bl	8000aa8 <__aeabi_dcmple>
 8005934:	bb30      	cbnz	r0, 8005984 <_printf_float+0xc0>
 8005936:	2200      	movs	r2, #0
 8005938:	2300      	movs	r3, #0
 800593a:	4640      	mov	r0, r8
 800593c:	4651      	mov	r1, sl
 800593e:	f7fb f8a9 	bl	8000a94 <__aeabi_dcmplt>
 8005942:	b110      	cbz	r0, 800594a <_printf_float+0x86>
 8005944:	232d      	movs	r3, #45	; 0x2d
 8005946:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800594a:	4b92      	ldr	r3, [pc, #584]	; (8005b94 <_printf_float+0x2d0>)
 800594c:	4892      	ldr	r0, [pc, #584]	; (8005b98 <_printf_float+0x2d4>)
 800594e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005952:	bf94      	ite	ls
 8005954:	4698      	movls	r8, r3
 8005956:	4680      	movhi	r8, r0
 8005958:	2303      	movs	r3, #3
 800595a:	f04f 0a00 	mov.w	sl, #0
 800595e:	6123      	str	r3, [r4, #16]
 8005960:	f02b 0304 	bic.w	r3, fp, #4
 8005964:	6023      	str	r3, [r4, #0]
 8005966:	4633      	mov	r3, r6
 8005968:	4621      	mov	r1, r4
 800596a:	4628      	mov	r0, r5
 800596c:	9700      	str	r7, [sp, #0]
 800596e:	aa0f      	add	r2, sp, #60	; 0x3c
 8005970:	f000 f9d4 	bl	8005d1c <_printf_common>
 8005974:	3001      	adds	r0, #1
 8005976:	f040 8090 	bne.w	8005a9a <_printf_float+0x1d6>
 800597a:	f04f 30ff 	mov.w	r0, #4294967295
 800597e:	b011      	add	sp, #68	; 0x44
 8005980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005984:	4642      	mov	r2, r8
 8005986:	4653      	mov	r3, sl
 8005988:	4640      	mov	r0, r8
 800598a:	4651      	mov	r1, sl
 800598c:	f7fb f8aa 	bl	8000ae4 <__aeabi_dcmpun>
 8005990:	b148      	cbz	r0, 80059a6 <_printf_float+0xe2>
 8005992:	f1ba 0f00 	cmp.w	sl, #0
 8005996:	bfb8      	it	lt
 8005998:	232d      	movlt	r3, #45	; 0x2d
 800599a:	4880      	ldr	r0, [pc, #512]	; (8005b9c <_printf_float+0x2d8>)
 800599c:	bfb8      	it	lt
 800599e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80059a2:	4b7f      	ldr	r3, [pc, #508]	; (8005ba0 <_printf_float+0x2dc>)
 80059a4:	e7d3      	b.n	800594e <_printf_float+0x8a>
 80059a6:	6863      	ldr	r3, [r4, #4]
 80059a8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80059ac:	1c5a      	adds	r2, r3, #1
 80059ae:	d142      	bne.n	8005a36 <_printf_float+0x172>
 80059b0:	2306      	movs	r3, #6
 80059b2:	6063      	str	r3, [r4, #4]
 80059b4:	2200      	movs	r2, #0
 80059b6:	9206      	str	r2, [sp, #24]
 80059b8:	aa0e      	add	r2, sp, #56	; 0x38
 80059ba:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80059be:	aa0d      	add	r2, sp, #52	; 0x34
 80059c0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80059c4:	9203      	str	r2, [sp, #12]
 80059c6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80059ca:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80059ce:	6023      	str	r3, [r4, #0]
 80059d0:	6863      	ldr	r3, [r4, #4]
 80059d2:	4642      	mov	r2, r8
 80059d4:	9300      	str	r3, [sp, #0]
 80059d6:	4628      	mov	r0, r5
 80059d8:	4653      	mov	r3, sl
 80059da:	910b      	str	r1, [sp, #44]	; 0x2c
 80059dc:	f7ff fed4 	bl	8005788 <__cvt>
 80059e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80059e2:	4680      	mov	r8, r0
 80059e4:	2947      	cmp	r1, #71	; 0x47
 80059e6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80059e8:	d108      	bne.n	80059fc <_printf_float+0x138>
 80059ea:	1cc8      	adds	r0, r1, #3
 80059ec:	db02      	blt.n	80059f4 <_printf_float+0x130>
 80059ee:	6863      	ldr	r3, [r4, #4]
 80059f0:	4299      	cmp	r1, r3
 80059f2:	dd40      	ble.n	8005a76 <_printf_float+0x1b2>
 80059f4:	f1a9 0902 	sub.w	r9, r9, #2
 80059f8:	fa5f f989 	uxtb.w	r9, r9
 80059fc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005a00:	d81f      	bhi.n	8005a42 <_printf_float+0x17e>
 8005a02:	464a      	mov	r2, r9
 8005a04:	3901      	subs	r1, #1
 8005a06:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005a0a:	910d      	str	r1, [sp, #52]	; 0x34
 8005a0c:	f7ff ff1b 	bl	8005846 <__exponent>
 8005a10:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005a12:	4682      	mov	sl, r0
 8005a14:	1813      	adds	r3, r2, r0
 8005a16:	2a01      	cmp	r2, #1
 8005a18:	6123      	str	r3, [r4, #16]
 8005a1a:	dc02      	bgt.n	8005a22 <_printf_float+0x15e>
 8005a1c:	6822      	ldr	r2, [r4, #0]
 8005a1e:	07d2      	lsls	r2, r2, #31
 8005a20:	d501      	bpl.n	8005a26 <_printf_float+0x162>
 8005a22:	3301      	adds	r3, #1
 8005a24:	6123      	str	r3, [r4, #16]
 8005a26:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d09b      	beq.n	8005966 <_printf_float+0xa2>
 8005a2e:	232d      	movs	r3, #45	; 0x2d
 8005a30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a34:	e797      	b.n	8005966 <_printf_float+0xa2>
 8005a36:	2947      	cmp	r1, #71	; 0x47
 8005a38:	d1bc      	bne.n	80059b4 <_printf_float+0xf0>
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d1ba      	bne.n	80059b4 <_printf_float+0xf0>
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e7b7      	b.n	80059b2 <_printf_float+0xee>
 8005a42:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005a46:	d118      	bne.n	8005a7a <_printf_float+0x1b6>
 8005a48:	2900      	cmp	r1, #0
 8005a4a:	6863      	ldr	r3, [r4, #4]
 8005a4c:	dd0b      	ble.n	8005a66 <_printf_float+0x1a2>
 8005a4e:	6121      	str	r1, [r4, #16]
 8005a50:	b913      	cbnz	r3, 8005a58 <_printf_float+0x194>
 8005a52:	6822      	ldr	r2, [r4, #0]
 8005a54:	07d0      	lsls	r0, r2, #31
 8005a56:	d502      	bpl.n	8005a5e <_printf_float+0x19a>
 8005a58:	3301      	adds	r3, #1
 8005a5a:	440b      	add	r3, r1
 8005a5c:	6123      	str	r3, [r4, #16]
 8005a5e:	f04f 0a00 	mov.w	sl, #0
 8005a62:	65a1      	str	r1, [r4, #88]	; 0x58
 8005a64:	e7df      	b.n	8005a26 <_printf_float+0x162>
 8005a66:	b913      	cbnz	r3, 8005a6e <_printf_float+0x1aa>
 8005a68:	6822      	ldr	r2, [r4, #0]
 8005a6a:	07d2      	lsls	r2, r2, #31
 8005a6c:	d501      	bpl.n	8005a72 <_printf_float+0x1ae>
 8005a6e:	3302      	adds	r3, #2
 8005a70:	e7f4      	b.n	8005a5c <_printf_float+0x198>
 8005a72:	2301      	movs	r3, #1
 8005a74:	e7f2      	b.n	8005a5c <_printf_float+0x198>
 8005a76:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005a7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a7c:	4299      	cmp	r1, r3
 8005a7e:	db05      	blt.n	8005a8c <_printf_float+0x1c8>
 8005a80:	6823      	ldr	r3, [r4, #0]
 8005a82:	6121      	str	r1, [r4, #16]
 8005a84:	07d8      	lsls	r0, r3, #31
 8005a86:	d5ea      	bpl.n	8005a5e <_printf_float+0x19a>
 8005a88:	1c4b      	adds	r3, r1, #1
 8005a8a:	e7e7      	b.n	8005a5c <_printf_float+0x198>
 8005a8c:	2900      	cmp	r1, #0
 8005a8e:	bfcc      	ite	gt
 8005a90:	2201      	movgt	r2, #1
 8005a92:	f1c1 0202 	rsble	r2, r1, #2
 8005a96:	4413      	add	r3, r2
 8005a98:	e7e0      	b.n	8005a5c <_printf_float+0x198>
 8005a9a:	6823      	ldr	r3, [r4, #0]
 8005a9c:	055a      	lsls	r2, r3, #21
 8005a9e:	d407      	bmi.n	8005ab0 <_printf_float+0x1ec>
 8005aa0:	6923      	ldr	r3, [r4, #16]
 8005aa2:	4642      	mov	r2, r8
 8005aa4:	4631      	mov	r1, r6
 8005aa6:	4628      	mov	r0, r5
 8005aa8:	47b8      	blx	r7
 8005aaa:	3001      	adds	r0, #1
 8005aac:	d12b      	bne.n	8005b06 <_printf_float+0x242>
 8005aae:	e764      	b.n	800597a <_printf_float+0xb6>
 8005ab0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005ab4:	f240 80dd 	bls.w	8005c72 <_printf_float+0x3ae>
 8005ab8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005abc:	2200      	movs	r2, #0
 8005abe:	2300      	movs	r3, #0
 8005ac0:	f7fa ffde 	bl	8000a80 <__aeabi_dcmpeq>
 8005ac4:	2800      	cmp	r0, #0
 8005ac6:	d033      	beq.n	8005b30 <_printf_float+0x26c>
 8005ac8:	2301      	movs	r3, #1
 8005aca:	4631      	mov	r1, r6
 8005acc:	4628      	mov	r0, r5
 8005ace:	4a35      	ldr	r2, [pc, #212]	; (8005ba4 <_printf_float+0x2e0>)
 8005ad0:	47b8      	blx	r7
 8005ad2:	3001      	adds	r0, #1
 8005ad4:	f43f af51 	beq.w	800597a <_printf_float+0xb6>
 8005ad8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005adc:	429a      	cmp	r2, r3
 8005ade:	db02      	blt.n	8005ae6 <_printf_float+0x222>
 8005ae0:	6823      	ldr	r3, [r4, #0]
 8005ae2:	07d8      	lsls	r0, r3, #31
 8005ae4:	d50f      	bpl.n	8005b06 <_printf_float+0x242>
 8005ae6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005aea:	4631      	mov	r1, r6
 8005aec:	4628      	mov	r0, r5
 8005aee:	47b8      	blx	r7
 8005af0:	3001      	adds	r0, #1
 8005af2:	f43f af42 	beq.w	800597a <_printf_float+0xb6>
 8005af6:	f04f 0800 	mov.w	r8, #0
 8005afa:	f104 091a 	add.w	r9, r4, #26
 8005afe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b00:	3b01      	subs	r3, #1
 8005b02:	4543      	cmp	r3, r8
 8005b04:	dc09      	bgt.n	8005b1a <_printf_float+0x256>
 8005b06:	6823      	ldr	r3, [r4, #0]
 8005b08:	079b      	lsls	r3, r3, #30
 8005b0a:	f100 8102 	bmi.w	8005d12 <_printf_float+0x44e>
 8005b0e:	68e0      	ldr	r0, [r4, #12]
 8005b10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005b12:	4298      	cmp	r0, r3
 8005b14:	bfb8      	it	lt
 8005b16:	4618      	movlt	r0, r3
 8005b18:	e731      	b.n	800597e <_printf_float+0xba>
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	464a      	mov	r2, r9
 8005b1e:	4631      	mov	r1, r6
 8005b20:	4628      	mov	r0, r5
 8005b22:	47b8      	blx	r7
 8005b24:	3001      	adds	r0, #1
 8005b26:	f43f af28 	beq.w	800597a <_printf_float+0xb6>
 8005b2a:	f108 0801 	add.w	r8, r8, #1
 8005b2e:	e7e6      	b.n	8005afe <_printf_float+0x23a>
 8005b30:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	dc38      	bgt.n	8005ba8 <_printf_float+0x2e4>
 8005b36:	2301      	movs	r3, #1
 8005b38:	4631      	mov	r1, r6
 8005b3a:	4628      	mov	r0, r5
 8005b3c:	4a19      	ldr	r2, [pc, #100]	; (8005ba4 <_printf_float+0x2e0>)
 8005b3e:	47b8      	blx	r7
 8005b40:	3001      	adds	r0, #1
 8005b42:	f43f af1a 	beq.w	800597a <_printf_float+0xb6>
 8005b46:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	d102      	bne.n	8005b54 <_printf_float+0x290>
 8005b4e:	6823      	ldr	r3, [r4, #0]
 8005b50:	07d9      	lsls	r1, r3, #31
 8005b52:	d5d8      	bpl.n	8005b06 <_printf_float+0x242>
 8005b54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b58:	4631      	mov	r1, r6
 8005b5a:	4628      	mov	r0, r5
 8005b5c:	47b8      	blx	r7
 8005b5e:	3001      	adds	r0, #1
 8005b60:	f43f af0b 	beq.w	800597a <_printf_float+0xb6>
 8005b64:	f04f 0900 	mov.w	r9, #0
 8005b68:	f104 0a1a 	add.w	sl, r4, #26
 8005b6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b6e:	425b      	negs	r3, r3
 8005b70:	454b      	cmp	r3, r9
 8005b72:	dc01      	bgt.n	8005b78 <_printf_float+0x2b4>
 8005b74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b76:	e794      	b.n	8005aa2 <_printf_float+0x1de>
 8005b78:	2301      	movs	r3, #1
 8005b7a:	4652      	mov	r2, sl
 8005b7c:	4631      	mov	r1, r6
 8005b7e:	4628      	mov	r0, r5
 8005b80:	47b8      	blx	r7
 8005b82:	3001      	adds	r0, #1
 8005b84:	f43f aef9 	beq.w	800597a <_printf_float+0xb6>
 8005b88:	f109 0901 	add.w	r9, r9, #1
 8005b8c:	e7ee      	b.n	8005b6c <_printf_float+0x2a8>
 8005b8e:	bf00      	nop
 8005b90:	7fefffff 	.word	0x7fefffff
 8005b94:	0800b4a0 	.word	0x0800b4a0
 8005b98:	0800b4a4 	.word	0x0800b4a4
 8005b9c:	0800b4ac 	.word	0x0800b4ac
 8005ba0:	0800b4a8 	.word	0x0800b4a8
 8005ba4:	0800b4b0 	.word	0x0800b4b0
 8005ba8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005baa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005bac:	429a      	cmp	r2, r3
 8005bae:	bfa8      	it	ge
 8005bb0:	461a      	movge	r2, r3
 8005bb2:	2a00      	cmp	r2, #0
 8005bb4:	4691      	mov	r9, r2
 8005bb6:	dc37      	bgt.n	8005c28 <_printf_float+0x364>
 8005bb8:	f04f 0b00 	mov.w	fp, #0
 8005bbc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005bc0:	f104 021a 	add.w	r2, r4, #26
 8005bc4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005bc8:	ebaa 0309 	sub.w	r3, sl, r9
 8005bcc:	455b      	cmp	r3, fp
 8005bce:	dc33      	bgt.n	8005c38 <_printf_float+0x374>
 8005bd0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	db3b      	blt.n	8005c50 <_printf_float+0x38c>
 8005bd8:	6823      	ldr	r3, [r4, #0]
 8005bda:	07da      	lsls	r2, r3, #31
 8005bdc:	d438      	bmi.n	8005c50 <_printf_float+0x38c>
 8005bde:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005be0:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005be2:	eba2 030a 	sub.w	r3, r2, sl
 8005be6:	eba2 0901 	sub.w	r9, r2, r1
 8005bea:	4599      	cmp	r9, r3
 8005bec:	bfa8      	it	ge
 8005bee:	4699      	movge	r9, r3
 8005bf0:	f1b9 0f00 	cmp.w	r9, #0
 8005bf4:	dc34      	bgt.n	8005c60 <_printf_float+0x39c>
 8005bf6:	f04f 0800 	mov.w	r8, #0
 8005bfa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005bfe:	f104 0a1a 	add.w	sl, r4, #26
 8005c02:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005c06:	1a9b      	subs	r3, r3, r2
 8005c08:	eba3 0309 	sub.w	r3, r3, r9
 8005c0c:	4543      	cmp	r3, r8
 8005c0e:	f77f af7a 	ble.w	8005b06 <_printf_float+0x242>
 8005c12:	2301      	movs	r3, #1
 8005c14:	4652      	mov	r2, sl
 8005c16:	4631      	mov	r1, r6
 8005c18:	4628      	mov	r0, r5
 8005c1a:	47b8      	blx	r7
 8005c1c:	3001      	adds	r0, #1
 8005c1e:	f43f aeac 	beq.w	800597a <_printf_float+0xb6>
 8005c22:	f108 0801 	add.w	r8, r8, #1
 8005c26:	e7ec      	b.n	8005c02 <_printf_float+0x33e>
 8005c28:	4613      	mov	r3, r2
 8005c2a:	4631      	mov	r1, r6
 8005c2c:	4642      	mov	r2, r8
 8005c2e:	4628      	mov	r0, r5
 8005c30:	47b8      	blx	r7
 8005c32:	3001      	adds	r0, #1
 8005c34:	d1c0      	bne.n	8005bb8 <_printf_float+0x2f4>
 8005c36:	e6a0      	b.n	800597a <_printf_float+0xb6>
 8005c38:	2301      	movs	r3, #1
 8005c3a:	4631      	mov	r1, r6
 8005c3c:	4628      	mov	r0, r5
 8005c3e:	920b      	str	r2, [sp, #44]	; 0x2c
 8005c40:	47b8      	blx	r7
 8005c42:	3001      	adds	r0, #1
 8005c44:	f43f ae99 	beq.w	800597a <_printf_float+0xb6>
 8005c48:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005c4a:	f10b 0b01 	add.w	fp, fp, #1
 8005c4e:	e7b9      	b.n	8005bc4 <_printf_float+0x300>
 8005c50:	4631      	mov	r1, r6
 8005c52:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c56:	4628      	mov	r0, r5
 8005c58:	47b8      	blx	r7
 8005c5a:	3001      	adds	r0, #1
 8005c5c:	d1bf      	bne.n	8005bde <_printf_float+0x31a>
 8005c5e:	e68c      	b.n	800597a <_printf_float+0xb6>
 8005c60:	464b      	mov	r3, r9
 8005c62:	4631      	mov	r1, r6
 8005c64:	4628      	mov	r0, r5
 8005c66:	eb08 020a 	add.w	r2, r8, sl
 8005c6a:	47b8      	blx	r7
 8005c6c:	3001      	adds	r0, #1
 8005c6e:	d1c2      	bne.n	8005bf6 <_printf_float+0x332>
 8005c70:	e683      	b.n	800597a <_printf_float+0xb6>
 8005c72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005c74:	2a01      	cmp	r2, #1
 8005c76:	dc01      	bgt.n	8005c7c <_printf_float+0x3b8>
 8005c78:	07db      	lsls	r3, r3, #31
 8005c7a:	d537      	bpl.n	8005cec <_printf_float+0x428>
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	4642      	mov	r2, r8
 8005c80:	4631      	mov	r1, r6
 8005c82:	4628      	mov	r0, r5
 8005c84:	47b8      	blx	r7
 8005c86:	3001      	adds	r0, #1
 8005c88:	f43f ae77 	beq.w	800597a <_printf_float+0xb6>
 8005c8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c90:	4631      	mov	r1, r6
 8005c92:	4628      	mov	r0, r5
 8005c94:	47b8      	blx	r7
 8005c96:	3001      	adds	r0, #1
 8005c98:	f43f ae6f 	beq.w	800597a <_printf_float+0xb6>
 8005c9c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	f7fa feec 	bl	8000a80 <__aeabi_dcmpeq>
 8005ca8:	b9d8      	cbnz	r0, 8005ce2 <_printf_float+0x41e>
 8005caa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005cac:	f108 0201 	add.w	r2, r8, #1
 8005cb0:	3b01      	subs	r3, #1
 8005cb2:	4631      	mov	r1, r6
 8005cb4:	4628      	mov	r0, r5
 8005cb6:	47b8      	blx	r7
 8005cb8:	3001      	adds	r0, #1
 8005cba:	d10e      	bne.n	8005cda <_printf_float+0x416>
 8005cbc:	e65d      	b.n	800597a <_printf_float+0xb6>
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	464a      	mov	r2, r9
 8005cc2:	4631      	mov	r1, r6
 8005cc4:	4628      	mov	r0, r5
 8005cc6:	47b8      	blx	r7
 8005cc8:	3001      	adds	r0, #1
 8005cca:	f43f ae56 	beq.w	800597a <_printf_float+0xb6>
 8005cce:	f108 0801 	add.w	r8, r8, #1
 8005cd2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005cd4:	3b01      	subs	r3, #1
 8005cd6:	4543      	cmp	r3, r8
 8005cd8:	dcf1      	bgt.n	8005cbe <_printf_float+0x3fa>
 8005cda:	4653      	mov	r3, sl
 8005cdc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005ce0:	e6e0      	b.n	8005aa4 <_printf_float+0x1e0>
 8005ce2:	f04f 0800 	mov.w	r8, #0
 8005ce6:	f104 091a 	add.w	r9, r4, #26
 8005cea:	e7f2      	b.n	8005cd2 <_printf_float+0x40e>
 8005cec:	2301      	movs	r3, #1
 8005cee:	4642      	mov	r2, r8
 8005cf0:	e7df      	b.n	8005cb2 <_printf_float+0x3ee>
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	464a      	mov	r2, r9
 8005cf6:	4631      	mov	r1, r6
 8005cf8:	4628      	mov	r0, r5
 8005cfa:	47b8      	blx	r7
 8005cfc:	3001      	adds	r0, #1
 8005cfe:	f43f ae3c 	beq.w	800597a <_printf_float+0xb6>
 8005d02:	f108 0801 	add.w	r8, r8, #1
 8005d06:	68e3      	ldr	r3, [r4, #12]
 8005d08:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005d0a:	1a5b      	subs	r3, r3, r1
 8005d0c:	4543      	cmp	r3, r8
 8005d0e:	dcf0      	bgt.n	8005cf2 <_printf_float+0x42e>
 8005d10:	e6fd      	b.n	8005b0e <_printf_float+0x24a>
 8005d12:	f04f 0800 	mov.w	r8, #0
 8005d16:	f104 0919 	add.w	r9, r4, #25
 8005d1a:	e7f4      	b.n	8005d06 <_printf_float+0x442>

08005d1c <_printf_common>:
 8005d1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d20:	4616      	mov	r6, r2
 8005d22:	4699      	mov	r9, r3
 8005d24:	688a      	ldr	r2, [r1, #8]
 8005d26:	690b      	ldr	r3, [r1, #16]
 8005d28:	4607      	mov	r7, r0
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	bfb8      	it	lt
 8005d2e:	4613      	movlt	r3, r2
 8005d30:	6033      	str	r3, [r6, #0]
 8005d32:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005d36:	460c      	mov	r4, r1
 8005d38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d3c:	b10a      	cbz	r2, 8005d42 <_printf_common+0x26>
 8005d3e:	3301      	adds	r3, #1
 8005d40:	6033      	str	r3, [r6, #0]
 8005d42:	6823      	ldr	r3, [r4, #0]
 8005d44:	0699      	lsls	r1, r3, #26
 8005d46:	bf42      	ittt	mi
 8005d48:	6833      	ldrmi	r3, [r6, #0]
 8005d4a:	3302      	addmi	r3, #2
 8005d4c:	6033      	strmi	r3, [r6, #0]
 8005d4e:	6825      	ldr	r5, [r4, #0]
 8005d50:	f015 0506 	ands.w	r5, r5, #6
 8005d54:	d106      	bne.n	8005d64 <_printf_common+0x48>
 8005d56:	f104 0a19 	add.w	sl, r4, #25
 8005d5a:	68e3      	ldr	r3, [r4, #12]
 8005d5c:	6832      	ldr	r2, [r6, #0]
 8005d5e:	1a9b      	subs	r3, r3, r2
 8005d60:	42ab      	cmp	r3, r5
 8005d62:	dc28      	bgt.n	8005db6 <_printf_common+0x9a>
 8005d64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005d68:	1e13      	subs	r3, r2, #0
 8005d6a:	6822      	ldr	r2, [r4, #0]
 8005d6c:	bf18      	it	ne
 8005d6e:	2301      	movne	r3, #1
 8005d70:	0692      	lsls	r2, r2, #26
 8005d72:	d42d      	bmi.n	8005dd0 <_printf_common+0xb4>
 8005d74:	4649      	mov	r1, r9
 8005d76:	4638      	mov	r0, r7
 8005d78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005d7c:	47c0      	blx	r8
 8005d7e:	3001      	adds	r0, #1
 8005d80:	d020      	beq.n	8005dc4 <_printf_common+0xa8>
 8005d82:	6823      	ldr	r3, [r4, #0]
 8005d84:	68e5      	ldr	r5, [r4, #12]
 8005d86:	f003 0306 	and.w	r3, r3, #6
 8005d8a:	2b04      	cmp	r3, #4
 8005d8c:	bf18      	it	ne
 8005d8e:	2500      	movne	r5, #0
 8005d90:	6832      	ldr	r2, [r6, #0]
 8005d92:	f04f 0600 	mov.w	r6, #0
 8005d96:	68a3      	ldr	r3, [r4, #8]
 8005d98:	bf08      	it	eq
 8005d9a:	1aad      	subeq	r5, r5, r2
 8005d9c:	6922      	ldr	r2, [r4, #16]
 8005d9e:	bf08      	it	eq
 8005da0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005da4:	4293      	cmp	r3, r2
 8005da6:	bfc4      	itt	gt
 8005da8:	1a9b      	subgt	r3, r3, r2
 8005daa:	18ed      	addgt	r5, r5, r3
 8005dac:	341a      	adds	r4, #26
 8005dae:	42b5      	cmp	r5, r6
 8005db0:	d11a      	bne.n	8005de8 <_printf_common+0xcc>
 8005db2:	2000      	movs	r0, #0
 8005db4:	e008      	b.n	8005dc8 <_printf_common+0xac>
 8005db6:	2301      	movs	r3, #1
 8005db8:	4652      	mov	r2, sl
 8005dba:	4649      	mov	r1, r9
 8005dbc:	4638      	mov	r0, r7
 8005dbe:	47c0      	blx	r8
 8005dc0:	3001      	adds	r0, #1
 8005dc2:	d103      	bne.n	8005dcc <_printf_common+0xb0>
 8005dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8005dc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dcc:	3501      	adds	r5, #1
 8005dce:	e7c4      	b.n	8005d5a <_printf_common+0x3e>
 8005dd0:	2030      	movs	r0, #48	; 0x30
 8005dd2:	18e1      	adds	r1, r4, r3
 8005dd4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005dd8:	1c5a      	adds	r2, r3, #1
 8005dda:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005dde:	4422      	add	r2, r4
 8005de0:	3302      	adds	r3, #2
 8005de2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005de6:	e7c5      	b.n	8005d74 <_printf_common+0x58>
 8005de8:	2301      	movs	r3, #1
 8005dea:	4622      	mov	r2, r4
 8005dec:	4649      	mov	r1, r9
 8005dee:	4638      	mov	r0, r7
 8005df0:	47c0      	blx	r8
 8005df2:	3001      	adds	r0, #1
 8005df4:	d0e6      	beq.n	8005dc4 <_printf_common+0xa8>
 8005df6:	3601      	adds	r6, #1
 8005df8:	e7d9      	b.n	8005dae <_printf_common+0x92>
	...

08005dfc <_printf_i>:
 8005dfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e00:	460c      	mov	r4, r1
 8005e02:	7e27      	ldrb	r7, [r4, #24]
 8005e04:	4691      	mov	r9, r2
 8005e06:	2f78      	cmp	r7, #120	; 0x78
 8005e08:	4680      	mov	r8, r0
 8005e0a:	469a      	mov	sl, r3
 8005e0c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005e0e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e12:	d807      	bhi.n	8005e24 <_printf_i+0x28>
 8005e14:	2f62      	cmp	r7, #98	; 0x62
 8005e16:	d80a      	bhi.n	8005e2e <_printf_i+0x32>
 8005e18:	2f00      	cmp	r7, #0
 8005e1a:	f000 80d9 	beq.w	8005fd0 <_printf_i+0x1d4>
 8005e1e:	2f58      	cmp	r7, #88	; 0x58
 8005e20:	f000 80a4 	beq.w	8005f6c <_printf_i+0x170>
 8005e24:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005e28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005e2c:	e03a      	b.n	8005ea4 <_printf_i+0xa8>
 8005e2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005e32:	2b15      	cmp	r3, #21
 8005e34:	d8f6      	bhi.n	8005e24 <_printf_i+0x28>
 8005e36:	a001      	add	r0, pc, #4	; (adr r0, 8005e3c <_printf_i+0x40>)
 8005e38:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005e3c:	08005e95 	.word	0x08005e95
 8005e40:	08005ea9 	.word	0x08005ea9
 8005e44:	08005e25 	.word	0x08005e25
 8005e48:	08005e25 	.word	0x08005e25
 8005e4c:	08005e25 	.word	0x08005e25
 8005e50:	08005e25 	.word	0x08005e25
 8005e54:	08005ea9 	.word	0x08005ea9
 8005e58:	08005e25 	.word	0x08005e25
 8005e5c:	08005e25 	.word	0x08005e25
 8005e60:	08005e25 	.word	0x08005e25
 8005e64:	08005e25 	.word	0x08005e25
 8005e68:	08005fb7 	.word	0x08005fb7
 8005e6c:	08005ed9 	.word	0x08005ed9
 8005e70:	08005f99 	.word	0x08005f99
 8005e74:	08005e25 	.word	0x08005e25
 8005e78:	08005e25 	.word	0x08005e25
 8005e7c:	08005fd9 	.word	0x08005fd9
 8005e80:	08005e25 	.word	0x08005e25
 8005e84:	08005ed9 	.word	0x08005ed9
 8005e88:	08005e25 	.word	0x08005e25
 8005e8c:	08005e25 	.word	0x08005e25
 8005e90:	08005fa1 	.word	0x08005fa1
 8005e94:	680b      	ldr	r3, [r1, #0]
 8005e96:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005e9a:	1d1a      	adds	r2, r3, #4
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	600a      	str	r2, [r1, #0]
 8005ea0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	e0a4      	b.n	8005ff2 <_printf_i+0x1f6>
 8005ea8:	6825      	ldr	r5, [r4, #0]
 8005eaa:	6808      	ldr	r0, [r1, #0]
 8005eac:	062e      	lsls	r6, r5, #24
 8005eae:	f100 0304 	add.w	r3, r0, #4
 8005eb2:	d50a      	bpl.n	8005eca <_printf_i+0xce>
 8005eb4:	6805      	ldr	r5, [r0, #0]
 8005eb6:	600b      	str	r3, [r1, #0]
 8005eb8:	2d00      	cmp	r5, #0
 8005eba:	da03      	bge.n	8005ec4 <_printf_i+0xc8>
 8005ebc:	232d      	movs	r3, #45	; 0x2d
 8005ebe:	426d      	negs	r5, r5
 8005ec0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ec4:	230a      	movs	r3, #10
 8005ec6:	485e      	ldr	r0, [pc, #376]	; (8006040 <_printf_i+0x244>)
 8005ec8:	e019      	b.n	8005efe <_printf_i+0x102>
 8005eca:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005ece:	6805      	ldr	r5, [r0, #0]
 8005ed0:	600b      	str	r3, [r1, #0]
 8005ed2:	bf18      	it	ne
 8005ed4:	b22d      	sxthne	r5, r5
 8005ed6:	e7ef      	b.n	8005eb8 <_printf_i+0xbc>
 8005ed8:	680b      	ldr	r3, [r1, #0]
 8005eda:	6825      	ldr	r5, [r4, #0]
 8005edc:	1d18      	adds	r0, r3, #4
 8005ede:	6008      	str	r0, [r1, #0]
 8005ee0:	0628      	lsls	r0, r5, #24
 8005ee2:	d501      	bpl.n	8005ee8 <_printf_i+0xec>
 8005ee4:	681d      	ldr	r5, [r3, #0]
 8005ee6:	e002      	b.n	8005eee <_printf_i+0xf2>
 8005ee8:	0669      	lsls	r1, r5, #25
 8005eea:	d5fb      	bpl.n	8005ee4 <_printf_i+0xe8>
 8005eec:	881d      	ldrh	r5, [r3, #0]
 8005eee:	2f6f      	cmp	r7, #111	; 0x6f
 8005ef0:	bf0c      	ite	eq
 8005ef2:	2308      	moveq	r3, #8
 8005ef4:	230a      	movne	r3, #10
 8005ef6:	4852      	ldr	r0, [pc, #328]	; (8006040 <_printf_i+0x244>)
 8005ef8:	2100      	movs	r1, #0
 8005efa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005efe:	6866      	ldr	r6, [r4, #4]
 8005f00:	2e00      	cmp	r6, #0
 8005f02:	bfa8      	it	ge
 8005f04:	6821      	ldrge	r1, [r4, #0]
 8005f06:	60a6      	str	r6, [r4, #8]
 8005f08:	bfa4      	itt	ge
 8005f0a:	f021 0104 	bicge.w	r1, r1, #4
 8005f0e:	6021      	strge	r1, [r4, #0]
 8005f10:	b90d      	cbnz	r5, 8005f16 <_printf_i+0x11a>
 8005f12:	2e00      	cmp	r6, #0
 8005f14:	d04d      	beq.n	8005fb2 <_printf_i+0x1b6>
 8005f16:	4616      	mov	r6, r2
 8005f18:	fbb5 f1f3 	udiv	r1, r5, r3
 8005f1c:	fb03 5711 	mls	r7, r3, r1, r5
 8005f20:	5dc7      	ldrb	r7, [r0, r7]
 8005f22:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005f26:	462f      	mov	r7, r5
 8005f28:	42bb      	cmp	r3, r7
 8005f2a:	460d      	mov	r5, r1
 8005f2c:	d9f4      	bls.n	8005f18 <_printf_i+0x11c>
 8005f2e:	2b08      	cmp	r3, #8
 8005f30:	d10b      	bne.n	8005f4a <_printf_i+0x14e>
 8005f32:	6823      	ldr	r3, [r4, #0]
 8005f34:	07df      	lsls	r7, r3, #31
 8005f36:	d508      	bpl.n	8005f4a <_printf_i+0x14e>
 8005f38:	6923      	ldr	r3, [r4, #16]
 8005f3a:	6861      	ldr	r1, [r4, #4]
 8005f3c:	4299      	cmp	r1, r3
 8005f3e:	bfde      	ittt	le
 8005f40:	2330      	movle	r3, #48	; 0x30
 8005f42:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005f46:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005f4a:	1b92      	subs	r2, r2, r6
 8005f4c:	6122      	str	r2, [r4, #16]
 8005f4e:	464b      	mov	r3, r9
 8005f50:	4621      	mov	r1, r4
 8005f52:	4640      	mov	r0, r8
 8005f54:	f8cd a000 	str.w	sl, [sp]
 8005f58:	aa03      	add	r2, sp, #12
 8005f5a:	f7ff fedf 	bl	8005d1c <_printf_common>
 8005f5e:	3001      	adds	r0, #1
 8005f60:	d14c      	bne.n	8005ffc <_printf_i+0x200>
 8005f62:	f04f 30ff 	mov.w	r0, #4294967295
 8005f66:	b004      	add	sp, #16
 8005f68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f6c:	4834      	ldr	r0, [pc, #208]	; (8006040 <_printf_i+0x244>)
 8005f6e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005f72:	680e      	ldr	r6, [r1, #0]
 8005f74:	6823      	ldr	r3, [r4, #0]
 8005f76:	f856 5b04 	ldr.w	r5, [r6], #4
 8005f7a:	061f      	lsls	r7, r3, #24
 8005f7c:	600e      	str	r6, [r1, #0]
 8005f7e:	d514      	bpl.n	8005faa <_printf_i+0x1ae>
 8005f80:	07d9      	lsls	r1, r3, #31
 8005f82:	bf44      	itt	mi
 8005f84:	f043 0320 	orrmi.w	r3, r3, #32
 8005f88:	6023      	strmi	r3, [r4, #0]
 8005f8a:	b91d      	cbnz	r5, 8005f94 <_printf_i+0x198>
 8005f8c:	6823      	ldr	r3, [r4, #0]
 8005f8e:	f023 0320 	bic.w	r3, r3, #32
 8005f92:	6023      	str	r3, [r4, #0]
 8005f94:	2310      	movs	r3, #16
 8005f96:	e7af      	b.n	8005ef8 <_printf_i+0xfc>
 8005f98:	6823      	ldr	r3, [r4, #0]
 8005f9a:	f043 0320 	orr.w	r3, r3, #32
 8005f9e:	6023      	str	r3, [r4, #0]
 8005fa0:	2378      	movs	r3, #120	; 0x78
 8005fa2:	4828      	ldr	r0, [pc, #160]	; (8006044 <_printf_i+0x248>)
 8005fa4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005fa8:	e7e3      	b.n	8005f72 <_printf_i+0x176>
 8005faa:	065e      	lsls	r6, r3, #25
 8005fac:	bf48      	it	mi
 8005fae:	b2ad      	uxthmi	r5, r5
 8005fb0:	e7e6      	b.n	8005f80 <_printf_i+0x184>
 8005fb2:	4616      	mov	r6, r2
 8005fb4:	e7bb      	b.n	8005f2e <_printf_i+0x132>
 8005fb6:	680b      	ldr	r3, [r1, #0]
 8005fb8:	6826      	ldr	r6, [r4, #0]
 8005fba:	1d1d      	adds	r5, r3, #4
 8005fbc:	6960      	ldr	r0, [r4, #20]
 8005fbe:	600d      	str	r5, [r1, #0]
 8005fc0:	0635      	lsls	r5, r6, #24
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	d501      	bpl.n	8005fca <_printf_i+0x1ce>
 8005fc6:	6018      	str	r0, [r3, #0]
 8005fc8:	e002      	b.n	8005fd0 <_printf_i+0x1d4>
 8005fca:	0671      	lsls	r1, r6, #25
 8005fcc:	d5fb      	bpl.n	8005fc6 <_printf_i+0x1ca>
 8005fce:	8018      	strh	r0, [r3, #0]
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	4616      	mov	r6, r2
 8005fd4:	6123      	str	r3, [r4, #16]
 8005fd6:	e7ba      	b.n	8005f4e <_printf_i+0x152>
 8005fd8:	680b      	ldr	r3, [r1, #0]
 8005fda:	1d1a      	adds	r2, r3, #4
 8005fdc:	600a      	str	r2, [r1, #0]
 8005fde:	681e      	ldr	r6, [r3, #0]
 8005fe0:	2100      	movs	r1, #0
 8005fe2:	4630      	mov	r0, r6
 8005fe4:	6862      	ldr	r2, [r4, #4]
 8005fe6:	f002 fb2d 	bl	8008644 <memchr>
 8005fea:	b108      	cbz	r0, 8005ff0 <_printf_i+0x1f4>
 8005fec:	1b80      	subs	r0, r0, r6
 8005fee:	6060      	str	r0, [r4, #4]
 8005ff0:	6863      	ldr	r3, [r4, #4]
 8005ff2:	6123      	str	r3, [r4, #16]
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ffa:	e7a8      	b.n	8005f4e <_printf_i+0x152>
 8005ffc:	4632      	mov	r2, r6
 8005ffe:	4649      	mov	r1, r9
 8006000:	4640      	mov	r0, r8
 8006002:	6923      	ldr	r3, [r4, #16]
 8006004:	47d0      	blx	sl
 8006006:	3001      	adds	r0, #1
 8006008:	d0ab      	beq.n	8005f62 <_printf_i+0x166>
 800600a:	6823      	ldr	r3, [r4, #0]
 800600c:	079b      	lsls	r3, r3, #30
 800600e:	d413      	bmi.n	8006038 <_printf_i+0x23c>
 8006010:	68e0      	ldr	r0, [r4, #12]
 8006012:	9b03      	ldr	r3, [sp, #12]
 8006014:	4298      	cmp	r0, r3
 8006016:	bfb8      	it	lt
 8006018:	4618      	movlt	r0, r3
 800601a:	e7a4      	b.n	8005f66 <_printf_i+0x16a>
 800601c:	2301      	movs	r3, #1
 800601e:	4632      	mov	r2, r6
 8006020:	4649      	mov	r1, r9
 8006022:	4640      	mov	r0, r8
 8006024:	47d0      	blx	sl
 8006026:	3001      	adds	r0, #1
 8006028:	d09b      	beq.n	8005f62 <_printf_i+0x166>
 800602a:	3501      	adds	r5, #1
 800602c:	68e3      	ldr	r3, [r4, #12]
 800602e:	9903      	ldr	r1, [sp, #12]
 8006030:	1a5b      	subs	r3, r3, r1
 8006032:	42ab      	cmp	r3, r5
 8006034:	dcf2      	bgt.n	800601c <_printf_i+0x220>
 8006036:	e7eb      	b.n	8006010 <_printf_i+0x214>
 8006038:	2500      	movs	r5, #0
 800603a:	f104 0619 	add.w	r6, r4, #25
 800603e:	e7f5      	b.n	800602c <_printf_i+0x230>
 8006040:	0800b4b2 	.word	0x0800b4b2
 8006044:	0800b4c3 	.word	0x0800b4c3

08006048 <_scanf_float>:
 8006048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800604c:	b087      	sub	sp, #28
 800604e:	9303      	str	r3, [sp, #12]
 8006050:	688b      	ldr	r3, [r1, #8]
 8006052:	4617      	mov	r7, r2
 8006054:	1e5a      	subs	r2, r3, #1
 8006056:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800605a:	bf85      	ittet	hi
 800605c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006060:	195b      	addhi	r3, r3, r5
 8006062:	2300      	movls	r3, #0
 8006064:	9302      	strhi	r3, [sp, #8]
 8006066:	bf88      	it	hi
 8006068:	f240 135d 	movwhi	r3, #349	; 0x15d
 800606c:	468b      	mov	fp, r1
 800606e:	f04f 0500 	mov.w	r5, #0
 8006072:	bf8c      	ite	hi
 8006074:	608b      	strhi	r3, [r1, #8]
 8006076:	9302      	strls	r3, [sp, #8]
 8006078:	680b      	ldr	r3, [r1, #0]
 800607a:	4680      	mov	r8, r0
 800607c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006080:	f84b 3b1c 	str.w	r3, [fp], #28
 8006084:	460c      	mov	r4, r1
 8006086:	465e      	mov	r6, fp
 8006088:	46aa      	mov	sl, r5
 800608a:	46a9      	mov	r9, r5
 800608c:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006090:	9501      	str	r5, [sp, #4]
 8006092:	68a2      	ldr	r2, [r4, #8]
 8006094:	b152      	cbz	r2, 80060ac <_scanf_float+0x64>
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	781b      	ldrb	r3, [r3, #0]
 800609a:	2b4e      	cmp	r3, #78	; 0x4e
 800609c:	d864      	bhi.n	8006168 <_scanf_float+0x120>
 800609e:	2b40      	cmp	r3, #64	; 0x40
 80060a0:	d83c      	bhi.n	800611c <_scanf_float+0xd4>
 80060a2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80060a6:	b2c8      	uxtb	r0, r1
 80060a8:	280e      	cmp	r0, #14
 80060aa:	d93a      	bls.n	8006122 <_scanf_float+0xda>
 80060ac:	f1b9 0f00 	cmp.w	r9, #0
 80060b0:	d003      	beq.n	80060ba <_scanf_float+0x72>
 80060b2:	6823      	ldr	r3, [r4, #0]
 80060b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060b8:	6023      	str	r3, [r4, #0]
 80060ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80060be:	f1ba 0f01 	cmp.w	sl, #1
 80060c2:	f200 8113 	bhi.w	80062ec <_scanf_float+0x2a4>
 80060c6:	455e      	cmp	r6, fp
 80060c8:	f200 8105 	bhi.w	80062d6 <_scanf_float+0x28e>
 80060cc:	2501      	movs	r5, #1
 80060ce:	4628      	mov	r0, r5
 80060d0:	b007      	add	sp, #28
 80060d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060d6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80060da:	2a0d      	cmp	r2, #13
 80060dc:	d8e6      	bhi.n	80060ac <_scanf_float+0x64>
 80060de:	a101      	add	r1, pc, #4	; (adr r1, 80060e4 <_scanf_float+0x9c>)
 80060e0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80060e4:	08006223 	.word	0x08006223
 80060e8:	080060ad 	.word	0x080060ad
 80060ec:	080060ad 	.word	0x080060ad
 80060f0:	080060ad 	.word	0x080060ad
 80060f4:	08006283 	.word	0x08006283
 80060f8:	0800625b 	.word	0x0800625b
 80060fc:	080060ad 	.word	0x080060ad
 8006100:	080060ad 	.word	0x080060ad
 8006104:	08006231 	.word	0x08006231
 8006108:	080060ad 	.word	0x080060ad
 800610c:	080060ad 	.word	0x080060ad
 8006110:	080060ad 	.word	0x080060ad
 8006114:	080060ad 	.word	0x080060ad
 8006118:	080061e9 	.word	0x080061e9
 800611c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006120:	e7db      	b.n	80060da <_scanf_float+0x92>
 8006122:	290e      	cmp	r1, #14
 8006124:	d8c2      	bhi.n	80060ac <_scanf_float+0x64>
 8006126:	a001      	add	r0, pc, #4	; (adr r0, 800612c <_scanf_float+0xe4>)
 8006128:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800612c:	080061db 	.word	0x080061db
 8006130:	080060ad 	.word	0x080060ad
 8006134:	080061db 	.word	0x080061db
 8006138:	0800626f 	.word	0x0800626f
 800613c:	080060ad 	.word	0x080060ad
 8006140:	08006189 	.word	0x08006189
 8006144:	080061c5 	.word	0x080061c5
 8006148:	080061c5 	.word	0x080061c5
 800614c:	080061c5 	.word	0x080061c5
 8006150:	080061c5 	.word	0x080061c5
 8006154:	080061c5 	.word	0x080061c5
 8006158:	080061c5 	.word	0x080061c5
 800615c:	080061c5 	.word	0x080061c5
 8006160:	080061c5 	.word	0x080061c5
 8006164:	080061c5 	.word	0x080061c5
 8006168:	2b6e      	cmp	r3, #110	; 0x6e
 800616a:	d809      	bhi.n	8006180 <_scanf_float+0x138>
 800616c:	2b60      	cmp	r3, #96	; 0x60
 800616e:	d8b2      	bhi.n	80060d6 <_scanf_float+0x8e>
 8006170:	2b54      	cmp	r3, #84	; 0x54
 8006172:	d077      	beq.n	8006264 <_scanf_float+0x21c>
 8006174:	2b59      	cmp	r3, #89	; 0x59
 8006176:	d199      	bne.n	80060ac <_scanf_float+0x64>
 8006178:	2d07      	cmp	r5, #7
 800617a:	d197      	bne.n	80060ac <_scanf_float+0x64>
 800617c:	2508      	movs	r5, #8
 800617e:	e029      	b.n	80061d4 <_scanf_float+0x18c>
 8006180:	2b74      	cmp	r3, #116	; 0x74
 8006182:	d06f      	beq.n	8006264 <_scanf_float+0x21c>
 8006184:	2b79      	cmp	r3, #121	; 0x79
 8006186:	e7f6      	b.n	8006176 <_scanf_float+0x12e>
 8006188:	6821      	ldr	r1, [r4, #0]
 800618a:	05c8      	lsls	r0, r1, #23
 800618c:	d51a      	bpl.n	80061c4 <_scanf_float+0x17c>
 800618e:	9b02      	ldr	r3, [sp, #8]
 8006190:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006194:	6021      	str	r1, [r4, #0]
 8006196:	f109 0901 	add.w	r9, r9, #1
 800619a:	b11b      	cbz	r3, 80061a4 <_scanf_float+0x15c>
 800619c:	3b01      	subs	r3, #1
 800619e:	3201      	adds	r2, #1
 80061a0:	9302      	str	r3, [sp, #8]
 80061a2:	60a2      	str	r2, [r4, #8]
 80061a4:	68a3      	ldr	r3, [r4, #8]
 80061a6:	3b01      	subs	r3, #1
 80061a8:	60a3      	str	r3, [r4, #8]
 80061aa:	6923      	ldr	r3, [r4, #16]
 80061ac:	3301      	adds	r3, #1
 80061ae:	6123      	str	r3, [r4, #16]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	3b01      	subs	r3, #1
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	607b      	str	r3, [r7, #4]
 80061b8:	f340 8084 	ble.w	80062c4 <_scanf_float+0x27c>
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	3301      	adds	r3, #1
 80061c0:	603b      	str	r3, [r7, #0]
 80061c2:	e766      	b.n	8006092 <_scanf_float+0x4a>
 80061c4:	eb1a 0f05 	cmn.w	sl, r5
 80061c8:	f47f af70 	bne.w	80060ac <_scanf_float+0x64>
 80061cc:	6822      	ldr	r2, [r4, #0]
 80061ce:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80061d2:	6022      	str	r2, [r4, #0]
 80061d4:	f806 3b01 	strb.w	r3, [r6], #1
 80061d8:	e7e4      	b.n	80061a4 <_scanf_float+0x15c>
 80061da:	6822      	ldr	r2, [r4, #0]
 80061dc:	0610      	lsls	r0, r2, #24
 80061de:	f57f af65 	bpl.w	80060ac <_scanf_float+0x64>
 80061e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80061e6:	e7f4      	b.n	80061d2 <_scanf_float+0x18a>
 80061e8:	f1ba 0f00 	cmp.w	sl, #0
 80061ec:	d10e      	bne.n	800620c <_scanf_float+0x1c4>
 80061ee:	f1b9 0f00 	cmp.w	r9, #0
 80061f2:	d10e      	bne.n	8006212 <_scanf_float+0x1ca>
 80061f4:	6822      	ldr	r2, [r4, #0]
 80061f6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80061fa:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80061fe:	d108      	bne.n	8006212 <_scanf_float+0x1ca>
 8006200:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006204:	f04f 0a01 	mov.w	sl, #1
 8006208:	6022      	str	r2, [r4, #0]
 800620a:	e7e3      	b.n	80061d4 <_scanf_float+0x18c>
 800620c:	f1ba 0f02 	cmp.w	sl, #2
 8006210:	d055      	beq.n	80062be <_scanf_float+0x276>
 8006212:	2d01      	cmp	r5, #1
 8006214:	d002      	beq.n	800621c <_scanf_float+0x1d4>
 8006216:	2d04      	cmp	r5, #4
 8006218:	f47f af48 	bne.w	80060ac <_scanf_float+0x64>
 800621c:	3501      	adds	r5, #1
 800621e:	b2ed      	uxtb	r5, r5
 8006220:	e7d8      	b.n	80061d4 <_scanf_float+0x18c>
 8006222:	f1ba 0f01 	cmp.w	sl, #1
 8006226:	f47f af41 	bne.w	80060ac <_scanf_float+0x64>
 800622a:	f04f 0a02 	mov.w	sl, #2
 800622e:	e7d1      	b.n	80061d4 <_scanf_float+0x18c>
 8006230:	b97d      	cbnz	r5, 8006252 <_scanf_float+0x20a>
 8006232:	f1b9 0f00 	cmp.w	r9, #0
 8006236:	f47f af3c 	bne.w	80060b2 <_scanf_float+0x6a>
 800623a:	6822      	ldr	r2, [r4, #0]
 800623c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006240:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006244:	f47f af39 	bne.w	80060ba <_scanf_float+0x72>
 8006248:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800624c:	2501      	movs	r5, #1
 800624e:	6022      	str	r2, [r4, #0]
 8006250:	e7c0      	b.n	80061d4 <_scanf_float+0x18c>
 8006252:	2d03      	cmp	r5, #3
 8006254:	d0e2      	beq.n	800621c <_scanf_float+0x1d4>
 8006256:	2d05      	cmp	r5, #5
 8006258:	e7de      	b.n	8006218 <_scanf_float+0x1d0>
 800625a:	2d02      	cmp	r5, #2
 800625c:	f47f af26 	bne.w	80060ac <_scanf_float+0x64>
 8006260:	2503      	movs	r5, #3
 8006262:	e7b7      	b.n	80061d4 <_scanf_float+0x18c>
 8006264:	2d06      	cmp	r5, #6
 8006266:	f47f af21 	bne.w	80060ac <_scanf_float+0x64>
 800626a:	2507      	movs	r5, #7
 800626c:	e7b2      	b.n	80061d4 <_scanf_float+0x18c>
 800626e:	6822      	ldr	r2, [r4, #0]
 8006270:	0591      	lsls	r1, r2, #22
 8006272:	f57f af1b 	bpl.w	80060ac <_scanf_float+0x64>
 8006276:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800627a:	6022      	str	r2, [r4, #0]
 800627c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006280:	e7a8      	b.n	80061d4 <_scanf_float+0x18c>
 8006282:	6822      	ldr	r2, [r4, #0]
 8006284:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006288:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800628c:	d006      	beq.n	800629c <_scanf_float+0x254>
 800628e:	0550      	lsls	r0, r2, #21
 8006290:	f57f af0c 	bpl.w	80060ac <_scanf_float+0x64>
 8006294:	f1b9 0f00 	cmp.w	r9, #0
 8006298:	f43f af0f 	beq.w	80060ba <_scanf_float+0x72>
 800629c:	0591      	lsls	r1, r2, #22
 800629e:	bf58      	it	pl
 80062a0:	9901      	ldrpl	r1, [sp, #4]
 80062a2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80062a6:	bf58      	it	pl
 80062a8:	eba9 0101 	subpl.w	r1, r9, r1
 80062ac:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80062b0:	f04f 0900 	mov.w	r9, #0
 80062b4:	bf58      	it	pl
 80062b6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80062ba:	6022      	str	r2, [r4, #0]
 80062bc:	e78a      	b.n	80061d4 <_scanf_float+0x18c>
 80062be:	f04f 0a03 	mov.w	sl, #3
 80062c2:	e787      	b.n	80061d4 <_scanf_float+0x18c>
 80062c4:	4639      	mov	r1, r7
 80062c6:	4640      	mov	r0, r8
 80062c8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80062cc:	4798      	blx	r3
 80062ce:	2800      	cmp	r0, #0
 80062d0:	f43f aedf 	beq.w	8006092 <_scanf_float+0x4a>
 80062d4:	e6ea      	b.n	80060ac <_scanf_float+0x64>
 80062d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80062da:	463a      	mov	r2, r7
 80062dc:	4640      	mov	r0, r8
 80062de:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80062e2:	4798      	blx	r3
 80062e4:	6923      	ldr	r3, [r4, #16]
 80062e6:	3b01      	subs	r3, #1
 80062e8:	6123      	str	r3, [r4, #16]
 80062ea:	e6ec      	b.n	80060c6 <_scanf_float+0x7e>
 80062ec:	1e6b      	subs	r3, r5, #1
 80062ee:	2b06      	cmp	r3, #6
 80062f0:	d825      	bhi.n	800633e <_scanf_float+0x2f6>
 80062f2:	2d02      	cmp	r5, #2
 80062f4:	d836      	bhi.n	8006364 <_scanf_float+0x31c>
 80062f6:	455e      	cmp	r6, fp
 80062f8:	f67f aee8 	bls.w	80060cc <_scanf_float+0x84>
 80062fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006300:	463a      	mov	r2, r7
 8006302:	4640      	mov	r0, r8
 8006304:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006308:	4798      	blx	r3
 800630a:	6923      	ldr	r3, [r4, #16]
 800630c:	3b01      	subs	r3, #1
 800630e:	6123      	str	r3, [r4, #16]
 8006310:	e7f1      	b.n	80062f6 <_scanf_float+0x2ae>
 8006312:	9802      	ldr	r0, [sp, #8]
 8006314:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006318:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800631c:	463a      	mov	r2, r7
 800631e:	9002      	str	r0, [sp, #8]
 8006320:	4640      	mov	r0, r8
 8006322:	4798      	blx	r3
 8006324:	6923      	ldr	r3, [r4, #16]
 8006326:	3b01      	subs	r3, #1
 8006328:	6123      	str	r3, [r4, #16]
 800632a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800632e:	fa5f fa8a 	uxtb.w	sl, sl
 8006332:	f1ba 0f02 	cmp.w	sl, #2
 8006336:	d1ec      	bne.n	8006312 <_scanf_float+0x2ca>
 8006338:	3d03      	subs	r5, #3
 800633a:	b2ed      	uxtb	r5, r5
 800633c:	1b76      	subs	r6, r6, r5
 800633e:	6823      	ldr	r3, [r4, #0]
 8006340:	05da      	lsls	r2, r3, #23
 8006342:	d52f      	bpl.n	80063a4 <_scanf_float+0x35c>
 8006344:	055b      	lsls	r3, r3, #21
 8006346:	d510      	bpl.n	800636a <_scanf_float+0x322>
 8006348:	455e      	cmp	r6, fp
 800634a:	f67f aebf 	bls.w	80060cc <_scanf_float+0x84>
 800634e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006352:	463a      	mov	r2, r7
 8006354:	4640      	mov	r0, r8
 8006356:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800635a:	4798      	blx	r3
 800635c:	6923      	ldr	r3, [r4, #16]
 800635e:	3b01      	subs	r3, #1
 8006360:	6123      	str	r3, [r4, #16]
 8006362:	e7f1      	b.n	8006348 <_scanf_float+0x300>
 8006364:	46aa      	mov	sl, r5
 8006366:	9602      	str	r6, [sp, #8]
 8006368:	e7df      	b.n	800632a <_scanf_float+0x2e2>
 800636a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800636e:	6923      	ldr	r3, [r4, #16]
 8006370:	2965      	cmp	r1, #101	; 0x65
 8006372:	f103 33ff 	add.w	r3, r3, #4294967295
 8006376:	f106 35ff 	add.w	r5, r6, #4294967295
 800637a:	6123      	str	r3, [r4, #16]
 800637c:	d00c      	beq.n	8006398 <_scanf_float+0x350>
 800637e:	2945      	cmp	r1, #69	; 0x45
 8006380:	d00a      	beq.n	8006398 <_scanf_float+0x350>
 8006382:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006386:	463a      	mov	r2, r7
 8006388:	4640      	mov	r0, r8
 800638a:	4798      	blx	r3
 800638c:	6923      	ldr	r3, [r4, #16]
 800638e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006392:	3b01      	subs	r3, #1
 8006394:	1eb5      	subs	r5, r6, #2
 8006396:	6123      	str	r3, [r4, #16]
 8006398:	463a      	mov	r2, r7
 800639a:	4640      	mov	r0, r8
 800639c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80063a0:	4798      	blx	r3
 80063a2:	462e      	mov	r6, r5
 80063a4:	6825      	ldr	r5, [r4, #0]
 80063a6:	f015 0510 	ands.w	r5, r5, #16
 80063aa:	d159      	bne.n	8006460 <_scanf_float+0x418>
 80063ac:	7035      	strb	r5, [r6, #0]
 80063ae:	6823      	ldr	r3, [r4, #0]
 80063b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80063b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063b8:	d11c      	bne.n	80063f4 <_scanf_float+0x3ac>
 80063ba:	9b01      	ldr	r3, [sp, #4]
 80063bc:	454b      	cmp	r3, r9
 80063be:	eba3 0209 	sub.w	r2, r3, r9
 80063c2:	d124      	bne.n	800640e <_scanf_float+0x3c6>
 80063c4:	2200      	movs	r2, #0
 80063c6:	4659      	mov	r1, fp
 80063c8:	4640      	mov	r0, r8
 80063ca:	f000 fead 	bl	8007128 <_strtod_r>
 80063ce:	f8d4 c000 	ldr.w	ip, [r4]
 80063d2:	9b03      	ldr	r3, [sp, #12]
 80063d4:	f01c 0f02 	tst.w	ip, #2
 80063d8:	4606      	mov	r6, r0
 80063da:	460f      	mov	r7, r1
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	d021      	beq.n	8006424 <_scanf_float+0x3dc>
 80063e0:	9903      	ldr	r1, [sp, #12]
 80063e2:	1d1a      	adds	r2, r3, #4
 80063e4:	600a      	str	r2, [r1, #0]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	e9c3 6700 	strd	r6, r7, [r3]
 80063ec:	68e3      	ldr	r3, [r4, #12]
 80063ee:	3301      	adds	r3, #1
 80063f0:	60e3      	str	r3, [r4, #12]
 80063f2:	e66c      	b.n	80060ce <_scanf_float+0x86>
 80063f4:	9b04      	ldr	r3, [sp, #16]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d0e4      	beq.n	80063c4 <_scanf_float+0x37c>
 80063fa:	9905      	ldr	r1, [sp, #20]
 80063fc:	230a      	movs	r3, #10
 80063fe:	462a      	mov	r2, r5
 8006400:	4640      	mov	r0, r8
 8006402:	3101      	adds	r1, #1
 8006404:	f000 ff1c 	bl	8007240 <_strtol_r>
 8006408:	9b04      	ldr	r3, [sp, #16]
 800640a:	9e05      	ldr	r6, [sp, #20]
 800640c:	1ac2      	subs	r2, r0, r3
 800640e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006412:	429e      	cmp	r6, r3
 8006414:	bf28      	it	cs
 8006416:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800641a:	4630      	mov	r0, r6
 800641c:	4911      	ldr	r1, [pc, #68]	; (8006464 <_scanf_float+0x41c>)
 800641e:	f000 f829 	bl	8006474 <siprintf>
 8006422:	e7cf      	b.n	80063c4 <_scanf_float+0x37c>
 8006424:	f01c 0f04 	tst.w	ip, #4
 8006428:	f103 0e04 	add.w	lr, r3, #4
 800642c:	d003      	beq.n	8006436 <_scanf_float+0x3ee>
 800642e:	9903      	ldr	r1, [sp, #12]
 8006430:	f8c1 e000 	str.w	lr, [r1]
 8006434:	e7d7      	b.n	80063e6 <_scanf_float+0x39e>
 8006436:	9a03      	ldr	r2, [sp, #12]
 8006438:	f8c2 e000 	str.w	lr, [r2]
 800643c:	f8d3 8000 	ldr.w	r8, [r3]
 8006440:	4602      	mov	r2, r0
 8006442:	460b      	mov	r3, r1
 8006444:	f7fa fb4e 	bl	8000ae4 <__aeabi_dcmpun>
 8006448:	b128      	cbz	r0, 8006456 <_scanf_float+0x40e>
 800644a:	4807      	ldr	r0, [pc, #28]	; (8006468 <_scanf_float+0x420>)
 800644c:	f000 f80e 	bl	800646c <nanf>
 8006450:	f8c8 0000 	str.w	r0, [r8]
 8006454:	e7ca      	b.n	80063ec <_scanf_float+0x3a4>
 8006456:	4630      	mov	r0, r6
 8006458:	4639      	mov	r1, r7
 800645a:	f7fa fba1 	bl	8000ba0 <__aeabi_d2f>
 800645e:	e7f7      	b.n	8006450 <_scanf_float+0x408>
 8006460:	2500      	movs	r5, #0
 8006462:	e634      	b.n	80060ce <_scanf_float+0x86>
 8006464:	0800b4d4 	.word	0x0800b4d4
 8006468:	0800b8f0 	.word	0x0800b8f0

0800646c <nanf>:
 800646c:	4800      	ldr	r0, [pc, #0]	; (8006470 <nanf+0x4>)
 800646e:	4770      	bx	lr
 8006470:	7fc00000 	.word	0x7fc00000

08006474 <siprintf>:
 8006474:	b40e      	push	{r1, r2, r3}
 8006476:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800647a:	b500      	push	{lr}
 800647c:	b09c      	sub	sp, #112	; 0x70
 800647e:	ab1d      	add	r3, sp, #116	; 0x74
 8006480:	9002      	str	r0, [sp, #8]
 8006482:	9006      	str	r0, [sp, #24]
 8006484:	9107      	str	r1, [sp, #28]
 8006486:	9104      	str	r1, [sp, #16]
 8006488:	4808      	ldr	r0, [pc, #32]	; (80064ac <siprintf+0x38>)
 800648a:	4909      	ldr	r1, [pc, #36]	; (80064b0 <siprintf+0x3c>)
 800648c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006490:	9105      	str	r1, [sp, #20]
 8006492:	6800      	ldr	r0, [r0, #0]
 8006494:	a902      	add	r1, sp, #8
 8006496:	9301      	str	r3, [sp, #4]
 8006498:	f002 feb8 	bl	800920c <_svfiprintf_r>
 800649c:	2200      	movs	r2, #0
 800649e:	9b02      	ldr	r3, [sp, #8]
 80064a0:	701a      	strb	r2, [r3, #0]
 80064a2:	b01c      	add	sp, #112	; 0x70
 80064a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80064a8:	b003      	add	sp, #12
 80064aa:	4770      	bx	lr
 80064ac:	20000028 	.word	0x20000028
 80064b0:	ffff0208 	.word	0xffff0208

080064b4 <strchr>:
 80064b4:	4603      	mov	r3, r0
 80064b6:	b2c9      	uxtb	r1, r1
 80064b8:	4618      	mov	r0, r3
 80064ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80064be:	b112      	cbz	r2, 80064c6 <strchr+0x12>
 80064c0:	428a      	cmp	r2, r1
 80064c2:	d1f9      	bne.n	80064b8 <strchr+0x4>
 80064c4:	4770      	bx	lr
 80064c6:	2900      	cmp	r1, #0
 80064c8:	bf18      	it	ne
 80064ca:	2000      	movne	r0, #0
 80064cc:	4770      	bx	lr

080064ce <strstr>:
 80064ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064d0:	780c      	ldrb	r4, [r1, #0]
 80064d2:	b164      	cbz	r4, 80064ee <strstr+0x20>
 80064d4:	4603      	mov	r3, r0
 80064d6:	781a      	ldrb	r2, [r3, #0]
 80064d8:	4618      	mov	r0, r3
 80064da:	1c5e      	adds	r6, r3, #1
 80064dc:	b90a      	cbnz	r2, 80064e2 <strstr+0x14>
 80064de:	4610      	mov	r0, r2
 80064e0:	e005      	b.n	80064ee <strstr+0x20>
 80064e2:	4294      	cmp	r4, r2
 80064e4:	d108      	bne.n	80064f8 <strstr+0x2a>
 80064e6:	460d      	mov	r5, r1
 80064e8:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80064ec:	b902      	cbnz	r2, 80064f0 <strstr+0x22>
 80064ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064f0:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80064f4:	4297      	cmp	r7, r2
 80064f6:	d0f7      	beq.n	80064e8 <strstr+0x1a>
 80064f8:	4633      	mov	r3, r6
 80064fa:	e7ec      	b.n	80064d6 <strstr+0x8>

080064fc <sulp>:
 80064fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006500:	460f      	mov	r7, r1
 8006502:	4690      	mov	r8, r2
 8006504:	f002 fc2a 	bl	8008d5c <__ulp>
 8006508:	4604      	mov	r4, r0
 800650a:	460d      	mov	r5, r1
 800650c:	f1b8 0f00 	cmp.w	r8, #0
 8006510:	d011      	beq.n	8006536 <sulp+0x3a>
 8006512:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8006516:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800651a:	2b00      	cmp	r3, #0
 800651c:	dd0b      	ble.n	8006536 <sulp+0x3a>
 800651e:	2400      	movs	r4, #0
 8006520:	051b      	lsls	r3, r3, #20
 8006522:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006526:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800652a:	4622      	mov	r2, r4
 800652c:	462b      	mov	r3, r5
 800652e:	f7fa f83f 	bl	80005b0 <__aeabi_dmul>
 8006532:	4604      	mov	r4, r0
 8006534:	460d      	mov	r5, r1
 8006536:	4620      	mov	r0, r4
 8006538:	4629      	mov	r1, r5
 800653a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08006540 <_strtod_l>:
 8006540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006544:	469b      	mov	fp, r3
 8006546:	2300      	movs	r3, #0
 8006548:	b0a1      	sub	sp, #132	; 0x84
 800654a:	931c      	str	r3, [sp, #112]	; 0x70
 800654c:	4ba1      	ldr	r3, [pc, #644]	; (80067d4 <_strtod_l+0x294>)
 800654e:	4682      	mov	sl, r0
 8006550:	681f      	ldr	r7, [r3, #0]
 8006552:	460e      	mov	r6, r1
 8006554:	4638      	mov	r0, r7
 8006556:	9217      	str	r2, [sp, #92]	; 0x5c
 8006558:	f7f9 fe66 	bl	8000228 <strlen>
 800655c:	f04f 0800 	mov.w	r8, #0
 8006560:	4604      	mov	r4, r0
 8006562:	f04f 0900 	mov.w	r9, #0
 8006566:	961b      	str	r6, [sp, #108]	; 0x6c
 8006568:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800656a:	781a      	ldrb	r2, [r3, #0]
 800656c:	2a2b      	cmp	r2, #43	; 0x2b
 800656e:	d04c      	beq.n	800660a <_strtod_l+0xca>
 8006570:	d83a      	bhi.n	80065e8 <_strtod_l+0xa8>
 8006572:	2a0d      	cmp	r2, #13
 8006574:	d833      	bhi.n	80065de <_strtod_l+0x9e>
 8006576:	2a08      	cmp	r2, #8
 8006578:	d833      	bhi.n	80065e2 <_strtod_l+0xa2>
 800657a:	2a00      	cmp	r2, #0
 800657c:	d03d      	beq.n	80065fa <_strtod_l+0xba>
 800657e:	2300      	movs	r3, #0
 8006580:	930c      	str	r3, [sp, #48]	; 0x30
 8006582:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8006584:	782b      	ldrb	r3, [r5, #0]
 8006586:	2b30      	cmp	r3, #48	; 0x30
 8006588:	f040 80af 	bne.w	80066ea <_strtod_l+0x1aa>
 800658c:	786b      	ldrb	r3, [r5, #1]
 800658e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006592:	2b58      	cmp	r3, #88	; 0x58
 8006594:	d16c      	bne.n	8006670 <_strtod_l+0x130>
 8006596:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006598:	4650      	mov	r0, sl
 800659a:	9301      	str	r3, [sp, #4]
 800659c:	ab1c      	add	r3, sp, #112	; 0x70
 800659e:	9300      	str	r3, [sp, #0]
 80065a0:	4a8d      	ldr	r2, [pc, #564]	; (80067d8 <_strtod_l+0x298>)
 80065a2:	f8cd b008 	str.w	fp, [sp, #8]
 80065a6:	ab1d      	add	r3, sp, #116	; 0x74
 80065a8:	a91b      	add	r1, sp, #108	; 0x6c
 80065aa:	f001 fd2f 	bl	800800c <__gethex>
 80065ae:	f010 0607 	ands.w	r6, r0, #7
 80065b2:	4604      	mov	r4, r0
 80065b4:	d005      	beq.n	80065c2 <_strtod_l+0x82>
 80065b6:	2e06      	cmp	r6, #6
 80065b8:	d129      	bne.n	800660e <_strtod_l+0xce>
 80065ba:	2300      	movs	r3, #0
 80065bc:	3501      	adds	r5, #1
 80065be:	951b      	str	r5, [sp, #108]	; 0x6c
 80065c0:	930c      	str	r3, [sp, #48]	; 0x30
 80065c2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	f040 8596 	bne.w	80070f6 <_strtod_l+0xbb6>
 80065ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80065cc:	b1d3      	cbz	r3, 8006604 <_strtod_l+0xc4>
 80065ce:	4642      	mov	r2, r8
 80065d0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80065d4:	4610      	mov	r0, r2
 80065d6:	4619      	mov	r1, r3
 80065d8:	b021      	add	sp, #132	; 0x84
 80065da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065de:	2a20      	cmp	r2, #32
 80065e0:	d1cd      	bne.n	800657e <_strtod_l+0x3e>
 80065e2:	3301      	adds	r3, #1
 80065e4:	931b      	str	r3, [sp, #108]	; 0x6c
 80065e6:	e7bf      	b.n	8006568 <_strtod_l+0x28>
 80065e8:	2a2d      	cmp	r2, #45	; 0x2d
 80065ea:	d1c8      	bne.n	800657e <_strtod_l+0x3e>
 80065ec:	2201      	movs	r2, #1
 80065ee:	920c      	str	r2, [sp, #48]	; 0x30
 80065f0:	1c5a      	adds	r2, r3, #1
 80065f2:	921b      	str	r2, [sp, #108]	; 0x6c
 80065f4:	785b      	ldrb	r3, [r3, #1]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d1c3      	bne.n	8006582 <_strtod_l+0x42>
 80065fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80065fc:	961b      	str	r6, [sp, #108]	; 0x6c
 80065fe:	2b00      	cmp	r3, #0
 8006600:	f040 8577 	bne.w	80070f2 <_strtod_l+0xbb2>
 8006604:	4642      	mov	r2, r8
 8006606:	464b      	mov	r3, r9
 8006608:	e7e4      	b.n	80065d4 <_strtod_l+0x94>
 800660a:	2200      	movs	r2, #0
 800660c:	e7ef      	b.n	80065ee <_strtod_l+0xae>
 800660e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006610:	b13a      	cbz	r2, 8006622 <_strtod_l+0xe2>
 8006612:	2135      	movs	r1, #53	; 0x35
 8006614:	a81e      	add	r0, sp, #120	; 0x78
 8006616:	f002 fca5 	bl	8008f64 <__copybits>
 800661a:	4650      	mov	r0, sl
 800661c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800661e:	f002 f86d 	bl	80086fc <_Bfree>
 8006622:	3e01      	subs	r6, #1
 8006624:	2e05      	cmp	r6, #5
 8006626:	d807      	bhi.n	8006638 <_strtod_l+0xf8>
 8006628:	e8df f006 	tbb	[pc, r6]
 800662c:	1d180b0e 	.word	0x1d180b0e
 8006630:	030e      	.short	0x030e
 8006632:	f04f 0900 	mov.w	r9, #0
 8006636:	46c8      	mov	r8, r9
 8006638:	0721      	lsls	r1, r4, #28
 800663a:	d5c2      	bpl.n	80065c2 <_strtod_l+0x82>
 800663c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8006640:	e7bf      	b.n	80065c2 <_strtod_l+0x82>
 8006642:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 8006646:	e7f7      	b.n	8006638 <_strtod_l+0xf8>
 8006648:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800664a:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 800664e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006652:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006656:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800665a:	e7ed      	b.n	8006638 <_strtod_l+0xf8>
 800665c:	f04f 0800 	mov.w	r8, #0
 8006660:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80067dc <_strtod_l+0x29c>
 8006664:	e7e8      	b.n	8006638 <_strtod_l+0xf8>
 8006666:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800666a:	f04f 38ff 	mov.w	r8, #4294967295
 800666e:	e7e3      	b.n	8006638 <_strtod_l+0xf8>
 8006670:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006672:	1c5a      	adds	r2, r3, #1
 8006674:	921b      	str	r2, [sp, #108]	; 0x6c
 8006676:	785b      	ldrb	r3, [r3, #1]
 8006678:	2b30      	cmp	r3, #48	; 0x30
 800667a:	d0f9      	beq.n	8006670 <_strtod_l+0x130>
 800667c:	2b00      	cmp	r3, #0
 800667e:	d0a0      	beq.n	80065c2 <_strtod_l+0x82>
 8006680:	2301      	movs	r3, #1
 8006682:	9307      	str	r3, [sp, #28]
 8006684:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006686:	220a      	movs	r2, #10
 8006688:	9308      	str	r3, [sp, #32]
 800668a:	2300      	movs	r3, #0
 800668c:	469b      	mov	fp, r3
 800668e:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8006692:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8006694:	7805      	ldrb	r5, [r0, #0]
 8006696:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800669a:	b2d9      	uxtb	r1, r3
 800669c:	2909      	cmp	r1, #9
 800669e:	d926      	bls.n	80066ee <_strtod_l+0x1ae>
 80066a0:	4622      	mov	r2, r4
 80066a2:	4639      	mov	r1, r7
 80066a4:	f002 fec8 	bl	8009438 <strncmp>
 80066a8:	2800      	cmp	r0, #0
 80066aa:	d032      	beq.n	8006712 <_strtod_l+0x1d2>
 80066ac:	2000      	movs	r0, #0
 80066ae:	462b      	mov	r3, r5
 80066b0:	465c      	mov	r4, fp
 80066b2:	4602      	mov	r2, r0
 80066b4:	9004      	str	r0, [sp, #16]
 80066b6:	2b65      	cmp	r3, #101	; 0x65
 80066b8:	d001      	beq.n	80066be <_strtod_l+0x17e>
 80066ba:	2b45      	cmp	r3, #69	; 0x45
 80066bc:	d113      	bne.n	80066e6 <_strtod_l+0x1a6>
 80066be:	b91c      	cbnz	r4, 80066c8 <_strtod_l+0x188>
 80066c0:	9b07      	ldr	r3, [sp, #28]
 80066c2:	4303      	orrs	r3, r0
 80066c4:	d099      	beq.n	80065fa <_strtod_l+0xba>
 80066c6:	2400      	movs	r4, #0
 80066c8:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80066ca:	1c73      	adds	r3, r6, #1
 80066cc:	931b      	str	r3, [sp, #108]	; 0x6c
 80066ce:	7873      	ldrb	r3, [r6, #1]
 80066d0:	2b2b      	cmp	r3, #43	; 0x2b
 80066d2:	d078      	beq.n	80067c6 <_strtod_l+0x286>
 80066d4:	2b2d      	cmp	r3, #45	; 0x2d
 80066d6:	d07b      	beq.n	80067d0 <_strtod_l+0x290>
 80066d8:	2700      	movs	r7, #0
 80066da:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80066de:	2909      	cmp	r1, #9
 80066e0:	f240 8082 	bls.w	80067e8 <_strtod_l+0x2a8>
 80066e4:	961b      	str	r6, [sp, #108]	; 0x6c
 80066e6:	2500      	movs	r5, #0
 80066e8:	e09e      	b.n	8006828 <_strtod_l+0x2e8>
 80066ea:	2300      	movs	r3, #0
 80066ec:	e7c9      	b.n	8006682 <_strtod_l+0x142>
 80066ee:	f1bb 0f08 	cmp.w	fp, #8
 80066f2:	bfd5      	itete	le
 80066f4:	9906      	ldrle	r1, [sp, #24]
 80066f6:	9905      	ldrgt	r1, [sp, #20]
 80066f8:	fb02 3301 	mlale	r3, r2, r1, r3
 80066fc:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006700:	f100 0001 	add.w	r0, r0, #1
 8006704:	bfd4      	ite	le
 8006706:	9306      	strle	r3, [sp, #24]
 8006708:	9305      	strgt	r3, [sp, #20]
 800670a:	f10b 0b01 	add.w	fp, fp, #1
 800670e:	901b      	str	r0, [sp, #108]	; 0x6c
 8006710:	e7bf      	b.n	8006692 <_strtod_l+0x152>
 8006712:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006714:	191a      	adds	r2, r3, r4
 8006716:	921b      	str	r2, [sp, #108]	; 0x6c
 8006718:	5d1b      	ldrb	r3, [r3, r4]
 800671a:	f1bb 0f00 	cmp.w	fp, #0
 800671e:	d036      	beq.n	800678e <_strtod_l+0x24e>
 8006720:	465c      	mov	r4, fp
 8006722:	9004      	str	r0, [sp, #16]
 8006724:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8006728:	2a09      	cmp	r2, #9
 800672a:	d912      	bls.n	8006752 <_strtod_l+0x212>
 800672c:	2201      	movs	r2, #1
 800672e:	e7c2      	b.n	80066b6 <_strtod_l+0x176>
 8006730:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006732:	3001      	adds	r0, #1
 8006734:	1c5a      	adds	r2, r3, #1
 8006736:	921b      	str	r2, [sp, #108]	; 0x6c
 8006738:	785b      	ldrb	r3, [r3, #1]
 800673a:	2b30      	cmp	r3, #48	; 0x30
 800673c:	d0f8      	beq.n	8006730 <_strtod_l+0x1f0>
 800673e:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8006742:	2a08      	cmp	r2, #8
 8006744:	f200 84dc 	bhi.w	8007100 <_strtod_l+0xbc0>
 8006748:	9004      	str	r0, [sp, #16]
 800674a:	2000      	movs	r0, #0
 800674c:	4604      	mov	r4, r0
 800674e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006750:	9208      	str	r2, [sp, #32]
 8006752:	3b30      	subs	r3, #48	; 0x30
 8006754:	f100 0201 	add.w	r2, r0, #1
 8006758:	d013      	beq.n	8006782 <_strtod_l+0x242>
 800675a:	9904      	ldr	r1, [sp, #16]
 800675c:	1905      	adds	r5, r0, r4
 800675e:	4411      	add	r1, r2
 8006760:	9104      	str	r1, [sp, #16]
 8006762:	4622      	mov	r2, r4
 8006764:	210a      	movs	r1, #10
 8006766:	42aa      	cmp	r2, r5
 8006768:	d113      	bne.n	8006792 <_strtod_l+0x252>
 800676a:	1822      	adds	r2, r4, r0
 800676c:	2a08      	cmp	r2, #8
 800676e:	f104 0401 	add.w	r4, r4, #1
 8006772:	4404      	add	r4, r0
 8006774:	dc1b      	bgt.n	80067ae <_strtod_l+0x26e>
 8006776:	220a      	movs	r2, #10
 8006778:	9906      	ldr	r1, [sp, #24]
 800677a:	fb02 3301 	mla	r3, r2, r1, r3
 800677e:	9306      	str	r3, [sp, #24]
 8006780:	2200      	movs	r2, #0
 8006782:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006784:	4610      	mov	r0, r2
 8006786:	1c59      	adds	r1, r3, #1
 8006788:	911b      	str	r1, [sp, #108]	; 0x6c
 800678a:	785b      	ldrb	r3, [r3, #1]
 800678c:	e7ca      	b.n	8006724 <_strtod_l+0x1e4>
 800678e:	4658      	mov	r0, fp
 8006790:	e7d3      	b.n	800673a <_strtod_l+0x1fa>
 8006792:	2a08      	cmp	r2, #8
 8006794:	dc04      	bgt.n	80067a0 <_strtod_l+0x260>
 8006796:	9f06      	ldr	r7, [sp, #24]
 8006798:	434f      	muls	r7, r1
 800679a:	9706      	str	r7, [sp, #24]
 800679c:	3201      	adds	r2, #1
 800679e:	e7e2      	b.n	8006766 <_strtod_l+0x226>
 80067a0:	1c57      	adds	r7, r2, #1
 80067a2:	2f10      	cmp	r7, #16
 80067a4:	bfde      	ittt	le
 80067a6:	9f05      	ldrle	r7, [sp, #20]
 80067a8:	434f      	mulle	r7, r1
 80067aa:	9705      	strle	r7, [sp, #20]
 80067ac:	e7f6      	b.n	800679c <_strtod_l+0x25c>
 80067ae:	2c10      	cmp	r4, #16
 80067b0:	bfdf      	itttt	le
 80067b2:	220a      	movle	r2, #10
 80067b4:	9905      	ldrle	r1, [sp, #20]
 80067b6:	fb02 3301 	mlale	r3, r2, r1, r3
 80067ba:	9305      	strle	r3, [sp, #20]
 80067bc:	e7e0      	b.n	8006780 <_strtod_l+0x240>
 80067be:	2300      	movs	r3, #0
 80067c0:	2201      	movs	r2, #1
 80067c2:	9304      	str	r3, [sp, #16]
 80067c4:	e77c      	b.n	80066c0 <_strtod_l+0x180>
 80067c6:	2700      	movs	r7, #0
 80067c8:	1cb3      	adds	r3, r6, #2
 80067ca:	931b      	str	r3, [sp, #108]	; 0x6c
 80067cc:	78b3      	ldrb	r3, [r6, #2]
 80067ce:	e784      	b.n	80066da <_strtod_l+0x19a>
 80067d0:	2701      	movs	r7, #1
 80067d2:	e7f9      	b.n	80067c8 <_strtod_l+0x288>
 80067d4:	0800b730 	.word	0x0800b730
 80067d8:	0800b4dc 	.word	0x0800b4dc
 80067dc:	7ff00000 	.word	0x7ff00000
 80067e0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80067e2:	1c59      	adds	r1, r3, #1
 80067e4:	911b      	str	r1, [sp, #108]	; 0x6c
 80067e6:	785b      	ldrb	r3, [r3, #1]
 80067e8:	2b30      	cmp	r3, #48	; 0x30
 80067ea:	d0f9      	beq.n	80067e0 <_strtod_l+0x2a0>
 80067ec:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80067f0:	2908      	cmp	r1, #8
 80067f2:	f63f af78 	bhi.w	80066e6 <_strtod_l+0x1a6>
 80067f6:	f04f 0e0a 	mov.w	lr, #10
 80067fa:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 80067fe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006800:	9309      	str	r3, [sp, #36]	; 0x24
 8006802:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006804:	1c59      	adds	r1, r3, #1
 8006806:	911b      	str	r1, [sp, #108]	; 0x6c
 8006808:	785b      	ldrb	r3, [r3, #1]
 800680a:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 800680e:	2d09      	cmp	r5, #9
 8006810:	d935      	bls.n	800687e <_strtod_l+0x33e>
 8006812:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006814:	1b49      	subs	r1, r1, r5
 8006816:	2908      	cmp	r1, #8
 8006818:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800681c:	dc02      	bgt.n	8006824 <_strtod_l+0x2e4>
 800681e:	4565      	cmp	r5, ip
 8006820:	bfa8      	it	ge
 8006822:	4665      	movge	r5, ip
 8006824:	b107      	cbz	r7, 8006828 <_strtod_l+0x2e8>
 8006826:	426d      	negs	r5, r5
 8006828:	2c00      	cmp	r4, #0
 800682a:	d14c      	bne.n	80068c6 <_strtod_l+0x386>
 800682c:	9907      	ldr	r1, [sp, #28]
 800682e:	4301      	orrs	r1, r0
 8006830:	f47f aec7 	bne.w	80065c2 <_strtod_l+0x82>
 8006834:	2a00      	cmp	r2, #0
 8006836:	f47f aee0 	bne.w	80065fa <_strtod_l+0xba>
 800683a:	2b69      	cmp	r3, #105	; 0x69
 800683c:	d026      	beq.n	800688c <_strtod_l+0x34c>
 800683e:	dc23      	bgt.n	8006888 <_strtod_l+0x348>
 8006840:	2b49      	cmp	r3, #73	; 0x49
 8006842:	d023      	beq.n	800688c <_strtod_l+0x34c>
 8006844:	2b4e      	cmp	r3, #78	; 0x4e
 8006846:	f47f aed8 	bne.w	80065fa <_strtod_l+0xba>
 800684a:	499c      	ldr	r1, [pc, #624]	; (8006abc <_strtod_l+0x57c>)
 800684c:	a81b      	add	r0, sp, #108	; 0x6c
 800684e:	f001 fe2b 	bl	80084a8 <__match>
 8006852:	2800      	cmp	r0, #0
 8006854:	f43f aed1 	beq.w	80065fa <_strtod_l+0xba>
 8006858:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800685a:	781b      	ldrb	r3, [r3, #0]
 800685c:	2b28      	cmp	r3, #40	; 0x28
 800685e:	d12c      	bne.n	80068ba <_strtod_l+0x37a>
 8006860:	4997      	ldr	r1, [pc, #604]	; (8006ac0 <_strtod_l+0x580>)
 8006862:	aa1e      	add	r2, sp, #120	; 0x78
 8006864:	a81b      	add	r0, sp, #108	; 0x6c
 8006866:	f001 fe33 	bl	80084d0 <__hexnan>
 800686a:	2805      	cmp	r0, #5
 800686c:	d125      	bne.n	80068ba <_strtod_l+0x37a>
 800686e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006870:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8006874:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8006878:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800687c:	e6a1      	b.n	80065c2 <_strtod_l+0x82>
 800687e:	fb0e 3c0c 	mla	ip, lr, ip, r3
 8006882:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8006886:	e7bc      	b.n	8006802 <_strtod_l+0x2c2>
 8006888:	2b6e      	cmp	r3, #110	; 0x6e
 800688a:	e7dc      	b.n	8006846 <_strtod_l+0x306>
 800688c:	498d      	ldr	r1, [pc, #564]	; (8006ac4 <_strtod_l+0x584>)
 800688e:	a81b      	add	r0, sp, #108	; 0x6c
 8006890:	f001 fe0a 	bl	80084a8 <__match>
 8006894:	2800      	cmp	r0, #0
 8006896:	f43f aeb0 	beq.w	80065fa <_strtod_l+0xba>
 800689a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800689c:	498a      	ldr	r1, [pc, #552]	; (8006ac8 <_strtod_l+0x588>)
 800689e:	3b01      	subs	r3, #1
 80068a0:	a81b      	add	r0, sp, #108	; 0x6c
 80068a2:	931b      	str	r3, [sp, #108]	; 0x6c
 80068a4:	f001 fe00 	bl	80084a8 <__match>
 80068a8:	b910      	cbnz	r0, 80068b0 <_strtod_l+0x370>
 80068aa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80068ac:	3301      	adds	r3, #1
 80068ae:	931b      	str	r3, [sp, #108]	; 0x6c
 80068b0:	f04f 0800 	mov.w	r8, #0
 80068b4:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8006ad8 <_strtod_l+0x598>
 80068b8:	e683      	b.n	80065c2 <_strtod_l+0x82>
 80068ba:	4884      	ldr	r0, [pc, #528]	; (8006acc <_strtod_l+0x58c>)
 80068bc:	f002 fda6 	bl	800940c <nan>
 80068c0:	4680      	mov	r8, r0
 80068c2:	4689      	mov	r9, r1
 80068c4:	e67d      	b.n	80065c2 <_strtod_l+0x82>
 80068c6:	9b04      	ldr	r3, [sp, #16]
 80068c8:	f1bb 0f00 	cmp.w	fp, #0
 80068cc:	bf08      	it	eq
 80068ce:	46a3      	moveq	fp, r4
 80068d0:	1aeb      	subs	r3, r5, r3
 80068d2:	2c10      	cmp	r4, #16
 80068d4:	9806      	ldr	r0, [sp, #24]
 80068d6:	4626      	mov	r6, r4
 80068d8:	9307      	str	r3, [sp, #28]
 80068da:	bfa8      	it	ge
 80068dc:	2610      	movge	r6, #16
 80068de:	f7f9 fded 	bl	80004bc <__aeabi_ui2d>
 80068e2:	2c09      	cmp	r4, #9
 80068e4:	4680      	mov	r8, r0
 80068e6:	4689      	mov	r9, r1
 80068e8:	dd13      	ble.n	8006912 <_strtod_l+0x3d2>
 80068ea:	4b79      	ldr	r3, [pc, #484]	; (8006ad0 <_strtod_l+0x590>)
 80068ec:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80068f0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80068f4:	f7f9 fe5c 	bl	80005b0 <__aeabi_dmul>
 80068f8:	4680      	mov	r8, r0
 80068fa:	9805      	ldr	r0, [sp, #20]
 80068fc:	4689      	mov	r9, r1
 80068fe:	f7f9 fddd 	bl	80004bc <__aeabi_ui2d>
 8006902:	4602      	mov	r2, r0
 8006904:	460b      	mov	r3, r1
 8006906:	4640      	mov	r0, r8
 8006908:	4649      	mov	r1, r9
 800690a:	f7f9 fc9b 	bl	8000244 <__adddf3>
 800690e:	4680      	mov	r8, r0
 8006910:	4689      	mov	r9, r1
 8006912:	2c0f      	cmp	r4, #15
 8006914:	dc36      	bgt.n	8006984 <_strtod_l+0x444>
 8006916:	9b07      	ldr	r3, [sp, #28]
 8006918:	2b00      	cmp	r3, #0
 800691a:	f43f ae52 	beq.w	80065c2 <_strtod_l+0x82>
 800691e:	dd22      	ble.n	8006966 <_strtod_l+0x426>
 8006920:	2b16      	cmp	r3, #22
 8006922:	dc09      	bgt.n	8006938 <_strtod_l+0x3f8>
 8006924:	4c6a      	ldr	r4, [pc, #424]	; (8006ad0 <_strtod_l+0x590>)
 8006926:	4642      	mov	r2, r8
 8006928:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 800692c:	464b      	mov	r3, r9
 800692e:	e9d4 0100 	ldrd	r0, r1, [r4]
 8006932:	f7f9 fe3d 	bl	80005b0 <__aeabi_dmul>
 8006936:	e7c3      	b.n	80068c0 <_strtod_l+0x380>
 8006938:	9a07      	ldr	r2, [sp, #28]
 800693a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800693e:	4293      	cmp	r3, r2
 8006940:	db20      	blt.n	8006984 <_strtod_l+0x444>
 8006942:	4d63      	ldr	r5, [pc, #396]	; (8006ad0 <_strtod_l+0x590>)
 8006944:	f1c4 040f 	rsb	r4, r4, #15
 8006948:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800694c:	4642      	mov	r2, r8
 800694e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006952:	464b      	mov	r3, r9
 8006954:	f7f9 fe2c 	bl	80005b0 <__aeabi_dmul>
 8006958:	9b07      	ldr	r3, [sp, #28]
 800695a:	1b1c      	subs	r4, r3, r4
 800695c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8006960:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006964:	e7e5      	b.n	8006932 <_strtod_l+0x3f2>
 8006966:	9b07      	ldr	r3, [sp, #28]
 8006968:	3316      	adds	r3, #22
 800696a:	db0b      	blt.n	8006984 <_strtod_l+0x444>
 800696c:	9b04      	ldr	r3, [sp, #16]
 800696e:	4a58      	ldr	r2, [pc, #352]	; (8006ad0 <_strtod_l+0x590>)
 8006970:	1b5d      	subs	r5, r3, r5
 8006972:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8006976:	4640      	mov	r0, r8
 8006978:	e9d5 2300 	ldrd	r2, r3, [r5]
 800697c:	4649      	mov	r1, r9
 800697e:	f7f9 ff41 	bl	8000804 <__aeabi_ddiv>
 8006982:	e79d      	b.n	80068c0 <_strtod_l+0x380>
 8006984:	9b07      	ldr	r3, [sp, #28]
 8006986:	1ba6      	subs	r6, r4, r6
 8006988:	441e      	add	r6, r3
 800698a:	2e00      	cmp	r6, #0
 800698c:	dd71      	ble.n	8006a72 <_strtod_l+0x532>
 800698e:	f016 030f 	ands.w	r3, r6, #15
 8006992:	d00a      	beq.n	80069aa <_strtod_l+0x46a>
 8006994:	494e      	ldr	r1, [pc, #312]	; (8006ad0 <_strtod_l+0x590>)
 8006996:	4642      	mov	r2, r8
 8006998:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800699c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80069a0:	464b      	mov	r3, r9
 80069a2:	f7f9 fe05 	bl	80005b0 <__aeabi_dmul>
 80069a6:	4680      	mov	r8, r0
 80069a8:	4689      	mov	r9, r1
 80069aa:	f036 060f 	bics.w	r6, r6, #15
 80069ae:	d050      	beq.n	8006a52 <_strtod_l+0x512>
 80069b0:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 80069b4:	dd27      	ble.n	8006a06 <_strtod_l+0x4c6>
 80069b6:	f04f 0b00 	mov.w	fp, #0
 80069ba:	f8cd b010 	str.w	fp, [sp, #16]
 80069be:	f8cd b020 	str.w	fp, [sp, #32]
 80069c2:	f8cd b018 	str.w	fp, [sp, #24]
 80069c6:	2322      	movs	r3, #34	; 0x22
 80069c8:	f04f 0800 	mov.w	r8, #0
 80069cc:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8006ad8 <_strtod_l+0x598>
 80069d0:	f8ca 3000 	str.w	r3, [sl]
 80069d4:	9b08      	ldr	r3, [sp, #32]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	f43f adf3 	beq.w	80065c2 <_strtod_l+0x82>
 80069dc:	4650      	mov	r0, sl
 80069de:	991c      	ldr	r1, [sp, #112]	; 0x70
 80069e0:	f001 fe8c 	bl	80086fc <_Bfree>
 80069e4:	4650      	mov	r0, sl
 80069e6:	9906      	ldr	r1, [sp, #24]
 80069e8:	f001 fe88 	bl	80086fc <_Bfree>
 80069ec:	4650      	mov	r0, sl
 80069ee:	9904      	ldr	r1, [sp, #16]
 80069f0:	f001 fe84 	bl	80086fc <_Bfree>
 80069f4:	4650      	mov	r0, sl
 80069f6:	9908      	ldr	r1, [sp, #32]
 80069f8:	f001 fe80 	bl	80086fc <_Bfree>
 80069fc:	4659      	mov	r1, fp
 80069fe:	4650      	mov	r0, sl
 8006a00:	f001 fe7c 	bl	80086fc <_Bfree>
 8006a04:	e5dd      	b.n	80065c2 <_strtod_l+0x82>
 8006a06:	2300      	movs	r3, #0
 8006a08:	4640      	mov	r0, r8
 8006a0a:	4649      	mov	r1, r9
 8006a0c:	461f      	mov	r7, r3
 8006a0e:	1136      	asrs	r6, r6, #4
 8006a10:	2e01      	cmp	r6, #1
 8006a12:	dc21      	bgt.n	8006a58 <_strtod_l+0x518>
 8006a14:	b10b      	cbz	r3, 8006a1a <_strtod_l+0x4da>
 8006a16:	4680      	mov	r8, r0
 8006a18:	4689      	mov	r9, r1
 8006a1a:	4b2e      	ldr	r3, [pc, #184]	; (8006ad4 <_strtod_l+0x594>)
 8006a1c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8006a20:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8006a24:	4642      	mov	r2, r8
 8006a26:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a2a:	464b      	mov	r3, r9
 8006a2c:	f7f9 fdc0 	bl	80005b0 <__aeabi_dmul>
 8006a30:	4b29      	ldr	r3, [pc, #164]	; (8006ad8 <_strtod_l+0x598>)
 8006a32:	460a      	mov	r2, r1
 8006a34:	400b      	ands	r3, r1
 8006a36:	4929      	ldr	r1, [pc, #164]	; (8006adc <_strtod_l+0x59c>)
 8006a38:	4680      	mov	r8, r0
 8006a3a:	428b      	cmp	r3, r1
 8006a3c:	d8bb      	bhi.n	80069b6 <_strtod_l+0x476>
 8006a3e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006a42:	428b      	cmp	r3, r1
 8006a44:	bf86      	itte	hi
 8006a46:	f04f 38ff 	movhi.w	r8, #4294967295
 8006a4a:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8006ae0 <_strtod_l+0x5a0>
 8006a4e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8006a52:	2300      	movs	r3, #0
 8006a54:	9305      	str	r3, [sp, #20]
 8006a56:	e07e      	b.n	8006b56 <_strtod_l+0x616>
 8006a58:	07f2      	lsls	r2, r6, #31
 8006a5a:	d507      	bpl.n	8006a6c <_strtod_l+0x52c>
 8006a5c:	4b1d      	ldr	r3, [pc, #116]	; (8006ad4 <_strtod_l+0x594>)
 8006a5e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a66:	f7f9 fda3 	bl	80005b0 <__aeabi_dmul>
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	3701      	adds	r7, #1
 8006a6e:	1076      	asrs	r6, r6, #1
 8006a70:	e7ce      	b.n	8006a10 <_strtod_l+0x4d0>
 8006a72:	d0ee      	beq.n	8006a52 <_strtod_l+0x512>
 8006a74:	4276      	negs	r6, r6
 8006a76:	f016 020f 	ands.w	r2, r6, #15
 8006a7a:	d00a      	beq.n	8006a92 <_strtod_l+0x552>
 8006a7c:	4b14      	ldr	r3, [pc, #80]	; (8006ad0 <_strtod_l+0x590>)
 8006a7e:	4640      	mov	r0, r8
 8006a80:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a84:	4649      	mov	r1, r9
 8006a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a8a:	f7f9 febb 	bl	8000804 <__aeabi_ddiv>
 8006a8e:	4680      	mov	r8, r0
 8006a90:	4689      	mov	r9, r1
 8006a92:	1136      	asrs	r6, r6, #4
 8006a94:	d0dd      	beq.n	8006a52 <_strtod_l+0x512>
 8006a96:	2e1f      	cmp	r6, #31
 8006a98:	dd24      	ble.n	8006ae4 <_strtod_l+0x5a4>
 8006a9a:	f04f 0b00 	mov.w	fp, #0
 8006a9e:	f8cd b010 	str.w	fp, [sp, #16]
 8006aa2:	f8cd b020 	str.w	fp, [sp, #32]
 8006aa6:	f8cd b018 	str.w	fp, [sp, #24]
 8006aaa:	2322      	movs	r3, #34	; 0x22
 8006aac:	f04f 0800 	mov.w	r8, #0
 8006ab0:	f04f 0900 	mov.w	r9, #0
 8006ab4:	f8ca 3000 	str.w	r3, [sl]
 8006ab8:	e78c      	b.n	80069d4 <_strtod_l+0x494>
 8006aba:	bf00      	nop
 8006abc:	0800b4ad 	.word	0x0800b4ad
 8006ac0:	0800b4f0 	.word	0x0800b4f0
 8006ac4:	0800b4a5 	.word	0x0800b4a5
 8006ac8:	0800b634 	.word	0x0800b634
 8006acc:	0800b8f0 	.word	0x0800b8f0
 8006ad0:	0800b7d0 	.word	0x0800b7d0
 8006ad4:	0800b7a8 	.word	0x0800b7a8
 8006ad8:	7ff00000 	.word	0x7ff00000
 8006adc:	7ca00000 	.word	0x7ca00000
 8006ae0:	7fefffff 	.word	0x7fefffff
 8006ae4:	f016 0310 	ands.w	r3, r6, #16
 8006ae8:	bf18      	it	ne
 8006aea:	236a      	movne	r3, #106	; 0x6a
 8006aec:	4640      	mov	r0, r8
 8006aee:	9305      	str	r3, [sp, #20]
 8006af0:	4649      	mov	r1, r9
 8006af2:	2300      	movs	r3, #0
 8006af4:	4fb2      	ldr	r7, [pc, #712]	; (8006dc0 <_strtod_l+0x880>)
 8006af6:	07f2      	lsls	r2, r6, #31
 8006af8:	d504      	bpl.n	8006b04 <_strtod_l+0x5c4>
 8006afa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006afe:	f7f9 fd57 	bl	80005b0 <__aeabi_dmul>
 8006b02:	2301      	movs	r3, #1
 8006b04:	1076      	asrs	r6, r6, #1
 8006b06:	f107 0708 	add.w	r7, r7, #8
 8006b0a:	d1f4      	bne.n	8006af6 <_strtod_l+0x5b6>
 8006b0c:	b10b      	cbz	r3, 8006b12 <_strtod_l+0x5d2>
 8006b0e:	4680      	mov	r8, r0
 8006b10:	4689      	mov	r9, r1
 8006b12:	9b05      	ldr	r3, [sp, #20]
 8006b14:	b1bb      	cbz	r3, 8006b46 <_strtod_l+0x606>
 8006b16:	f3c9 530a 	ubfx	r3, r9, #20, #11
 8006b1a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	4649      	mov	r1, r9
 8006b22:	dd10      	ble.n	8006b46 <_strtod_l+0x606>
 8006b24:	2b1f      	cmp	r3, #31
 8006b26:	f340 812b 	ble.w	8006d80 <_strtod_l+0x840>
 8006b2a:	2b34      	cmp	r3, #52	; 0x34
 8006b2c:	bfd8      	it	le
 8006b2e:	f04f 32ff 	movle.w	r2, #4294967295
 8006b32:	f04f 0800 	mov.w	r8, #0
 8006b36:	bfcf      	iteee	gt
 8006b38:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8006b3c:	3b20      	suble	r3, #32
 8006b3e:	fa02 f303 	lslle.w	r3, r2, r3
 8006b42:	ea03 0901 	andle.w	r9, r3, r1
 8006b46:	2200      	movs	r2, #0
 8006b48:	2300      	movs	r3, #0
 8006b4a:	4640      	mov	r0, r8
 8006b4c:	4649      	mov	r1, r9
 8006b4e:	f7f9 ff97 	bl	8000a80 <__aeabi_dcmpeq>
 8006b52:	2800      	cmp	r0, #0
 8006b54:	d1a1      	bne.n	8006a9a <_strtod_l+0x55a>
 8006b56:	9b06      	ldr	r3, [sp, #24]
 8006b58:	465a      	mov	r2, fp
 8006b5a:	9300      	str	r3, [sp, #0]
 8006b5c:	4650      	mov	r0, sl
 8006b5e:	4623      	mov	r3, r4
 8006b60:	9908      	ldr	r1, [sp, #32]
 8006b62:	f001 fe37 	bl	80087d4 <__s2b>
 8006b66:	9008      	str	r0, [sp, #32]
 8006b68:	2800      	cmp	r0, #0
 8006b6a:	f43f af24 	beq.w	80069b6 <_strtod_l+0x476>
 8006b6e:	9b04      	ldr	r3, [sp, #16]
 8006b70:	f04f 0b00 	mov.w	fp, #0
 8006b74:	1b5d      	subs	r5, r3, r5
 8006b76:	9b07      	ldr	r3, [sp, #28]
 8006b78:	f8cd b010 	str.w	fp, [sp, #16]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	bfb4      	ite	lt
 8006b80:	462b      	movlt	r3, r5
 8006b82:	2300      	movge	r3, #0
 8006b84:	930e      	str	r3, [sp, #56]	; 0x38
 8006b86:	9b07      	ldr	r3, [sp, #28]
 8006b88:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006b8c:	9316      	str	r3, [sp, #88]	; 0x58
 8006b8e:	9b08      	ldr	r3, [sp, #32]
 8006b90:	4650      	mov	r0, sl
 8006b92:	6859      	ldr	r1, [r3, #4]
 8006b94:	f001 fd72 	bl	800867c <_Balloc>
 8006b98:	9006      	str	r0, [sp, #24]
 8006b9a:	2800      	cmp	r0, #0
 8006b9c:	f43f af13 	beq.w	80069c6 <_strtod_l+0x486>
 8006ba0:	9b08      	ldr	r3, [sp, #32]
 8006ba2:	300c      	adds	r0, #12
 8006ba4:	691a      	ldr	r2, [r3, #16]
 8006ba6:	f103 010c 	add.w	r1, r3, #12
 8006baa:	3202      	adds	r2, #2
 8006bac:	0092      	lsls	r2, r2, #2
 8006bae:	f001 fd57 	bl	8008660 <memcpy>
 8006bb2:	ab1e      	add	r3, sp, #120	; 0x78
 8006bb4:	9301      	str	r3, [sp, #4]
 8006bb6:	ab1d      	add	r3, sp, #116	; 0x74
 8006bb8:	9300      	str	r3, [sp, #0]
 8006bba:	4642      	mov	r2, r8
 8006bbc:	464b      	mov	r3, r9
 8006bbe:	4650      	mov	r0, sl
 8006bc0:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8006bc4:	f002 f944 	bl	8008e50 <__d2b>
 8006bc8:	901c      	str	r0, [sp, #112]	; 0x70
 8006bca:	2800      	cmp	r0, #0
 8006bcc:	f43f aefb 	beq.w	80069c6 <_strtod_l+0x486>
 8006bd0:	2101      	movs	r1, #1
 8006bd2:	4650      	mov	r0, sl
 8006bd4:	f001 fe96 	bl	8008904 <__i2b>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	9004      	str	r0, [sp, #16]
 8006bdc:	2800      	cmp	r0, #0
 8006bde:	f43f aef2 	beq.w	80069c6 <_strtod_l+0x486>
 8006be2:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8006be4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006be6:	2d00      	cmp	r5, #0
 8006be8:	bfab      	itete	ge
 8006bea:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8006bec:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8006bee:	18ee      	addge	r6, r5, r3
 8006bf0:	1b5c      	sublt	r4, r3, r5
 8006bf2:	9b05      	ldr	r3, [sp, #20]
 8006bf4:	bfa8      	it	ge
 8006bf6:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8006bf8:	eba5 0503 	sub.w	r5, r5, r3
 8006bfc:	4415      	add	r5, r2
 8006bfe:	4b71      	ldr	r3, [pc, #452]	; (8006dc4 <_strtod_l+0x884>)
 8006c00:	f105 35ff 	add.w	r5, r5, #4294967295
 8006c04:	bfb8      	it	lt
 8006c06:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8006c08:	429d      	cmp	r5, r3
 8006c0a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006c0e:	f280 80c9 	bge.w	8006da4 <_strtod_l+0x864>
 8006c12:	1b5b      	subs	r3, r3, r5
 8006c14:	2b1f      	cmp	r3, #31
 8006c16:	f04f 0701 	mov.w	r7, #1
 8006c1a:	eba2 0203 	sub.w	r2, r2, r3
 8006c1e:	f300 80b6 	bgt.w	8006d8e <_strtod_l+0x84e>
 8006c22:	2500      	movs	r5, #0
 8006c24:	fa07 f303 	lsl.w	r3, r7, r3
 8006c28:	930f      	str	r3, [sp, #60]	; 0x3c
 8006c2a:	18b7      	adds	r7, r6, r2
 8006c2c:	9b05      	ldr	r3, [sp, #20]
 8006c2e:	42be      	cmp	r6, r7
 8006c30:	4414      	add	r4, r2
 8006c32:	441c      	add	r4, r3
 8006c34:	4633      	mov	r3, r6
 8006c36:	bfa8      	it	ge
 8006c38:	463b      	movge	r3, r7
 8006c3a:	42a3      	cmp	r3, r4
 8006c3c:	bfa8      	it	ge
 8006c3e:	4623      	movge	r3, r4
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	bfc2      	ittt	gt
 8006c44:	1aff      	subgt	r7, r7, r3
 8006c46:	1ae4      	subgt	r4, r4, r3
 8006c48:	1af6      	subgt	r6, r6, r3
 8006c4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	dd17      	ble.n	8006c80 <_strtod_l+0x740>
 8006c50:	461a      	mov	r2, r3
 8006c52:	4650      	mov	r0, sl
 8006c54:	9904      	ldr	r1, [sp, #16]
 8006c56:	f001 ff0f 	bl	8008a78 <__pow5mult>
 8006c5a:	9004      	str	r0, [sp, #16]
 8006c5c:	2800      	cmp	r0, #0
 8006c5e:	f43f aeb2 	beq.w	80069c6 <_strtod_l+0x486>
 8006c62:	4601      	mov	r1, r0
 8006c64:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006c66:	4650      	mov	r0, sl
 8006c68:	f001 fe62 	bl	8008930 <__multiply>
 8006c6c:	9009      	str	r0, [sp, #36]	; 0x24
 8006c6e:	2800      	cmp	r0, #0
 8006c70:	f43f aea9 	beq.w	80069c6 <_strtod_l+0x486>
 8006c74:	4650      	mov	r0, sl
 8006c76:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006c78:	f001 fd40 	bl	80086fc <_Bfree>
 8006c7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c7e:	931c      	str	r3, [sp, #112]	; 0x70
 8006c80:	2f00      	cmp	r7, #0
 8006c82:	f300 8093 	bgt.w	8006dac <_strtod_l+0x86c>
 8006c86:	9b07      	ldr	r3, [sp, #28]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	dd08      	ble.n	8006c9e <_strtod_l+0x75e>
 8006c8c:	4650      	mov	r0, sl
 8006c8e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006c90:	9906      	ldr	r1, [sp, #24]
 8006c92:	f001 fef1 	bl	8008a78 <__pow5mult>
 8006c96:	9006      	str	r0, [sp, #24]
 8006c98:	2800      	cmp	r0, #0
 8006c9a:	f43f ae94 	beq.w	80069c6 <_strtod_l+0x486>
 8006c9e:	2c00      	cmp	r4, #0
 8006ca0:	dd08      	ble.n	8006cb4 <_strtod_l+0x774>
 8006ca2:	4622      	mov	r2, r4
 8006ca4:	4650      	mov	r0, sl
 8006ca6:	9906      	ldr	r1, [sp, #24]
 8006ca8:	f001 ff40 	bl	8008b2c <__lshift>
 8006cac:	9006      	str	r0, [sp, #24]
 8006cae:	2800      	cmp	r0, #0
 8006cb0:	f43f ae89 	beq.w	80069c6 <_strtod_l+0x486>
 8006cb4:	2e00      	cmp	r6, #0
 8006cb6:	dd08      	ble.n	8006cca <_strtod_l+0x78a>
 8006cb8:	4632      	mov	r2, r6
 8006cba:	4650      	mov	r0, sl
 8006cbc:	9904      	ldr	r1, [sp, #16]
 8006cbe:	f001 ff35 	bl	8008b2c <__lshift>
 8006cc2:	9004      	str	r0, [sp, #16]
 8006cc4:	2800      	cmp	r0, #0
 8006cc6:	f43f ae7e 	beq.w	80069c6 <_strtod_l+0x486>
 8006cca:	4650      	mov	r0, sl
 8006ccc:	9a06      	ldr	r2, [sp, #24]
 8006cce:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006cd0:	f001 ffb4 	bl	8008c3c <__mdiff>
 8006cd4:	4683      	mov	fp, r0
 8006cd6:	2800      	cmp	r0, #0
 8006cd8:	f43f ae75 	beq.w	80069c6 <_strtod_l+0x486>
 8006cdc:	2400      	movs	r4, #0
 8006cde:	68c3      	ldr	r3, [r0, #12]
 8006ce0:	9904      	ldr	r1, [sp, #16]
 8006ce2:	60c4      	str	r4, [r0, #12]
 8006ce4:	930d      	str	r3, [sp, #52]	; 0x34
 8006ce6:	f001 ff8d 	bl	8008c04 <__mcmp>
 8006cea:	42a0      	cmp	r0, r4
 8006cec:	da70      	bge.n	8006dd0 <_strtod_l+0x890>
 8006cee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006cf0:	ea53 0308 	orrs.w	r3, r3, r8
 8006cf4:	f040 8096 	bne.w	8006e24 <_strtod_l+0x8e4>
 8006cf8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	f040 8091 	bne.w	8006e24 <_strtod_l+0x8e4>
 8006d02:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006d06:	0d1b      	lsrs	r3, r3, #20
 8006d08:	051b      	lsls	r3, r3, #20
 8006d0a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006d0e:	f240 8089 	bls.w	8006e24 <_strtod_l+0x8e4>
 8006d12:	f8db 3014 	ldr.w	r3, [fp, #20]
 8006d16:	b923      	cbnz	r3, 8006d22 <_strtod_l+0x7e2>
 8006d18:	f8db 3010 	ldr.w	r3, [fp, #16]
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	f340 8081 	ble.w	8006e24 <_strtod_l+0x8e4>
 8006d22:	4659      	mov	r1, fp
 8006d24:	2201      	movs	r2, #1
 8006d26:	4650      	mov	r0, sl
 8006d28:	f001 ff00 	bl	8008b2c <__lshift>
 8006d2c:	9904      	ldr	r1, [sp, #16]
 8006d2e:	4683      	mov	fp, r0
 8006d30:	f001 ff68 	bl	8008c04 <__mcmp>
 8006d34:	2800      	cmp	r0, #0
 8006d36:	dd75      	ble.n	8006e24 <_strtod_l+0x8e4>
 8006d38:	9905      	ldr	r1, [sp, #20]
 8006d3a:	464b      	mov	r3, r9
 8006d3c:	4a22      	ldr	r2, [pc, #136]	; (8006dc8 <_strtod_l+0x888>)
 8006d3e:	2900      	cmp	r1, #0
 8006d40:	f000 8091 	beq.w	8006e66 <_strtod_l+0x926>
 8006d44:	ea02 0109 	and.w	r1, r2, r9
 8006d48:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006d4c:	f300 808b 	bgt.w	8006e66 <_strtod_l+0x926>
 8006d50:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006d54:	f77f aea9 	ble.w	8006aaa <_strtod_l+0x56a>
 8006d58:	2300      	movs	r3, #0
 8006d5a:	4a1c      	ldr	r2, [pc, #112]	; (8006dcc <_strtod_l+0x88c>)
 8006d5c:	4640      	mov	r0, r8
 8006d5e:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8006d62:	4649      	mov	r1, r9
 8006d64:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006d68:	f7f9 fc22 	bl	80005b0 <__aeabi_dmul>
 8006d6c:	460b      	mov	r3, r1
 8006d6e:	4303      	orrs	r3, r0
 8006d70:	bf08      	it	eq
 8006d72:	2322      	moveq	r3, #34	; 0x22
 8006d74:	4680      	mov	r8, r0
 8006d76:	4689      	mov	r9, r1
 8006d78:	bf08      	it	eq
 8006d7a:	f8ca 3000 	streq.w	r3, [sl]
 8006d7e:	e62d      	b.n	80069dc <_strtod_l+0x49c>
 8006d80:	f04f 32ff 	mov.w	r2, #4294967295
 8006d84:	fa02 f303 	lsl.w	r3, r2, r3
 8006d88:	ea03 0808 	and.w	r8, r3, r8
 8006d8c:	e6db      	b.n	8006b46 <_strtod_l+0x606>
 8006d8e:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8006d92:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8006d96:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8006d9a:	35e2      	adds	r5, #226	; 0xe2
 8006d9c:	fa07 f505 	lsl.w	r5, r7, r5
 8006da0:	970f      	str	r7, [sp, #60]	; 0x3c
 8006da2:	e742      	b.n	8006c2a <_strtod_l+0x6ea>
 8006da4:	2301      	movs	r3, #1
 8006da6:	2500      	movs	r5, #0
 8006da8:	930f      	str	r3, [sp, #60]	; 0x3c
 8006daa:	e73e      	b.n	8006c2a <_strtod_l+0x6ea>
 8006dac:	463a      	mov	r2, r7
 8006dae:	4650      	mov	r0, sl
 8006db0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006db2:	f001 febb 	bl	8008b2c <__lshift>
 8006db6:	901c      	str	r0, [sp, #112]	; 0x70
 8006db8:	2800      	cmp	r0, #0
 8006dba:	f47f af64 	bne.w	8006c86 <_strtod_l+0x746>
 8006dbe:	e602      	b.n	80069c6 <_strtod_l+0x486>
 8006dc0:	0800b508 	.word	0x0800b508
 8006dc4:	fffffc02 	.word	0xfffffc02
 8006dc8:	7ff00000 	.word	0x7ff00000
 8006dcc:	39500000 	.word	0x39500000
 8006dd0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006dd4:	d166      	bne.n	8006ea4 <_strtod_l+0x964>
 8006dd6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006dd8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006ddc:	b35a      	cbz	r2, 8006e36 <_strtod_l+0x8f6>
 8006dde:	4a9c      	ldr	r2, [pc, #624]	; (8007050 <_strtod_l+0xb10>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d12c      	bne.n	8006e3e <_strtod_l+0x8fe>
 8006de4:	9b05      	ldr	r3, [sp, #20]
 8006de6:	4640      	mov	r0, r8
 8006de8:	b303      	cbz	r3, 8006e2c <_strtod_l+0x8ec>
 8006dea:	464b      	mov	r3, r9
 8006dec:	4a99      	ldr	r2, [pc, #612]	; (8007054 <_strtod_l+0xb14>)
 8006dee:	f04f 31ff 	mov.w	r1, #4294967295
 8006df2:	401a      	ands	r2, r3
 8006df4:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8006df8:	d81b      	bhi.n	8006e32 <_strtod_l+0x8f2>
 8006dfa:	0d12      	lsrs	r2, r2, #20
 8006dfc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006e00:	fa01 f303 	lsl.w	r3, r1, r3
 8006e04:	4298      	cmp	r0, r3
 8006e06:	d11a      	bne.n	8006e3e <_strtod_l+0x8fe>
 8006e08:	4b93      	ldr	r3, [pc, #588]	; (8007058 <_strtod_l+0xb18>)
 8006e0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	d102      	bne.n	8006e16 <_strtod_l+0x8d6>
 8006e10:	3001      	adds	r0, #1
 8006e12:	f43f add8 	beq.w	80069c6 <_strtod_l+0x486>
 8006e16:	f04f 0800 	mov.w	r8, #0
 8006e1a:	4b8e      	ldr	r3, [pc, #568]	; (8007054 <_strtod_l+0xb14>)
 8006e1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e1e:	401a      	ands	r2, r3
 8006e20:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8006e24:	9b05      	ldr	r3, [sp, #20]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d196      	bne.n	8006d58 <_strtod_l+0x818>
 8006e2a:	e5d7      	b.n	80069dc <_strtod_l+0x49c>
 8006e2c:	f04f 33ff 	mov.w	r3, #4294967295
 8006e30:	e7e8      	b.n	8006e04 <_strtod_l+0x8c4>
 8006e32:	460b      	mov	r3, r1
 8006e34:	e7e6      	b.n	8006e04 <_strtod_l+0x8c4>
 8006e36:	ea53 0308 	orrs.w	r3, r3, r8
 8006e3a:	f43f af7d 	beq.w	8006d38 <_strtod_l+0x7f8>
 8006e3e:	b1e5      	cbz	r5, 8006e7a <_strtod_l+0x93a>
 8006e40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e42:	421d      	tst	r5, r3
 8006e44:	d0ee      	beq.n	8006e24 <_strtod_l+0x8e4>
 8006e46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e48:	4640      	mov	r0, r8
 8006e4a:	4649      	mov	r1, r9
 8006e4c:	9a05      	ldr	r2, [sp, #20]
 8006e4e:	b1c3      	cbz	r3, 8006e82 <_strtod_l+0x942>
 8006e50:	f7ff fb54 	bl	80064fc <sulp>
 8006e54:	4602      	mov	r2, r0
 8006e56:	460b      	mov	r3, r1
 8006e58:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006e5c:	f7f9 f9f2 	bl	8000244 <__adddf3>
 8006e60:	4680      	mov	r8, r0
 8006e62:	4689      	mov	r9, r1
 8006e64:	e7de      	b.n	8006e24 <_strtod_l+0x8e4>
 8006e66:	4013      	ands	r3, r2
 8006e68:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006e6c:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8006e70:	f04f 38ff 	mov.w	r8, #4294967295
 8006e74:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8006e78:	e7d4      	b.n	8006e24 <_strtod_l+0x8e4>
 8006e7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006e7c:	ea13 0f08 	tst.w	r3, r8
 8006e80:	e7e0      	b.n	8006e44 <_strtod_l+0x904>
 8006e82:	f7ff fb3b 	bl	80064fc <sulp>
 8006e86:	4602      	mov	r2, r0
 8006e88:	460b      	mov	r3, r1
 8006e8a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006e8e:	f7f9 f9d7 	bl	8000240 <__aeabi_dsub>
 8006e92:	2200      	movs	r2, #0
 8006e94:	2300      	movs	r3, #0
 8006e96:	4680      	mov	r8, r0
 8006e98:	4689      	mov	r9, r1
 8006e9a:	f7f9 fdf1 	bl	8000a80 <__aeabi_dcmpeq>
 8006e9e:	2800      	cmp	r0, #0
 8006ea0:	d0c0      	beq.n	8006e24 <_strtod_l+0x8e4>
 8006ea2:	e602      	b.n	8006aaa <_strtod_l+0x56a>
 8006ea4:	4658      	mov	r0, fp
 8006ea6:	9904      	ldr	r1, [sp, #16]
 8006ea8:	f002 f82e 	bl	8008f08 <__ratio>
 8006eac:	2200      	movs	r2, #0
 8006eae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006eb2:	4606      	mov	r6, r0
 8006eb4:	460f      	mov	r7, r1
 8006eb6:	f7f9 fdf7 	bl	8000aa8 <__aeabi_dcmple>
 8006eba:	2800      	cmp	r0, #0
 8006ebc:	d075      	beq.n	8006faa <_strtod_l+0xa6a>
 8006ebe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d047      	beq.n	8006f54 <_strtod_l+0xa14>
 8006ec4:	2600      	movs	r6, #0
 8006ec6:	4f65      	ldr	r7, [pc, #404]	; (800705c <_strtod_l+0xb1c>)
 8006ec8:	4d64      	ldr	r5, [pc, #400]	; (800705c <_strtod_l+0xb1c>)
 8006eca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ecc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ed0:	0d1b      	lsrs	r3, r3, #20
 8006ed2:	051b      	lsls	r3, r3, #20
 8006ed4:	930f      	str	r3, [sp, #60]	; 0x3c
 8006ed6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006ed8:	4b61      	ldr	r3, [pc, #388]	; (8007060 <_strtod_l+0xb20>)
 8006eda:	429a      	cmp	r2, r3
 8006edc:	f040 80c8 	bne.w	8007070 <_strtod_l+0xb30>
 8006ee0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006ee4:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8006ee8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006eea:	4640      	mov	r0, r8
 8006eec:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8006ef0:	4649      	mov	r1, r9
 8006ef2:	f001 ff33 	bl	8008d5c <__ulp>
 8006ef6:	4602      	mov	r2, r0
 8006ef8:	460b      	mov	r3, r1
 8006efa:	4630      	mov	r0, r6
 8006efc:	4639      	mov	r1, r7
 8006efe:	f7f9 fb57 	bl	80005b0 <__aeabi_dmul>
 8006f02:	4642      	mov	r2, r8
 8006f04:	464b      	mov	r3, r9
 8006f06:	f7f9 f99d 	bl	8000244 <__adddf3>
 8006f0a:	460b      	mov	r3, r1
 8006f0c:	4951      	ldr	r1, [pc, #324]	; (8007054 <_strtod_l+0xb14>)
 8006f0e:	4a55      	ldr	r2, [pc, #340]	; (8007064 <_strtod_l+0xb24>)
 8006f10:	4019      	ands	r1, r3
 8006f12:	4291      	cmp	r1, r2
 8006f14:	4680      	mov	r8, r0
 8006f16:	d95e      	bls.n	8006fd6 <_strtod_l+0xa96>
 8006f18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f1a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d103      	bne.n	8006f2a <_strtod_l+0x9ea>
 8006f22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f24:	3301      	adds	r3, #1
 8006f26:	f43f ad4e 	beq.w	80069c6 <_strtod_l+0x486>
 8006f2a:	f04f 38ff 	mov.w	r8, #4294967295
 8006f2e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8007058 <_strtod_l+0xb18>
 8006f32:	4650      	mov	r0, sl
 8006f34:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006f36:	f001 fbe1 	bl	80086fc <_Bfree>
 8006f3a:	4650      	mov	r0, sl
 8006f3c:	9906      	ldr	r1, [sp, #24]
 8006f3e:	f001 fbdd 	bl	80086fc <_Bfree>
 8006f42:	4650      	mov	r0, sl
 8006f44:	9904      	ldr	r1, [sp, #16]
 8006f46:	f001 fbd9 	bl	80086fc <_Bfree>
 8006f4a:	4659      	mov	r1, fp
 8006f4c:	4650      	mov	r0, sl
 8006f4e:	f001 fbd5 	bl	80086fc <_Bfree>
 8006f52:	e61c      	b.n	8006b8e <_strtod_l+0x64e>
 8006f54:	f1b8 0f00 	cmp.w	r8, #0
 8006f58:	d119      	bne.n	8006f8e <_strtod_l+0xa4e>
 8006f5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f60:	b9e3      	cbnz	r3, 8006f9c <_strtod_l+0xa5c>
 8006f62:	2200      	movs	r2, #0
 8006f64:	4630      	mov	r0, r6
 8006f66:	4639      	mov	r1, r7
 8006f68:	4b3c      	ldr	r3, [pc, #240]	; (800705c <_strtod_l+0xb1c>)
 8006f6a:	f7f9 fd93 	bl	8000a94 <__aeabi_dcmplt>
 8006f6e:	b9c8      	cbnz	r0, 8006fa4 <_strtod_l+0xa64>
 8006f70:	2200      	movs	r2, #0
 8006f72:	4630      	mov	r0, r6
 8006f74:	4639      	mov	r1, r7
 8006f76:	4b3c      	ldr	r3, [pc, #240]	; (8007068 <_strtod_l+0xb28>)
 8006f78:	f7f9 fb1a 	bl	80005b0 <__aeabi_dmul>
 8006f7c:	4604      	mov	r4, r0
 8006f7e:	460d      	mov	r5, r1
 8006f80:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006f84:	9418      	str	r4, [sp, #96]	; 0x60
 8006f86:	9319      	str	r3, [sp, #100]	; 0x64
 8006f88:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8006f8c:	e79d      	b.n	8006eca <_strtod_l+0x98a>
 8006f8e:	f1b8 0f01 	cmp.w	r8, #1
 8006f92:	d103      	bne.n	8006f9c <_strtod_l+0xa5c>
 8006f94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	f43f ad87 	beq.w	8006aaa <_strtod_l+0x56a>
 8006f9c:	2600      	movs	r6, #0
 8006f9e:	2400      	movs	r4, #0
 8006fa0:	4f32      	ldr	r7, [pc, #200]	; (800706c <_strtod_l+0xb2c>)
 8006fa2:	e791      	b.n	8006ec8 <_strtod_l+0x988>
 8006fa4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8006fa6:	4d30      	ldr	r5, [pc, #192]	; (8007068 <_strtod_l+0xb28>)
 8006fa8:	e7ea      	b.n	8006f80 <_strtod_l+0xa40>
 8006faa:	4b2f      	ldr	r3, [pc, #188]	; (8007068 <_strtod_l+0xb28>)
 8006fac:	2200      	movs	r2, #0
 8006fae:	4630      	mov	r0, r6
 8006fb0:	4639      	mov	r1, r7
 8006fb2:	f7f9 fafd 	bl	80005b0 <__aeabi_dmul>
 8006fb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006fb8:	4604      	mov	r4, r0
 8006fba:	460d      	mov	r5, r1
 8006fbc:	b933      	cbnz	r3, 8006fcc <_strtod_l+0xa8c>
 8006fbe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006fc2:	9010      	str	r0, [sp, #64]	; 0x40
 8006fc4:	9311      	str	r3, [sp, #68]	; 0x44
 8006fc6:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006fca:	e77e      	b.n	8006eca <_strtod_l+0x98a>
 8006fcc:	4602      	mov	r2, r0
 8006fce:	460b      	mov	r3, r1
 8006fd0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8006fd4:	e7f7      	b.n	8006fc6 <_strtod_l+0xa86>
 8006fd6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8006fda:	9b05      	ldr	r3, [sp, #20]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d1a8      	bne.n	8006f32 <_strtod_l+0x9f2>
 8006fe0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006fe4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006fe6:	0d1b      	lsrs	r3, r3, #20
 8006fe8:	051b      	lsls	r3, r3, #20
 8006fea:	429a      	cmp	r2, r3
 8006fec:	d1a1      	bne.n	8006f32 <_strtod_l+0x9f2>
 8006fee:	4620      	mov	r0, r4
 8006ff0:	4629      	mov	r1, r5
 8006ff2:	f7fa f8a3 	bl	800113c <__aeabi_d2lz>
 8006ff6:	f7f9 faad 	bl	8000554 <__aeabi_l2d>
 8006ffa:	4602      	mov	r2, r0
 8006ffc:	460b      	mov	r3, r1
 8006ffe:	4620      	mov	r0, r4
 8007000:	4629      	mov	r1, r5
 8007002:	f7f9 f91d 	bl	8000240 <__aeabi_dsub>
 8007006:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007008:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800700c:	ea43 0308 	orr.w	r3, r3, r8
 8007010:	4313      	orrs	r3, r2
 8007012:	4604      	mov	r4, r0
 8007014:	460d      	mov	r5, r1
 8007016:	d066      	beq.n	80070e6 <_strtod_l+0xba6>
 8007018:	a309      	add	r3, pc, #36	; (adr r3, 8007040 <_strtod_l+0xb00>)
 800701a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800701e:	f7f9 fd39 	bl	8000a94 <__aeabi_dcmplt>
 8007022:	2800      	cmp	r0, #0
 8007024:	f47f acda 	bne.w	80069dc <_strtod_l+0x49c>
 8007028:	a307      	add	r3, pc, #28	; (adr r3, 8007048 <_strtod_l+0xb08>)
 800702a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800702e:	4620      	mov	r0, r4
 8007030:	4629      	mov	r1, r5
 8007032:	f7f9 fd4d 	bl	8000ad0 <__aeabi_dcmpgt>
 8007036:	2800      	cmp	r0, #0
 8007038:	f43f af7b 	beq.w	8006f32 <_strtod_l+0x9f2>
 800703c:	e4ce      	b.n	80069dc <_strtod_l+0x49c>
 800703e:	bf00      	nop
 8007040:	94a03595 	.word	0x94a03595
 8007044:	3fdfffff 	.word	0x3fdfffff
 8007048:	35afe535 	.word	0x35afe535
 800704c:	3fe00000 	.word	0x3fe00000
 8007050:	000fffff 	.word	0x000fffff
 8007054:	7ff00000 	.word	0x7ff00000
 8007058:	7fefffff 	.word	0x7fefffff
 800705c:	3ff00000 	.word	0x3ff00000
 8007060:	7fe00000 	.word	0x7fe00000
 8007064:	7c9fffff 	.word	0x7c9fffff
 8007068:	3fe00000 	.word	0x3fe00000
 800706c:	bff00000 	.word	0xbff00000
 8007070:	9b05      	ldr	r3, [sp, #20]
 8007072:	b313      	cbz	r3, 80070ba <_strtod_l+0xb7a>
 8007074:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007076:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800707a:	d81e      	bhi.n	80070ba <_strtod_l+0xb7a>
 800707c:	a326      	add	r3, pc, #152	; (adr r3, 8007118 <_strtod_l+0xbd8>)
 800707e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007082:	4620      	mov	r0, r4
 8007084:	4629      	mov	r1, r5
 8007086:	f7f9 fd0f 	bl	8000aa8 <__aeabi_dcmple>
 800708a:	b190      	cbz	r0, 80070b2 <_strtod_l+0xb72>
 800708c:	4629      	mov	r1, r5
 800708e:	4620      	mov	r0, r4
 8007090:	f7f9 fd66 	bl	8000b60 <__aeabi_d2uiz>
 8007094:	2801      	cmp	r0, #1
 8007096:	bf38      	it	cc
 8007098:	2001      	movcc	r0, #1
 800709a:	f7f9 fa0f 	bl	80004bc <__aeabi_ui2d>
 800709e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80070a0:	4604      	mov	r4, r0
 80070a2:	460d      	mov	r5, r1
 80070a4:	b9d3      	cbnz	r3, 80070dc <_strtod_l+0xb9c>
 80070a6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80070aa:	9012      	str	r0, [sp, #72]	; 0x48
 80070ac:	9313      	str	r3, [sp, #76]	; 0x4c
 80070ae:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80070b2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80070b4:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80070b8:	1a9f      	subs	r7, r3, r2
 80070ba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80070be:	f001 fe4d 	bl	8008d5c <__ulp>
 80070c2:	4602      	mov	r2, r0
 80070c4:	460b      	mov	r3, r1
 80070c6:	4630      	mov	r0, r6
 80070c8:	4639      	mov	r1, r7
 80070ca:	f7f9 fa71 	bl	80005b0 <__aeabi_dmul>
 80070ce:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80070d2:	f7f9 f8b7 	bl	8000244 <__adddf3>
 80070d6:	4680      	mov	r8, r0
 80070d8:	4689      	mov	r9, r1
 80070da:	e77e      	b.n	8006fda <_strtod_l+0xa9a>
 80070dc:	4602      	mov	r2, r0
 80070de:	460b      	mov	r3, r1
 80070e0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80070e4:	e7e3      	b.n	80070ae <_strtod_l+0xb6e>
 80070e6:	a30e      	add	r3, pc, #56	; (adr r3, 8007120 <_strtod_l+0xbe0>)
 80070e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ec:	f7f9 fcd2 	bl	8000a94 <__aeabi_dcmplt>
 80070f0:	e7a1      	b.n	8007036 <_strtod_l+0xaf6>
 80070f2:	2300      	movs	r3, #0
 80070f4:	930c      	str	r3, [sp, #48]	; 0x30
 80070f6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80070f8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80070fa:	6013      	str	r3, [r2, #0]
 80070fc:	f7ff ba65 	b.w	80065ca <_strtod_l+0x8a>
 8007100:	2b65      	cmp	r3, #101	; 0x65
 8007102:	f43f ab5c 	beq.w	80067be <_strtod_l+0x27e>
 8007106:	2b45      	cmp	r3, #69	; 0x45
 8007108:	f43f ab59 	beq.w	80067be <_strtod_l+0x27e>
 800710c:	2201      	movs	r2, #1
 800710e:	f7ff bb8d 	b.w	800682c <_strtod_l+0x2ec>
 8007112:	bf00      	nop
 8007114:	f3af 8000 	nop.w
 8007118:	ffc00000 	.word	0xffc00000
 800711c:	41dfffff 	.word	0x41dfffff
 8007120:	94a03595 	.word	0x94a03595
 8007124:	3fcfffff 	.word	0x3fcfffff

08007128 <_strtod_r>:
 8007128:	4b01      	ldr	r3, [pc, #4]	; (8007130 <_strtod_r+0x8>)
 800712a:	f7ff ba09 	b.w	8006540 <_strtod_l>
 800712e:	bf00      	nop
 8007130:	20000090 	.word	0x20000090

08007134 <_strtol_l.isra.0>:
 8007134:	2b01      	cmp	r3, #1
 8007136:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800713a:	4686      	mov	lr, r0
 800713c:	d001      	beq.n	8007142 <_strtol_l.isra.0+0xe>
 800713e:	2b24      	cmp	r3, #36	; 0x24
 8007140:	d906      	bls.n	8007150 <_strtol_l.isra.0+0x1c>
 8007142:	f7fe faef 	bl	8005724 <__errno>
 8007146:	2316      	movs	r3, #22
 8007148:	6003      	str	r3, [r0, #0]
 800714a:	2000      	movs	r0, #0
 800714c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007150:	468c      	mov	ip, r1
 8007152:	4e3a      	ldr	r6, [pc, #232]	; (800723c <_strtol_l.isra.0+0x108>)
 8007154:	4660      	mov	r0, ip
 8007156:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800715a:	5da5      	ldrb	r5, [r4, r6]
 800715c:	f015 0508 	ands.w	r5, r5, #8
 8007160:	d1f8      	bne.n	8007154 <_strtol_l.isra.0+0x20>
 8007162:	2c2d      	cmp	r4, #45	; 0x2d
 8007164:	d133      	bne.n	80071ce <_strtol_l.isra.0+0x9a>
 8007166:	f04f 0801 	mov.w	r8, #1
 800716a:	f89c 4000 	ldrb.w	r4, [ip]
 800716e:	f100 0c02 	add.w	ip, r0, #2
 8007172:	2b00      	cmp	r3, #0
 8007174:	d05d      	beq.n	8007232 <_strtol_l.isra.0+0xfe>
 8007176:	2b10      	cmp	r3, #16
 8007178:	d10c      	bne.n	8007194 <_strtol_l.isra.0+0x60>
 800717a:	2c30      	cmp	r4, #48	; 0x30
 800717c:	d10a      	bne.n	8007194 <_strtol_l.isra.0+0x60>
 800717e:	f89c 0000 	ldrb.w	r0, [ip]
 8007182:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8007186:	2858      	cmp	r0, #88	; 0x58
 8007188:	d14e      	bne.n	8007228 <_strtol_l.isra.0+0xf4>
 800718a:	2310      	movs	r3, #16
 800718c:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8007190:	f10c 0c02 	add.w	ip, ip, #2
 8007194:	2500      	movs	r5, #0
 8007196:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 800719a:	3f01      	subs	r7, #1
 800719c:	fbb7 f9f3 	udiv	r9, r7, r3
 80071a0:	4628      	mov	r0, r5
 80071a2:	fb03 7a19 	mls	sl, r3, r9, r7
 80071a6:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80071aa:	2e09      	cmp	r6, #9
 80071ac:	d818      	bhi.n	80071e0 <_strtol_l.isra.0+0xac>
 80071ae:	4634      	mov	r4, r6
 80071b0:	42a3      	cmp	r3, r4
 80071b2:	dd24      	ble.n	80071fe <_strtol_l.isra.0+0xca>
 80071b4:	2d00      	cmp	r5, #0
 80071b6:	db1f      	blt.n	80071f8 <_strtol_l.isra.0+0xc4>
 80071b8:	4581      	cmp	r9, r0
 80071ba:	d31d      	bcc.n	80071f8 <_strtol_l.isra.0+0xc4>
 80071bc:	d101      	bne.n	80071c2 <_strtol_l.isra.0+0x8e>
 80071be:	45a2      	cmp	sl, r4
 80071c0:	db1a      	blt.n	80071f8 <_strtol_l.isra.0+0xc4>
 80071c2:	2501      	movs	r5, #1
 80071c4:	fb00 4003 	mla	r0, r0, r3, r4
 80071c8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80071cc:	e7eb      	b.n	80071a6 <_strtol_l.isra.0+0x72>
 80071ce:	2c2b      	cmp	r4, #43	; 0x2b
 80071d0:	bf08      	it	eq
 80071d2:	f89c 4000 	ldrbeq.w	r4, [ip]
 80071d6:	46a8      	mov	r8, r5
 80071d8:	bf08      	it	eq
 80071da:	f100 0c02 	addeq.w	ip, r0, #2
 80071de:	e7c8      	b.n	8007172 <_strtol_l.isra.0+0x3e>
 80071e0:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80071e4:	2e19      	cmp	r6, #25
 80071e6:	d801      	bhi.n	80071ec <_strtol_l.isra.0+0xb8>
 80071e8:	3c37      	subs	r4, #55	; 0x37
 80071ea:	e7e1      	b.n	80071b0 <_strtol_l.isra.0+0x7c>
 80071ec:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80071f0:	2e19      	cmp	r6, #25
 80071f2:	d804      	bhi.n	80071fe <_strtol_l.isra.0+0xca>
 80071f4:	3c57      	subs	r4, #87	; 0x57
 80071f6:	e7db      	b.n	80071b0 <_strtol_l.isra.0+0x7c>
 80071f8:	f04f 35ff 	mov.w	r5, #4294967295
 80071fc:	e7e4      	b.n	80071c8 <_strtol_l.isra.0+0x94>
 80071fe:	2d00      	cmp	r5, #0
 8007200:	da08      	bge.n	8007214 <_strtol_l.isra.0+0xe0>
 8007202:	2322      	movs	r3, #34	; 0x22
 8007204:	4638      	mov	r0, r7
 8007206:	f8ce 3000 	str.w	r3, [lr]
 800720a:	2a00      	cmp	r2, #0
 800720c:	d09e      	beq.n	800714c <_strtol_l.isra.0+0x18>
 800720e:	f10c 31ff 	add.w	r1, ip, #4294967295
 8007212:	e007      	b.n	8007224 <_strtol_l.isra.0+0xf0>
 8007214:	f1b8 0f00 	cmp.w	r8, #0
 8007218:	d000      	beq.n	800721c <_strtol_l.isra.0+0xe8>
 800721a:	4240      	negs	r0, r0
 800721c:	2a00      	cmp	r2, #0
 800721e:	d095      	beq.n	800714c <_strtol_l.isra.0+0x18>
 8007220:	2d00      	cmp	r5, #0
 8007222:	d1f4      	bne.n	800720e <_strtol_l.isra.0+0xda>
 8007224:	6011      	str	r1, [r2, #0]
 8007226:	e791      	b.n	800714c <_strtol_l.isra.0+0x18>
 8007228:	2430      	movs	r4, #48	; 0x30
 800722a:	2b00      	cmp	r3, #0
 800722c:	d1b2      	bne.n	8007194 <_strtol_l.isra.0+0x60>
 800722e:	2308      	movs	r3, #8
 8007230:	e7b0      	b.n	8007194 <_strtol_l.isra.0+0x60>
 8007232:	2c30      	cmp	r4, #48	; 0x30
 8007234:	d0a3      	beq.n	800717e <_strtol_l.isra.0+0x4a>
 8007236:	230a      	movs	r3, #10
 8007238:	e7ac      	b.n	8007194 <_strtol_l.isra.0+0x60>
 800723a:	bf00      	nop
 800723c:	0800b531 	.word	0x0800b531

08007240 <_strtol_r>:
 8007240:	f7ff bf78 	b.w	8007134 <_strtol_l.isra.0>

08007244 <quorem>:
 8007244:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007248:	6903      	ldr	r3, [r0, #16]
 800724a:	690c      	ldr	r4, [r1, #16]
 800724c:	4607      	mov	r7, r0
 800724e:	42a3      	cmp	r3, r4
 8007250:	f2c0 8083 	blt.w	800735a <quorem+0x116>
 8007254:	3c01      	subs	r4, #1
 8007256:	f100 0514 	add.w	r5, r0, #20
 800725a:	f101 0814 	add.w	r8, r1, #20
 800725e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007262:	9301      	str	r3, [sp, #4]
 8007264:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007268:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800726c:	3301      	adds	r3, #1
 800726e:	429a      	cmp	r2, r3
 8007270:	fbb2 f6f3 	udiv	r6, r2, r3
 8007274:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007278:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800727c:	d332      	bcc.n	80072e4 <quorem+0xa0>
 800727e:	f04f 0e00 	mov.w	lr, #0
 8007282:	4640      	mov	r0, r8
 8007284:	46ac      	mov	ip, r5
 8007286:	46f2      	mov	sl, lr
 8007288:	f850 2b04 	ldr.w	r2, [r0], #4
 800728c:	b293      	uxth	r3, r2
 800728e:	fb06 e303 	mla	r3, r6, r3, lr
 8007292:	0c12      	lsrs	r2, r2, #16
 8007294:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007298:	fb06 e202 	mla	r2, r6, r2, lr
 800729c:	b29b      	uxth	r3, r3
 800729e:	ebaa 0303 	sub.w	r3, sl, r3
 80072a2:	f8dc a000 	ldr.w	sl, [ip]
 80072a6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80072aa:	fa1f fa8a 	uxth.w	sl, sl
 80072ae:	4453      	add	r3, sl
 80072b0:	fa1f fa82 	uxth.w	sl, r2
 80072b4:	f8dc 2000 	ldr.w	r2, [ip]
 80072b8:	4581      	cmp	r9, r0
 80072ba:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80072be:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80072c2:	b29b      	uxth	r3, r3
 80072c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80072c8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80072cc:	f84c 3b04 	str.w	r3, [ip], #4
 80072d0:	d2da      	bcs.n	8007288 <quorem+0x44>
 80072d2:	f855 300b 	ldr.w	r3, [r5, fp]
 80072d6:	b92b      	cbnz	r3, 80072e4 <quorem+0xa0>
 80072d8:	9b01      	ldr	r3, [sp, #4]
 80072da:	3b04      	subs	r3, #4
 80072dc:	429d      	cmp	r5, r3
 80072de:	461a      	mov	r2, r3
 80072e0:	d32f      	bcc.n	8007342 <quorem+0xfe>
 80072e2:	613c      	str	r4, [r7, #16]
 80072e4:	4638      	mov	r0, r7
 80072e6:	f001 fc8d 	bl	8008c04 <__mcmp>
 80072ea:	2800      	cmp	r0, #0
 80072ec:	db25      	blt.n	800733a <quorem+0xf6>
 80072ee:	4628      	mov	r0, r5
 80072f0:	f04f 0c00 	mov.w	ip, #0
 80072f4:	3601      	adds	r6, #1
 80072f6:	f858 1b04 	ldr.w	r1, [r8], #4
 80072fa:	f8d0 e000 	ldr.w	lr, [r0]
 80072fe:	b28b      	uxth	r3, r1
 8007300:	ebac 0303 	sub.w	r3, ip, r3
 8007304:	fa1f f28e 	uxth.w	r2, lr
 8007308:	4413      	add	r3, r2
 800730a:	0c0a      	lsrs	r2, r1, #16
 800730c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007310:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007314:	b29b      	uxth	r3, r3
 8007316:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800731a:	45c1      	cmp	r9, r8
 800731c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007320:	f840 3b04 	str.w	r3, [r0], #4
 8007324:	d2e7      	bcs.n	80072f6 <quorem+0xb2>
 8007326:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800732a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800732e:	b922      	cbnz	r2, 800733a <quorem+0xf6>
 8007330:	3b04      	subs	r3, #4
 8007332:	429d      	cmp	r5, r3
 8007334:	461a      	mov	r2, r3
 8007336:	d30a      	bcc.n	800734e <quorem+0x10a>
 8007338:	613c      	str	r4, [r7, #16]
 800733a:	4630      	mov	r0, r6
 800733c:	b003      	add	sp, #12
 800733e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007342:	6812      	ldr	r2, [r2, #0]
 8007344:	3b04      	subs	r3, #4
 8007346:	2a00      	cmp	r2, #0
 8007348:	d1cb      	bne.n	80072e2 <quorem+0x9e>
 800734a:	3c01      	subs	r4, #1
 800734c:	e7c6      	b.n	80072dc <quorem+0x98>
 800734e:	6812      	ldr	r2, [r2, #0]
 8007350:	3b04      	subs	r3, #4
 8007352:	2a00      	cmp	r2, #0
 8007354:	d1f0      	bne.n	8007338 <quorem+0xf4>
 8007356:	3c01      	subs	r4, #1
 8007358:	e7eb      	b.n	8007332 <quorem+0xee>
 800735a:	2000      	movs	r0, #0
 800735c:	e7ee      	b.n	800733c <quorem+0xf8>
	...

08007360 <_dtoa_r>:
 8007360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007364:	4616      	mov	r6, r2
 8007366:	461f      	mov	r7, r3
 8007368:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800736a:	b099      	sub	sp, #100	; 0x64
 800736c:	4605      	mov	r5, r0
 800736e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007372:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8007376:	b974      	cbnz	r4, 8007396 <_dtoa_r+0x36>
 8007378:	2010      	movs	r0, #16
 800737a:	f001 f949 	bl	8008610 <malloc>
 800737e:	4602      	mov	r2, r0
 8007380:	6268      	str	r0, [r5, #36]	; 0x24
 8007382:	b920      	cbnz	r0, 800738e <_dtoa_r+0x2e>
 8007384:	21ea      	movs	r1, #234	; 0xea
 8007386:	4bae      	ldr	r3, [pc, #696]	; (8007640 <_dtoa_r+0x2e0>)
 8007388:	48ae      	ldr	r0, [pc, #696]	; (8007644 <_dtoa_r+0x2e4>)
 800738a:	f002 f875 	bl	8009478 <__assert_func>
 800738e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007392:	6004      	str	r4, [r0, #0]
 8007394:	60c4      	str	r4, [r0, #12]
 8007396:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007398:	6819      	ldr	r1, [r3, #0]
 800739a:	b151      	cbz	r1, 80073b2 <_dtoa_r+0x52>
 800739c:	685a      	ldr	r2, [r3, #4]
 800739e:	2301      	movs	r3, #1
 80073a0:	4093      	lsls	r3, r2
 80073a2:	604a      	str	r2, [r1, #4]
 80073a4:	608b      	str	r3, [r1, #8]
 80073a6:	4628      	mov	r0, r5
 80073a8:	f001 f9a8 	bl	80086fc <_Bfree>
 80073ac:	2200      	movs	r2, #0
 80073ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80073b0:	601a      	str	r2, [r3, #0]
 80073b2:	1e3b      	subs	r3, r7, #0
 80073b4:	bfaf      	iteee	ge
 80073b6:	2300      	movge	r3, #0
 80073b8:	2201      	movlt	r2, #1
 80073ba:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80073be:	9305      	strlt	r3, [sp, #20]
 80073c0:	bfa8      	it	ge
 80073c2:	f8c8 3000 	strge.w	r3, [r8]
 80073c6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80073ca:	4b9f      	ldr	r3, [pc, #636]	; (8007648 <_dtoa_r+0x2e8>)
 80073cc:	bfb8      	it	lt
 80073ce:	f8c8 2000 	strlt.w	r2, [r8]
 80073d2:	ea33 0309 	bics.w	r3, r3, r9
 80073d6:	d119      	bne.n	800740c <_dtoa_r+0xac>
 80073d8:	f242 730f 	movw	r3, #9999	; 0x270f
 80073dc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80073de:	6013      	str	r3, [r2, #0]
 80073e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80073e4:	4333      	orrs	r3, r6
 80073e6:	f000 8580 	beq.w	8007eea <_dtoa_r+0xb8a>
 80073ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80073ec:	b953      	cbnz	r3, 8007404 <_dtoa_r+0xa4>
 80073ee:	4b97      	ldr	r3, [pc, #604]	; (800764c <_dtoa_r+0x2ec>)
 80073f0:	e022      	b.n	8007438 <_dtoa_r+0xd8>
 80073f2:	4b97      	ldr	r3, [pc, #604]	; (8007650 <_dtoa_r+0x2f0>)
 80073f4:	9308      	str	r3, [sp, #32]
 80073f6:	3308      	adds	r3, #8
 80073f8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80073fa:	6013      	str	r3, [r2, #0]
 80073fc:	9808      	ldr	r0, [sp, #32]
 80073fe:	b019      	add	sp, #100	; 0x64
 8007400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007404:	4b91      	ldr	r3, [pc, #580]	; (800764c <_dtoa_r+0x2ec>)
 8007406:	9308      	str	r3, [sp, #32]
 8007408:	3303      	adds	r3, #3
 800740a:	e7f5      	b.n	80073f8 <_dtoa_r+0x98>
 800740c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007410:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8007414:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007418:	2200      	movs	r2, #0
 800741a:	2300      	movs	r3, #0
 800741c:	f7f9 fb30 	bl	8000a80 <__aeabi_dcmpeq>
 8007420:	4680      	mov	r8, r0
 8007422:	b158      	cbz	r0, 800743c <_dtoa_r+0xdc>
 8007424:	2301      	movs	r3, #1
 8007426:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007428:	6013      	str	r3, [r2, #0]
 800742a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800742c:	2b00      	cmp	r3, #0
 800742e:	f000 8559 	beq.w	8007ee4 <_dtoa_r+0xb84>
 8007432:	4888      	ldr	r0, [pc, #544]	; (8007654 <_dtoa_r+0x2f4>)
 8007434:	6018      	str	r0, [r3, #0]
 8007436:	1e43      	subs	r3, r0, #1
 8007438:	9308      	str	r3, [sp, #32]
 800743a:	e7df      	b.n	80073fc <_dtoa_r+0x9c>
 800743c:	ab16      	add	r3, sp, #88	; 0x58
 800743e:	9301      	str	r3, [sp, #4]
 8007440:	ab17      	add	r3, sp, #92	; 0x5c
 8007442:	9300      	str	r3, [sp, #0]
 8007444:	4628      	mov	r0, r5
 8007446:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800744a:	f001 fd01 	bl	8008e50 <__d2b>
 800744e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007452:	4682      	mov	sl, r0
 8007454:	2c00      	cmp	r4, #0
 8007456:	d07e      	beq.n	8007556 <_dtoa_r+0x1f6>
 8007458:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800745c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800745e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007462:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007466:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800746a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800746e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8007472:	2200      	movs	r2, #0
 8007474:	4b78      	ldr	r3, [pc, #480]	; (8007658 <_dtoa_r+0x2f8>)
 8007476:	f7f8 fee3 	bl	8000240 <__aeabi_dsub>
 800747a:	a36b      	add	r3, pc, #428	; (adr r3, 8007628 <_dtoa_r+0x2c8>)
 800747c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007480:	f7f9 f896 	bl	80005b0 <__aeabi_dmul>
 8007484:	a36a      	add	r3, pc, #424	; (adr r3, 8007630 <_dtoa_r+0x2d0>)
 8007486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800748a:	f7f8 fedb 	bl	8000244 <__adddf3>
 800748e:	4606      	mov	r6, r0
 8007490:	4620      	mov	r0, r4
 8007492:	460f      	mov	r7, r1
 8007494:	f7f9 f822 	bl	80004dc <__aeabi_i2d>
 8007498:	a367      	add	r3, pc, #412	; (adr r3, 8007638 <_dtoa_r+0x2d8>)
 800749a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800749e:	f7f9 f887 	bl	80005b0 <__aeabi_dmul>
 80074a2:	4602      	mov	r2, r0
 80074a4:	460b      	mov	r3, r1
 80074a6:	4630      	mov	r0, r6
 80074a8:	4639      	mov	r1, r7
 80074aa:	f7f8 fecb 	bl	8000244 <__adddf3>
 80074ae:	4606      	mov	r6, r0
 80074b0:	460f      	mov	r7, r1
 80074b2:	f7f9 fb2d 	bl	8000b10 <__aeabi_d2iz>
 80074b6:	2200      	movs	r2, #0
 80074b8:	4681      	mov	r9, r0
 80074ba:	2300      	movs	r3, #0
 80074bc:	4630      	mov	r0, r6
 80074be:	4639      	mov	r1, r7
 80074c0:	f7f9 fae8 	bl	8000a94 <__aeabi_dcmplt>
 80074c4:	b148      	cbz	r0, 80074da <_dtoa_r+0x17a>
 80074c6:	4648      	mov	r0, r9
 80074c8:	f7f9 f808 	bl	80004dc <__aeabi_i2d>
 80074cc:	4632      	mov	r2, r6
 80074ce:	463b      	mov	r3, r7
 80074d0:	f7f9 fad6 	bl	8000a80 <__aeabi_dcmpeq>
 80074d4:	b908      	cbnz	r0, 80074da <_dtoa_r+0x17a>
 80074d6:	f109 39ff 	add.w	r9, r9, #4294967295
 80074da:	f1b9 0f16 	cmp.w	r9, #22
 80074de:	d857      	bhi.n	8007590 <_dtoa_r+0x230>
 80074e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80074e4:	4b5d      	ldr	r3, [pc, #372]	; (800765c <_dtoa_r+0x2fc>)
 80074e6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80074ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ee:	f7f9 fad1 	bl	8000a94 <__aeabi_dcmplt>
 80074f2:	2800      	cmp	r0, #0
 80074f4:	d04e      	beq.n	8007594 <_dtoa_r+0x234>
 80074f6:	2300      	movs	r3, #0
 80074f8:	f109 39ff 	add.w	r9, r9, #4294967295
 80074fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80074fe:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007500:	1b1c      	subs	r4, r3, r4
 8007502:	1e63      	subs	r3, r4, #1
 8007504:	9309      	str	r3, [sp, #36]	; 0x24
 8007506:	bf49      	itett	mi
 8007508:	f1c4 0301 	rsbmi	r3, r4, #1
 800750c:	2300      	movpl	r3, #0
 800750e:	9306      	strmi	r3, [sp, #24]
 8007510:	2300      	movmi	r3, #0
 8007512:	bf54      	ite	pl
 8007514:	9306      	strpl	r3, [sp, #24]
 8007516:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007518:	f1b9 0f00 	cmp.w	r9, #0
 800751c:	db3c      	blt.n	8007598 <_dtoa_r+0x238>
 800751e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007520:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8007524:	444b      	add	r3, r9
 8007526:	9309      	str	r3, [sp, #36]	; 0x24
 8007528:	2300      	movs	r3, #0
 800752a:	930a      	str	r3, [sp, #40]	; 0x28
 800752c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800752e:	2b09      	cmp	r3, #9
 8007530:	d86c      	bhi.n	800760c <_dtoa_r+0x2ac>
 8007532:	2b05      	cmp	r3, #5
 8007534:	bfc4      	itt	gt
 8007536:	3b04      	subgt	r3, #4
 8007538:	9322      	strgt	r3, [sp, #136]	; 0x88
 800753a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800753c:	bfc8      	it	gt
 800753e:	2400      	movgt	r4, #0
 8007540:	f1a3 0302 	sub.w	r3, r3, #2
 8007544:	bfd8      	it	le
 8007546:	2401      	movle	r4, #1
 8007548:	2b03      	cmp	r3, #3
 800754a:	f200 808b 	bhi.w	8007664 <_dtoa_r+0x304>
 800754e:	e8df f003 	tbb	[pc, r3]
 8007552:	4f2d      	.short	0x4f2d
 8007554:	5b4d      	.short	0x5b4d
 8007556:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800755a:	441c      	add	r4, r3
 800755c:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8007560:	2b20      	cmp	r3, #32
 8007562:	bfc3      	ittte	gt
 8007564:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007568:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800756c:	fa09 f303 	lslgt.w	r3, r9, r3
 8007570:	f1c3 0320 	rsble	r3, r3, #32
 8007574:	bfc6      	itte	gt
 8007576:	fa26 f000 	lsrgt.w	r0, r6, r0
 800757a:	4318      	orrgt	r0, r3
 800757c:	fa06 f003 	lslle.w	r0, r6, r3
 8007580:	f7f8 ff9c 	bl	80004bc <__aeabi_ui2d>
 8007584:	2301      	movs	r3, #1
 8007586:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800758a:	3c01      	subs	r4, #1
 800758c:	9313      	str	r3, [sp, #76]	; 0x4c
 800758e:	e770      	b.n	8007472 <_dtoa_r+0x112>
 8007590:	2301      	movs	r3, #1
 8007592:	e7b3      	b.n	80074fc <_dtoa_r+0x19c>
 8007594:	900f      	str	r0, [sp, #60]	; 0x3c
 8007596:	e7b2      	b.n	80074fe <_dtoa_r+0x19e>
 8007598:	9b06      	ldr	r3, [sp, #24]
 800759a:	eba3 0309 	sub.w	r3, r3, r9
 800759e:	9306      	str	r3, [sp, #24]
 80075a0:	f1c9 0300 	rsb	r3, r9, #0
 80075a4:	930a      	str	r3, [sp, #40]	; 0x28
 80075a6:	2300      	movs	r3, #0
 80075a8:	930e      	str	r3, [sp, #56]	; 0x38
 80075aa:	e7bf      	b.n	800752c <_dtoa_r+0x1cc>
 80075ac:	2300      	movs	r3, #0
 80075ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80075b0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	dc59      	bgt.n	800766a <_dtoa_r+0x30a>
 80075b6:	f04f 0b01 	mov.w	fp, #1
 80075ba:	465b      	mov	r3, fp
 80075bc:	f8cd b008 	str.w	fp, [sp, #8]
 80075c0:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80075c4:	2200      	movs	r2, #0
 80075c6:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80075c8:	6042      	str	r2, [r0, #4]
 80075ca:	2204      	movs	r2, #4
 80075cc:	f102 0614 	add.w	r6, r2, #20
 80075d0:	429e      	cmp	r6, r3
 80075d2:	6841      	ldr	r1, [r0, #4]
 80075d4:	d94f      	bls.n	8007676 <_dtoa_r+0x316>
 80075d6:	4628      	mov	r0, r5
 80075d8:	f001 f850 	bl	800867c <_Balloc>
 80075dc:	9008      	str	r0, [sp, #32]
 80075de:	2800      	cmp	r0, #0
 80075e0:	d14d      	bne.n	800767e <_dtoa_r+0x31e>
 80075e2:	4602      	mov	r2, r0
 80075e4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80075e8:	4b1d      	ldr	r3, [pc, #116]	; (8007660 <_dtoa_r+0x300>)
 80075ea:	e6cd      	b.n	8007388 <_dtoa_r+0x28>
 80075ec:	2301      	movs	r3, #1
 80075ee:	e7de      	b.n	80075ae <_dtoa_r+0x24e>
 80075f0:	2300      	movs	r3, #0
 80075f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80075f4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80075f6:	eb09 0b03 	add.w	fp, r9, r3
 80075fa:	f10b 0301 	add.w	r3, fp, #1
 80075fe:	2b01      	cmp	r3, #1
 8007600:	9302      	str	r3, [sp, #8]
 8007602:	bfb8      	it	lt
 8007604:	2301      	movlt	r3, #1
 8007606:	e7dd      	b.n	80075c4 <_dtoa_r+0x264>
 8007608:	2301      	movs	r3, #1
 800760a:	e7f2      	b.n	80075f2 <_dtoa_r+0x292>
 800760c:	2401      	movs	r4, #1
 800760e:	2300      	movs	r3, #0
 8007610:	940b      	str	r4, [sp, #44]	; 0x2c
 8007612:	9322      	str	r3, [sp, #136]	; 0x88
 8007614:	f04f 3bff 	mov.w	fp, #4294967295
 8007618:	2200      	movs	r2, #0
 800761a:	2312      	movs	r3, #18
 800761c:	f8cd b008 	str.w	fp, [sp, #8]
 8007620:	9223      	str	r2, [sp, #140]	; 0x8c
 8007622:	e7cf      	b.n	80075c4 <_dtoa_r+0x264>
 8007624:	f3af 8000 	nop.w
 8007628:	636f4361 	.word	0x636f4361
 800762c:	3fd287a7 	.word	0x3fd287a7
 8007630:	8b60c8b3 	.word	0x8b60c8b3
 8007634:	3fc68a28 	.word	0x3fc68a28
 8007638:	509f79fb 	.word	0x509f79fb
 800763c:	3fd34413 	.word	0x3fd34413
 8007640:	0800b63e 	.word	0x0800b63e
 8007644:	0800b655 	.word	0x0800b655
 8007648:	7ff00000 	.word	0x7ff00000
 800764c:	0800b63a 	.word	0x0800b63a
 8007650:	0800b631 	.word	0x0800b631
 8007654:	0800b4b1 	.word	0x0800b4b1
 8007658:	3ff80000 	.word	0x3ff80000
 800765c:	0800b7d0 	.word	0x0800b7d0
 8007660:	0800b6b4 	.word	0x0800b6b4
 8007664:	2301      	movs	r3, #1
 8007666:	930b      	str	r3, [sp, #44]	; 0x2c
 8007668:	e7d4      	b.n	8007614 <_dtoa_r+0x2b4>
 800766a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800766e:	465b      	mov	r3, fp
 8007670:	f8cd b008 	str.w	fp, [sp, #8]
 8007674:	e7a6      	b.n	80075c4 <_dtoa_r+0x264>
 8007676:	3101      	adds	r1, #1
 8007678:	6041      	str	r1, [r0, #4]
 800767a:	0052      	lsls	r2, r2, #1
 800767c:	e7a6      	b.n	80075cc <_dtoa_r+0x26c>
 800767e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007680:	9a08      	ldr	r2, [sp, #32]
 8007682:	601a      	str	r2, [r3, #0]
 8007684:	9b02      	ldr	r3, [sp, #8]
 8007686:	2b0e      	cmp	r3, #14
 8007688:	f200 80a8 	bhi.w	80077dc <_dtoa_r+0x47c>
 800768c:	2c00      	cmp	r4, #0
 800768e:	f000 80a5 	beq.w	80077dc <_dtoa_r+0x47c>
 8007692:	f1b9 0f00 	cmp.w	r9, #0
 8007696:	dd34      	ble.n	8007702 <_dtoa_r+0x3a2>
 8007698:	4a9a      	ldr	r2, [pc, #616]	; (8007904 <_dtoa_r+0x5a4>)
 800769a:	f009 030f 	and.w	r3, r9, #15
 800769e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80076a2:	f419 7f80 	tst.w	r9, #256	; 0x100
 80076a6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80076aa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80076ae:	ea4f 1429 	mov.w	r4, r9, asr #4
 80076b2:	d016      	beq.n	80076e2 <_dtoa_r+0x382>
 80076b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80076b8:	4b93      	ldr	r3, [pc, #588]	; (8007908 <_dtoa_r+0x5a8>)
 80076ba:	2703      	movs	r7, #3
 80076bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80076c0:	f7f9 f8a0 	bl	8000804 <__aeabi_ddiv>
 80076c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80076c8:	f004 040f 	and.w	r4, r4, #15
 80076cc:	4e8e      	ldr	r6, [pc, #568]	; (8007908 <_dtoa_r+0x5a8>)
 80076ce:	b954      	cbnz	r4, 80076e6 <_dtoa_r+0x386>
 80076d0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80076d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80076d8:	f7f9 f894 	bl	8000804 <__aeabi_ddiv>
 80076dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80076e0:	e029      	b.n	8007736 <_dtoa_r+0x3d6>
 80076e2:	2702      	movs	r7, #2
 80076e4:	e7f2      	b.n	80076cc <_dtoa_r+0x36c>
 80076e6:	07e1      	lsls	r1, r4, #31
 80076e8:	d508      	bpl.n	80076fc <_dtoa_r+0x39c>
 80076ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80076ee:	e9d6 2300 	ldrd	r2, r3, [r6]
 80076f2:	f7f8 ff5d 	bl	80005b0 <__aeabi_dmul>
 80076f6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80076fa:	3701      	adds	r7, #1
 80076fc:	1064      	asrs	r4, r4, #1
 80076fe:	3608      	adds	r6, #8
 8007700:	e7e5      	b.n	80076ce <_dtoa_r+0x36e>
 8007702:	f000 80a5 	beq.w	8007850 <_dtoa_r+0x4f0>
 8007706:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800770a:	f1c9 0400 	rsb	r4, r9, #0
 800770e:	4b7d      	ldr	r3, [pc, #500]	; (8007904 <_dtoa_r+0x5a4>)
 8007710:	f004 020f 	and.w	r2, r4, #15
 8007714:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800771c:	f7f8 ff48 	bl	80005b0 <__aeabi_dmul>
 8007720:	2702      	movs	r7, #2
 8007722:	2300      	movs	r3, #0
 8007724:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007728:	4e77      	ldr	r6, [pc, #476]	; (8007908 <_dtoa_r+0x5a8>)
 800772a:	1124      	asrs	r4, r4, #4
 800772c:	2c00      	cmp	r4, #0
 800772e:	f040 8084 	bne.w	800783a <_dtoa_r+0x4da>
 8007732:	2b00      	cmp	r3, #0
 8007734:	d1d2      	bne.n	80076dc <_dtoa_r+0x37c>
 8007736:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007738:	2b00      	cmp	r3, #0
 800773a:	f000 808b 	beq.w	8007854 <_dtoa_r+0x4f4>
 800773e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007742:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007746:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800774a:	2200      	movs	r2, #0
 800774c:	4b6f      	ldr	r3, [pc, #444]	; (800790c <_dtoa_r+0x5ac>)
 800774e:	f7f9 f9a1 	bl	8000a94 <__aeabi_dcmplt>
 8007752:	2800      	cmp	r0, #0
 8007754:	d07e      	beq.n	8007854 <_dtoa_r+0x4f4>
 8007756:	9b02      	ldr	r3, [sp, #8]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d07b      	beq.n	8007854 <_dtoa_r+0x4f4>
 800775c:	f1bb 0f00 	cmp.w	fp, #0
 8007760:	dd38      	ble.n	80077d4 <_dtoa_r+0x474>
 8007762:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007766:	2200      	movs	r2, #0
 8007768:	4b69      	ldr	r3, [pc, #420]	; (8007910 <_dtoa_r+0x5b0>)
 800776a:	f7f8 ff21 	bl	80005b0 <__aeabi_dmul>
 800776e:	465c      	mov	r4, fp
 8007770:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007774:	f109 38ff 	add.w	r8, r9, #4294967295
 8007778:	3701      	adds	r7, #1
 800777a:	4638      	mov	r0, r7
 800777c:	f7f8 feae 	bl	80004dc <__aeabi_i2d>
 8007780:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007784:	f7f8 ff14 	bl	80005b0 <__aeabi_dmul>
 8007788:	2200      	movs	r2, #0
 800778a:	4b62      	ldr	r3, [pc, #392]	; (8007914 <_dtoa_r+0x5b4>)
 800778c:	f7f8 fd5a 	bl	8000244 <__adddf3>
 8007790:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007794:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007798:	9611      	str	r6, [sp, #68]	; 0x44
 800779a:	2c00      	cmp	r4, #0
 800779c:	d15d      	bne.n	800785a <_dtoa_r+0x4fa>
 800779e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80077a2:	2200      	movs	r2, #0
 80077a4:	4b5c      	ldr	r3, [pc, #368]	; (8007918 <_dtoa_r+0x5b8>)
 80077a6:	f7f8 fd4b 	bl	8000240 <__aeabi_dsub>
 80077aa:	4602      	mov	r2, r0
 80077ac:	460b      	mov	r3, r1
 80077ae:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80077b2:	4633      	mov	r3, r6
 80077b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80077b6:	f7f9 f98b 	bl	8000ad0 <__aeabi_dcmpgt>
 80077ba:	2800      	cmp	r0, #0
 80077bc:	f040 829e 	bne.w	8007cfc <_dtoa_r+0x99c>
 80077c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80077c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80077c6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80077ca:	f7f9 f963 	bl	8000a94 <__aeabi_dcmplt>
 80077ce:	2800      	cmp	r0, #0
 80077d0:	f040 8292 	bne.w	8007cf8 <_dtoa_r+0x998>
 80077d4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80077d8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80077dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80077de:	2b00      	cmp	r3, #0
 80077e0:	f2c0 8153 	blt.w	8007a8a <_dtoa_r+0x72a>
 80077e4:	f1b9 0f0e 	cmp.w	r9, #14
 80077e8:	f300 814f 	bgt.w	8007a8a <_dtoa_r+0x72a>
 80077ec:	4b45      	ldr	r3, [pc, #276]	; (8007904 <_dtoa_r+0x5a4>)
 80077ee:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80077f2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80077f6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80077fa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	f280 80db 	bge.w	80079b8 <_dtoa_r+0x658>
 8007802:	9b02      	ldr	r3, [sp, #8]
 8007804:	2b00      	cmp	r3, #0
 8007806:	f300 80d7 	bgt.w	80079b8 <_dtoa_r+0x658>
 800780a:	f040 8274 	bne.w	8007cf6 <_dtoa_r+0x996>
 800780e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007812:	2200      	movs	r2, #0
 8007814:	4b40      	ldr	r3, [pc, #256]	; (8007918 <_dtoa_r+0x5b8>)
 8007816:	f7f8 fecb 	bl	80005b0 <__aeabi_dmul>
 800781a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800781e:	f7f9 f94d 	bl	8000abc <__aeabi_dcmpge>
 8007822:	9c02      	ldr	r4, [sp, #8]
 8007824:	4626      	mov	r6, r4
 8007826:	2800      	cmp	r0, #0
 8007828:	f040 824a 	bne.w	8007cc0 <_dtoa_r+0x960>
 800782c:	2331      	movs	r3, #49	; 0x31
 800782e:	9f08      	ldr	r7, [sp, #32]
 8007830:	f109 0901 	add.w	r9, r9, #1
 8007834:	f807 3b01 	strb.w	r3, [r7], #1
 8007838:	e246      	b.n	8007cc8 <_dtoa_r+0x968>
 800783a:	07e2      	lsls	r2, r4, #31
 800783c:	d505      	bpl.n	800784a <_dtoa_r+0x4ea>
 800783e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007842:	f7f8 feb5 	bl	80005b0 <__aeabi_dmul>
 8007846:	2301      	movs	r3, #1
 8007848:	3701      	adds	r7, #1
 800784a:	1064      	asrs	r4, r4, #1
 800784c:	3608      	adds	r6, #8
 800784e:	e76d      	b.n	800772c <_dtoa_r+0x3cc>
 8007850:	2702      	movs	r7, #2
 8007852:	e770      	b.n	8007736 <_dtoa_r+0x3d6>
 8007854:	46c8      	mov	r8, r9
 8007856:	9c02      	ldr	r4, [sp, #8]
 8007858:	e78f      	b.n	800777a <_dtoa_r+0x41a>
 800785a:	9908      	ldr	r1, [sp, #32]
 800785c:	4b29      	ldr	r3, [pc, #164]	; (8007904 <_dtoa_r+0x5a4>)
 800785e:	4421      	add	r1, r4
 8007860:	9112      	str	r1, [sp, #72]	; 0x48
 8007862:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007864:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007868:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800786c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007870:	2900      	cmp	r1, #0
 8007872:	d055      	beq.n	8007920 <_dtoa_r+0x5c0>
 8007874:	2000      	movs	r0, #0
 8007876:	4929      	ldr	r1, [pc, #164]	; (800791c <_dtoa_r+0x5bc>)
 8007878:	f7f8 ffc4 	bl	8000804 <__aeabi_ddiv>
 800787c:	463b      	mov	r3, r7
 800787e:	4632      	mov	r2, r6
 8007880:	f7f8 fcde 	bl	8000240 <__aeabi_dsub>
 8007884:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007888:	9f08      	ldr	r7, [sp, #32]
 800788a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800788e:	f7f9 f93f 	bl	8000b10 <__aeabi_d2iz>
 8007892:	4604      	mov	r4, r0
 8007894:	f7f8 fe22 	bl	80004dc <__aeabi_i2d>
 8007898:	4602      	mov	r2, r0
 800789a:	460b      	mov	r3, r1
 800789c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80078a0:	f7f8 fcce 	bl	8000240 <__aeabi_dsub>
 80078a4:	4602      	mov	r2, r0
 80078a6:	460b      	mov	r3, r1
 80078a8:	3430      	adds	r4, #48	; 0x30
 80078aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80078ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80078b2:	f807 4b01 	strb.w	r4, [r7], #1
 80078b6:	f7f9 f8ed 	bl	8000a94 <__aeabi_dcmplt>
 80078ba:	2800      	cmp	r0, #0
 80078bc:	d174      	bne.n	80079a8 <_dtoa_r+0x648>
 80078be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80078c2:	2000      	movs	r0, #0
 80078c4:	4911      	ldr	r1, [pc, #68]	; (800790c <_dtoa_r+0x5ac>)
 80078c6:	f7f8 fcbb 	bl	8000240 <__aeabi_dsub>
 80078ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80078ce:	f7f9 f8e1 	bl	8000a94 <__aeabi_dcmplt>
 80078d2:	2800      	cmp	r0, #0
 80078d4:	f040 80b6 	bne.w	8007a44 <_dtoa_r+0x6e4>
 80078d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80078da:	429f      	cmp	r7, r3
 80078dc:	f43f af7a 	beq.w	80077d4 <_dtoa_r+0x474>
 80078e0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80078e4:	2200      	movs	r2, #0
 80078e6:	4b0a      	ldr	r3, [pc, #40]	; (8007910 <_dtoa_r+0x5b0>)
 80078e8:	f7f8 fe62 	bl	80005b0 <__aeabi_dmul>
 80078ec:	2200      	movs	r2, #0
 80078ee:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80078f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80078f6:	4b06      	ldr	r3, [pc, #24]	; (8007910 <_dtoa_r+0x5b0>)
 80078f8:	f7f8 fe5a 	bl	80005b0 <__aeabi_dmul>
 80078fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007900:	e7c3      	b.n	800788a <_dtoa_r+0x52a>
 8007902:	bf00      	nop
 8007904:	0800b7d0 	.word	0x0800b7d0
 8007908:	0800b7a8 	.word	0x0800b7a8
 800790c:	3ff00000 	.word	0x3ff00000
 8007910:	40240000 	.word	0x40240000
 8007914:	401c0000 	.word	0x401c0000
 8007918:	40140000 	.word	0x40140000
 800791c:	3fe00000 	.word	0x3fe00000
 8007920:	4630      	mov	r0, r6
 8007922:	4639      	mov	r1, r7
 8007924:	f7f8 fe44 	bl	80005b0 <__aeabi_dmul>
 8007928:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800792a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800792e:	9c08      	ldr	r4, [sp, #32]
 8007930:	9314      	str	r3, [sp, #80]	; 0x50
 8007932:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007936:	f7f9 f8eb 	bl	8000b10 <__aeabi_d2iz>
 800793a:	9015      	str	r0, [sp, #84]	; 0x54
 800793c:	f7f8 fdce 	bl	80004dc <__aeabi_i2d>
 8007940:	4602      	mov	r2, r0
 8007942:	460b      	mov	r3, r1
 8007944:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007948:	f7f8 fc7a 	bl	8000240 <__aeabi_dsub>
 800794c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800794e:	4606      	mov	r6, r0
 8007950:	3330      	adds	r3, #48	; 0x30
 8007952:	f804 3b01 	strb.w	r3, [r4], #1
 8007956:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007958:	460f      	mov	r7, r1
 800795a:	429c      	cmp	r4, r3
 800795c:	f04f 0200 	mov.w	r2, #0
 8007960:	d124      	bne.n	80079ac <_dtoa_r+0x64c>
 8007962:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007966:	4bb3      	ldr	r3, [pc, #716]	; (8007c34 <_dtoa_r+0x8d4>)
 8007968:	f7f8 fc6c 	bl	8000244 <__adddf3>
 800796c:	4602      	mov	r2, r0
 800796e:	460b      	mov	r3, r1
 8007970:	4630      	mov	r0, r6
 8007972:	4639      	mov	r1, r7
 8007974:	f7f9 f8ac 	bl	8000ad0 <__aeabi_dcmpgt>
 8007978:	2800      	cmp	r0, #0
 800797a:	d162      	bne.n	8007a42 <_dtoa_r+0x6e2>
 800797c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007980:	2000      	movs	r0, #0
 8007982:	49ac      	ldr	r1, [pc, #688]	; (8007c34 <_dtoa_r+0x8d4>)
 8007984:	f7f8 fc5c 	bl	8000240 <__aeabi_dsub>
 8007988:	4602      	mov	r2, r0
 800798a:	460b      	mov	r3, r1
 800798c:	4630      	mov	r0, r6
 800798e:	4639      	mov	r1, r7
 8007990:	f7f9 f880 	bl	8000a94 <__aeabi_dcmplt>
 8007994:	2800      	cmp	r0, #0
 8007996:	f43f af1d 	beq.w	80077d4 <_dtoa_r+0x474>
 800799a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800799c:	1e7b      	subs	r3, r7, #1
 800799e:	9314      	str	r3, [sp, #80]	; 0x50
 80079a0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80079a4:	2b30      	cmp	r3, #48	; 0x30
 80079a6:	d0f8      	beq.n	800799a <_dtoa_r+0x63a>
 80079a8:	46c1      	mov	r9, r8
 80079aa:	e03a      	b.n	8007a22 <_dtoa_r+0x6c2>
 80079ac:	4ba2      	ldr	r3, [pc, #648]	; (8007c38 <_dtoa_r+0x8d8>)
 80079ae:	f7f8 fdff 	bl	80005b0 <__aeabi_dmul>
 80079b2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80079b6:	e7bc      	b.n	8007932 <_dtoa_r+0x5d2>
 80079b8:	9f08      	ldr	r7, [sp, #32]
 80079ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80079be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80079c2:	f7f8 ff1f 	bl	8000804 <__aeabi_ddiv>
 80079c6:	f7f9 f8a3 	bl	8000b10 <__aeabi_d2iz>
 80079ca:	4604      	mov	r4, r0
 80079cc:	f7f8 fd86 	bl	80004dc <__aeabi_i2d>
 80079d0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80079d4:	f7f8 fdec 	bl	80005b0 <__aeabi_dmul>
 80079d8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80079dc:	460b      	mov	r3, r1
 80079de:	4602      	mov	r2, r0
 80079e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80079e4:	f7f8 fc2c 	bl	8000240 <__aeabi_dsub>
 80079e8:	f807 6b01 	strb.w	r6, [r7], #1
 80079ec:	9e08      	ldr	r6, [sp, #32]
 80079ee:	9b02      	ldr	r3, [sp, #8]
 80079f0:	1bbe      	subs	r6, r7, r6
 80079f2:	42b3      	cmp	r3, r6
 80079f4:	d13a      	bne.n	8007a6c <_dtoa_r+0x70c>
 80079f6:	4602      	mov	r2, r0
 80079f8:	460b      	mov	r3, r1
 80079fa:	f7f8 fc23 	bl	8000244 <__adddf3>
 80079fe:	4602      	mov	r2, r0
 8007a00:	460b      	mov	r3, r1
 8007a02:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007a06:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007a0a:	f7f9 f861 	bl	8000ad0 <__aeabi_dcmpgt>
 8007a0e:	bb58      	cbnz	r0, 8007a68 <_dtoa_r+0x708>
 8007a10:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007a14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a18:	f7f9 f832 	bl	8000a80 <__aeabi_dcmpeq>
 8007a1c:	b108      	cbz	r0, 8007a22 <_dtoa_r+0x6c2>
 8007a1e:	07e1      	lsls	r1, r4, #31
 8007a20:	d422      	bmi.n	8007a68 <_dtoa_r+0x708>
 8007a22:	4628      	mov	r0, r5
 8007a24:	4651      	mov	r1, sl
 8007a26:	f000 fe69 	bl	80086fc <_Bfree>
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	703b      	strb	r3, [r7, #0]
 8007a2e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007a30:	f109 0001 	add.w	r0, r9, #1
 8007a34:	6018      	str	r0, [r3, #0]
 8007a36:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	f43f acdf 	beq.w	80073fc <_dtoa_r+0x9c>
 8007a3e:	601f      	str	r7, [r3, #0]
 8007a40:	e4dc      	b.n	80073fc <_dtoa_r+0x9c>
 8007a42:	4627      	mov	r7, r4
 8007a44:	463b      	mov	r3, r7
 8007a46:	461f      	mov	r7, r3
 8007a48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007a4c:	2a39      	cmp	r2, #57	; 0x39
 8007a4e:	d107      	bne.n	8007a60 <_dtoa_r+0x700>
 8007a50:	9a08      	ldr	r2, [sp, #32]
 8007a52:	429a      	cmp	r2, r3
 8007a54:	d1f7      	bne.n	8007a46 <_dtoa_r+0x6e6>
 8007a56:	2230      	movs	r2, #48	; 0x30
 8007a58:	9908      	ldr	r1, [sp, #32]
 8007a5a:	f108 0801 	add.w	r8, r8, #1
 8007a5e:	700a      	strb	r2, [r1, #0]
 8007a60:	781a      	ldrb	r2, [r3, #0]
 8007a62:	3201      	adds	r2, #1
 8007a64:	701a      	strb	r2, [r3, #0]
 8007a66:	e79f      	b.n	80079a8 <_dtoa_r+0x648>
 8007a68:	46c8      	mov	r8, r9
 8007a6a:	e7eb      	b.n	8007a44 <_dtoa_r+0x6e4>
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	4b72      	ldr	r3, [pc, #456]	; (8007c38 <_dtoa_r+0x8d8>)
 8007a70:	f7f8 fd9e 	bl	80005b0 <__aeabi_dmul>
 8007a74:	4602      	mov	r2, r0
 8007a76:	460b      	mov	r3, r1
 8007a78:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	2300      	movs	r3, #0
 8007a80:	f7f8 fffe 	bl	8000a80 <__aeabi_dcmpeq>
 8007a84:	2800      	cmp	r0, #0
 8007a86:	d098      	beq.n	80079ba <_dtoa_r+0x65a>
 8007a88:	e7cb      	b.n	8007a22 <_dtoa_r+0x6c2>
 8007a8a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007a8c:	2a00      	cmp	r2, #0
 8007a8e:	f000 80cd 	beq.w	8007c2c <_dtoa_r+0x8cc>
 8007a92:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007a94:	2a01      	cmp	r2, #1
 8007a96:	f300 80af 	bgt.w	8007bf8 <_dtoa_r+0x898>
 8007a9a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007a9c:	2a00      	cmp	r2, #0
 8007a9e:	f000 80a7 	beq.w	8007bf0 <_dtoa_r+0x890>
 8007aa2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007aa6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007aa8:	9f06      	ldr	r7, [sp, #24]
 8007aaa:	9a06      	ldr	r2, [sp, #24]
 8007aac:	2101      	movs	r1, #1
 8007aae:	441a      	add	r2, r3
 8007ab0:	9206      	str	r2, [sp, #24]
 8007ab2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ab4:	4628      	mov	r0, r5
 8007ab6:	441a      	add	r2, r3
 8007ab8:	9209      	str	r2, [sp, #36]	; 0x24
 8007aba:	f000 ff23 	bl	8008904 <__i2b>
 8007abe:	4606      	mov	r6, r0
 8007ac0:	2f00      	cmp	r7, #0
 8007ac2:	dd0c      	ble.n	8007ade <_dtoa_r+0x77e>
 8007ac4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	dd09      	ble.n	8007ade <_dtoa_r+0x77e>
 8007aca:	42bb      	cmp	r3, r7
 8007acc:	bfa8      	it	ge
 8007ace:	463b      	movge	r3, r7
 8007ad0:	9a06      	ldr	r2, [sp, #24]
 8007ad2:	1aff      	subs	r7, r7, r3
 8007ad4:	1ad2      	subs	r2, r2, r3
 8007ad6:	9206      	str	r2, [sp, #24]
 8007ad8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ada:	1ad3      	subs	r3, r2, r3
 8007adc:	9309      	str	r3, [sp, #36]	; 0x24
 8007ade:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ae0:	b1f3      	cbz	r3, 8007b20 <_dtoa_r+0x7c0>
 8007ae2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	f000 80a9 	beq.w	8007c3c <_dtoa_r+0x8dc>
 8007aea:	2c00      	cmp	r4, #0
 8007aec:	dd10      	ble.n	8007b10 <_dtoa_r+0x7b0>
 8007aee:	4631      	mov	r1, r6
 8007af0:	4622      	mov	r2, r4
 8007af2:	4628      	mov	r0, r5
 8007af4:	f000 ffc0 	bl	8008a78 <__pow5mult>
 8007af8:	4652      	mov	r2, sl
 8007afa:	4601      	mov	r1, r0
 8007afc:	4606      	mov	r6, r0
 8007afe:	4628      	mov	r0, r5
 8007b00:	f000 ff16 	bl	8008930 <__multiply>
 8007b04:	4680      	mov	r8, r0
 8007b06:	4651      	mov	r1, sl
 8007b08:	4628      	mov	r0, r5
 8007b0a:	f000 fdf7 	bl	80086fc <_Bfree>
 8007b0e:	46c2      	mov	sl, r8
 8007b10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b12:	1b1a      	subs	r2, r3, r4
 8007b14:	d004      	beq.n	8007b20 <_dtoa_r+0x7c0>
 8007b16:	4651      	mov	r1, sl
 8007b18:	4628      	mov	r0, r5
 8007b1a:	f000 ffad 	bl	8008a78 <__pow5mult>
 8007b1e:	4682      	mov	sl, r0
 8007b20:	2101      	movs	r1, #1
 8007b22:	4628      	mov	r0, r5
 8007b24:	f000 feee 	bl	8008904 <__i2b>
 8007b28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007b2a:	4604      	mov	r4, r0
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	f340 8087 	ble.w	8007c40 <_dtoa_r+0x8e0>
 8007b32:	461a      	mov	r2, r3
 8007b34:	4601      	mov	r1, r0
 8007b36:	4628      	mov	r0, r5
 8007b38:	f000 ff9e 	bl	8008a78 <__pow5mult>
 8007b3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007b3e:	4604      	mov	r4, r0
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	f340 8080 	ble.w	8007c46 <_dtoa_r+0x8e6>
 8007b46:	f04f 0800 	mov.w	r8, #0
 8007b4a:	6923      	ldr	r3, [r4, #16]
 8007b4c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007b50:	6918      	ldr	r0, [r3, #16]
 8007b52:	f000 fe89 	bl	8008868 <__hi0bits>
 8007b56:	f1c0 0020 	rsb	r0, r0, #32
 8007b5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b5c:	4418      	add	r0, r3
 8007b5e:	f010 001f 	ands.w	r0, r0, #31
 8007b62:	f000 8092 	beq.w	8007c8a <_dtoa_r+0x92a>
 8007b66:	f1c0 0320 	rsb	r3, r0, #32
 8007b6a:	2b04      	cmp	r3, #4
 8007b6c:	f340 808a 	ble.w	8007c84 <_dtoa_r+0x924>
 8007b70:	f1c0 001c 	rsb	r0, r0, #28
 8007b74:	9b06      	ldr	r3, [sp, #24]
 8007b76:	4407      	add	r7, r0
 8007b78:	4403      	add	r3, r0
 8007b7a:	9306      	str	r3, [sp, #24]
 8007b7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b7e:	4403      	add	r3, r0
 8007b80:	9309      	str	r3, [sp, #36]	; 0x24
 8007b82:	9b06      	ldr	r3, [sp, #24]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	dd05      	ble.n	8007b94 <_dtoa_r+0x834>
 8007b88:	4651      	mov	r1, sl
 8007b8a:	461a      	mov	r2, r3
 8007b8c:	4628      	mov	r0, r5
 8007b8e:	f000 ffcd 	bl	8008b2c <__lshift>
 8007b92:	4682      	mov	sl, r0
 8007b94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	dd05      	ble.n	8007ba6 <_dtoa_r+0x846>
 8007b9a:	4621      	mov	r1, r4
 8007b9c:	461a      	mov	r2, r3
 8007b9e:	4628      	mov	r0, r5
 8007ba0:	f000 ffc4 	bl	8008b2c <__lshift>
 8007ba4:	4604      	mov	r4, r0
 8007ba6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d070      	beq.n	8007c8e <_dtoa_r+0x92e>
 8007bac:	4621      	mov	r1, r4
 8007bae:	4650      	mov	r0, sl
 8007bb0:	f001 f828 	bl	8008c04 <__mcmp>
 8007bb4:	2800      	cmp	r0, #0
 8007bb6:	da6a      	bge.n	8007c8e <_dtoa_r+0x92e>
 8007bb8:	2300      	movs	r3, #0
 8007bba:	4651      	mov	r1, sl
 8007bbc:	220a      	movs	r2, #10
 8007bbe:	4628      	mov	r0, r5
 8007bc0:	f000 fdbe 	bl	8008740 <__multadd>
 8007bc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007bc6:	4682      	mov	sl, r0
 8007bc8:	f109 39ff 	add.w	r9, r9, #4294967295
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	f000 8193 	beq.w	8007ef8 <_dtoa_r+0xb98>
 8007bd2:	4631      	mov	r1, r6
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	220a      	movs	r2, #10
 8007bd8:	4628      	mov	r0, r5
 8007bda:	f000 fdb1 	bl	8008740 <__multadd>
 8007bde:	f1bb 0f00 	cmp.w	fp, #0
 8007be2:	4606      	mov	r6, r0
 8007be4:	f300 8093 	bgt.w	8007d0e <_dtoa_r+0x9ae>
 8007be8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007bea:	2b02      	cmp	r3, #2
 8007bec:	dc57      	bgt.n	8007c9e <_dtoa_r+0x93e>
 8007bee:	e08e      	b.n	8007d0e <_dtoa_r+0x9ae>
 8007bf0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007bf2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007bf6:	e756      	b.n	8007aa6 <_dtoa_r+0x746>
 8007bf8:	9b02      	ldr	r3, [sp, #8]
 8007bfa:	1e5c      	subs	r4, r3, #1
 8007bfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bfe:	42a3      	cmp	r3, r4
 8007c00:	bfb7      	itett	lt
 8007c02:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007c04:	1b1c      	subge	r4, r3, r4
 8007c06:	1ae2      	sublt	r2, r4, r3
 8007c08:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007c0a:	bfbe      	ittt	lt
 8007c0c:	940a      	strlt	r4, [sp, #40]	; 0x28
 8007c0e:	189b      	addlt	r3, r3, r2
 8007c10:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007c12:	9b02      	ldr	r3, [sp, #8]
 8007c14:	bfb8      	it	lt
 8007c16:	2400      	movlt	r4, #0
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	bfbb      	ittet	lt
 8007c1c:	9b06      	ldrlt	r3, [sp, #24]
 8007c1e:	9a02      	ldrlt	r2, [sp, #8]
 8007c20:	9f06      	ldrge	r7, [sp, #24]
 8007c22:	1a9f      	sublt	r7, r3, r2
 8007c24:	bfac      	ite	ge
 8007c26:	9b02      	ldrge	r3, [sp, #8]
 8007c28:	2300      	movlt	r3, #0
 8007c2a:	e73e      	b.n	8007aaa <_dtoa_r+0x74a>
 8007c2c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007c2e:	9f06      	ldr	r7, [sp, #24]
 8007c30:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007c32:	e745      	b.n	8007ac0 <_dtoa_r+0x760>
 8007c34:	3fe00000 	.word	0x3fe00000
 8007c38:	40240000 	.word	0x40240000
 8007c3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c3e:	e76a      	b.n	8007b16 <_dtoa_r+0x7b6>
 8007c40:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007c42:	2b01      	cmp	r3, #1
 8007c44:	dc19      	bgt.n	8007c7a <_dtoa_r+0x91a>
 8007c46:	9b04      	ldr	r3, [sp, #16]
 8007c48:	b9bb      	cbnz	r3, 8007c7a <_dtoa_r+0x91a>
 8007c4a:	9b05      	ldr	r3, [sp, #20]
 8007c4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c50:	b99b      	cbnz	r3, 8007c7a <_dtoa_r+0x91a>
 8007c52:	9b05      	ldr	r3, [sp, #20]
 8007c54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007c58:	0d1b      	lsrs	r3, r3, #20
 8007c5a:	051b      	lsls	r3, r3, #20
 8007c5c:	b183      	cbz	r3, 8007c80 <_dtoa_r+0x920>
 8007c5e:	f04f 0801 	mov.w	r8, #1
 8007c62:	9b06      	ldr	r3, [sp, #24]
 8007c64:	3301      	adds	r3, #1
 8007c66:	9306      	str	r3, [sp, #24]
 8007c68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c6a:	3301      	adds	r3, #1
 8007c6c:	9309      	str	r3, [sp, #36]	; 0x24
 8007c6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	f47f af6a 	bne.w	8007b4a <_dtoa_r+0x7ea>
 8007c76:	2001      	movs	r0, #1
 8007c78:	e76f      	b.n	8007b5a <_dtoa_r+0x7fa>
 8007c7a:	f04f 0800 	mov.w	r8, #0
 8007c7e:	e7f6      	b.n	8007c6e <_dtoa_r+0x90e>
 8007c80:	4698      	mov	r8, r3
 8007c82:	e7f4      	b.n	8007c6e <_dtoa_r+0x90e>
 8007c84:	f43f af7d 	beq.w	8007b82 <_dtoa_r+0x822>
 8007c88:	4618      	mov	r0, r3
 8007c8a:	301c      	adds	r0, #28
 8007c8c:	e772      	b.n	8007b74 <_dtoa_r+0x814>
 8007c8e:	9b02      	ldr	r3, [sp, #8]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	dc36      	bgt.n	8007d02 <_dtoa_r+0x9a2>
 8007c94:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007c96:	2b02      	cmp	r3, #2
 8007c98:	dd33      	ble.n	8007d02 <_dtoa_r+0x9a2>
 8007c9a:	f8dd b008 	ldr.w	fp, [sp, #8]
 8007c9e:	f1bb 0f00 	cmp.w	fp, #0
 8007ca2:	d10d      	bne.n	8007cc0 <_dtoa_r+0x960>
 8007ca4:	4621      	mov	r1, r4
 8007ca6:	465b      	mov	r3, fp
 8007ca8:	2205      	movs	r2, #5
 8007caa:	4628      	mov	r0, r5
 8007cac:	f000 fd48 	bl	8008740 <__multadd>
 8007cb0:	4601      	mov	r1, r0
 8007cb2:	4604      	mov	r4, r0
 8007cb4:	4650      	mov	r0, sl
 8007cb6:	f000 ffa5 	bl	8008c04 <__mcmp>
 8007cba:	2800      	cmp	r0, #0
 8007cbc:	f73f adb6 	bgt.w	800782c <_dtoa_r+0x4cc>
 8007cc0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007cc2:	9f08      	ldr	r7, [sp, #32]
 8007cc4:	ea6f 0903 	mvn.w	r9, r3
 8007cc8:	f04f 0800 	mov.w	r8, #0
 8007ccc:	4621      	mov	r1, r4
 8007cce:	4628      	mov	r0, r5
 8007cd0:	f000 fd14 	bl	80086fc <_Bfree>
 8007cd4:	2e00      	cmp	r6, #0
 8007cd6:	f43f aea4 	beq.w	8007a22 <_dtoa_r+0x6c2>
 8007cda:	f1b8 0f00 	cmp.w	r8, #0
 8007cde:	d005      	beq.n	8007cec <_dtoa_r+0x98c>
 8007ce0:	45b0      	cmp	r8, r6
 8007ce2:	d003      	beq.n	8007cec <_dtoa_r+0x98c>
 8007ce4:	4641      	mov	r1, r8
 8007ce6:	4628      	mov	r0, r5
 8007ce8:	f000 fd08 	bl	80086fc <_Bfree>
 8007cec:	4631      	mov	r1, r6
 8007cee:	4628      	mov	r0, r5
 8007cf0:	f000 fd04 	bl	80086fc <_Bfree>
 8007cf4:	e695      	b.n	8007a22 <_dtoa_r+0x6c2>
 8007cf6:	2400      	movs	r4, #0
 8007cf8:	4626      	mov	r6, r4
 8007cfa:	e7e1      	b.n	8007cc0 <_dtoa_r+0x960>
 8007cfc:	46c1      	mov	r9, r8
 8007cfe:	4626      	mov	r6, r4
 8007d00:	e594      	b.n	800782c <_dtoa_r+0x4cc>
 8007d02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d04:	f8dd b008 	ldr.w	fp, [sp, #8]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	f000 80fc 	beq.w	8007f06 <_dtoa_r+0xba6>
 8007d0e:	2f00      	cmp	r7, #0
 8007d10:	dd05      	ble.n	8007d1e <_dtoa_r+0x9be>
 8007d12:	4631      	mov	r1, r6
 8007d14:	463a      	mov	r2, r7
 8007d16:	4628      	mov	r0, r5
 8007d18:	f000 ff08 	bl	8008b2c <__lshift>
 8007d1c:	4606      	mov	r6, r0
 8007d1e:	f1b8 0f00 	cmp.w	r8, #0
 8007d22:	d05c      	beq.n	8007dde <_dtoa_r+0xa7e>
 8007d24:	4628      	mov	r0, r5
 8007d26:	6871      	ldr	r1, [r6, #4]
 8007d28:	f000 fca8 	bl	800867c <_Balloc>
 8007d2c:	4607      	mov	r7, r0
 8007d2e:	b928      	cbnz	r0, 8007d3c <_dtoa_r+0x9dc>
 8007d30:	4602      	mov	r2, r0
 8007d32:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007d36:	4b7e      	ldr	r3, [pc, #504]	; (8007f30 <_dtoa_r+0xbd0>)
 8007d38:	f7ff bb26 	b.w	8007388 <_dtoa_r+0x28>
 8007d3c:	6932      	ldr	r2, [r6, #16]
 8007d3e:	f106 010c 	add.w	r1, r6, #12
 8007d42:	3202      	adds	r2, #2
 8007d44:	0092      	lsls	r2, r2, #2
 8007d46:	300c      	adds	r0, #12
 8007d48:	f000 fc8a 	bl	8008660 <memcpy>
 8007d4c:	2201      	movs	r2, #1
 8007d4e:	4639      	mov	r1, r7
 8007d50:	4628      	mov	r0, r5
 8007d52:	f000 feeb 	bl	8008b2c <__lshift>
 8007d56:	46b0      	mov	r8, r6
 8007d58:	4606      	mov	r6, r0
 8007d5a:	9b08      	ldr	r3, [sp, #32]
 8007d5c:	3301      	adds	r3, #1
 8007d5e:	9302      	str	r3, [sp, #8]
 8007d60:	9b08      	ldr	r3, [sp, #32]
 8007d62:	445b      	add	r3, fp
 8007d64:	930a      	str	r3, [sp, #40]	; 0x28
 8007d66:	9b04      	ldr	r3, [sp, #16]
 8007d68:	f003 0301 	and.w	r3, r3, #1
 8007d6c:	9309      	str	r3, [sp, #36]	; 0x24
 8007d6e:	9b02      	ldr	r3, [sp, #8]
 8007d70:	4621      	mov	r1, r4
 8007d72:	4650      	mov	r0, sl
 8007d74:	f103 3bff 	add.w	fp, r3, #4294967295
 8007d78:	f7ff fa64 	bl	8007244 <quorem>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	4641      	mov	r1, r8
 8007d80:	3330      	adds	r3, #48	; 0x30
 8007d82:	9004      	str	r0, [sp, #16]
 8007d84:	4650      	mov	r0, sl
 8007d86:	930b      	str	r3, [sp, #44]	; 0x2c
 8007d88:	f000 ff3c 	bl	8008c04 <__mcmp>
 8007d8c:	4632      	mov	r2, r6
 8007d8e:	9006      	str	r0, [sp, #24]
 8007d90:	4621      	mov	r1, r4
 8007d92:	4628      	mov	r0, r5
 8007d94:	f000 ff52 	bl	8008c3c <__mdiff>
 8007d98:	68c2      	ldr	r2, [r0, #12]
 8007d9a:	4607      	mov	r7, r0
 8007d9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d9e:	bb02      	cbnz	r2, 8007de2 <_dtoa_r+0xa82>
 8007da0:	4601      	mov	r1, r0
 8007da2:	4650      	mov	r0, sl
 8007da4:	f000 ff2e 	bl	8008c04 <__mcmp>
 8007da8:	4602      	mov	r2, r0
 8007daa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007dac:	4639      	mov	r1, r7
 8007dae:	4628      	mov	r0, r5
 8007db0:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8007db4:	f000 fca2 	bl	80086fc <_Bfree>
 8007db8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007dba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007dbc:	9f02      	ldr	r7, [sp, #8]
 8007dbe:	ea43 0102 	orr.w	r1, r3, r2
 8007dc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dc4:	430b      	orrs	r3, r1
 8007dc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007dc8:	d10d      	bne.n	8007de6 <_dtoa_r+0xa86>
 8007dca:	2b39      	cmp	r3, #57	; 0x39
 8007dcc:	d027      	beq.n	8007e1e <_dtoa_r+0xabe>
 8007dce:	9a06      	ldr	r2, [sp, #24]
 8007dd0:	2a00      	cmp	r2, #0
 8007dd2:	dd01      	ble.n	8007dd8 <_dtoa_r+0xa78>
 8007dd4:	9b04      	ldr	r3, [sp, #16]
 8007dd6:	3331      	adds	r3, #49	; 0x31
 8007dd8:	f88b 3000 	strb.w	r3, [fp]
 8007ddc:	e776      	b.n	8007ccc <_dtoa_r+0x96c>
 8007dde:	4630      	mov	r0, r6
 8007de0:	e7b9      	b.n	8007d56 <_dtoa_r+0x9f6>
 8007de2:	2201      	movs	r2, #1
 8007de4:	e7e2      	b.n	8007dac <_dtoa_r+0xa4c>
 8007de6:	9906      	ldr	r1, [sp, #24]
 8007de8:	2900      	cmp	r1, #0
 8007dea:	db04      	blt.n	8007df6 <_dtoa_r+0xa96>
 8007dec:	9822      	ldr	r0, [sp, #136]	; 0x88
 8007dee:	4301      	orrs	r1, r0
 8007df0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007df2:	4301      	orrs	r1, r0
 8007df4:	d120      	bne.n	8007e38 <_dtoa_r+0xad8>
 8007df6:	2a00      	cmp	r2, #0
 8007df8:	ddee      	ble.n	8007dd8 <_dtoa_r+0xa78>
 8007dfa:	4651      	mov	r1, sl
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	4628      	mov	r0, r5
 8007e00:	9302      	str	r3, [sp, #8]
 8007e02:	f000 fe93 	bl	8008b2c <__lshift>
 8007e06:	4621      	mov	r1, r4
 8007e08:	4682      	mov	sl, r0
 8007e0a:	f000 fefb 	bl	8008c04 <__mcmp>
 8007e0e:	2800      	cmp	r0, #0
 8007e10:	9b02      	ldr	r3, [sp, #8]
 8007e12:	dc02      	bgt.n	8007e1a <_dtoa_r+0xaba>
 8007e14:	d1e0      	bne.n	8007dd8 <_dtoa_r+0xa78>
 8007e16:	07da      	lsls	r2, r3, #31
 8007e18:	d5de      	bpl.n	8007dd8 <_dtoa_r+0xa78>
 8007e1a:	2b39      	cmp	r3, #57	; 0x39
 8007e1c:	d1da      	bne.n	8007dd4 <_dtoa_r+0xa74>
 8007e1e:	2339      	movs	r3, #57	; 0x39
 8007e20:	f88b 3000 	strb.w	r3, [fp]
 8007e24:	463b      	mov	r3, r7
 8007e26:	461f      	mov	r7, r3
 8007e28:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007e2c:	3b01      	subs	r3, #1
 8007e2e:	2a39      	cmp	r2, #57	; 0x39
 8007e30:	d050      	beq.n	8007ed4 <_dtoa_r+0xb74>
 8007e32:	3201      	adds	r2, #1
 8007e34:	701a      	strb	r2, [r3, #0]
 8007e36:	e749      	b.n	8007ccc <_dtoa_r+0x96c>
 8007e38:	2a00      	cmp	r2, #0
 8007e3a:	dd03      	ble.n	8007e44 <_dtoa_r+0xae4>
 8007e3c:	2b39      	cmp	r3, #57	; 0x39
 8007e3e:	d0ee      	beq.n	8007e1e <_dtoa_r+0xabe>
 8007e40:	3301      	adds	r3, #1
 8007e42:	e7c9      	b.n	8007dd8 <_dtoa_r+0xa78>
 8007e44:	9a02      	ldr	r2, [sp, #8]
 8007e46:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007e48:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007e4c:	428a      	cmp	r2, r1
 8007e4e:	d02a      	beq.n	8007ea6 <_dtoa_r+0xb46>
 8007e50:	4651      	mov	r1, sl
 8007e52:	2300      	movs	r3, #0
 8007e54:	220a      	movs	r2, #10
 8007e56:	4628      	mov	r0, r5
 8007e58:	f000 fc72 	bl	8008740 <__multadd>
 8007e5c:	45b0      	cmp	r8, r6
 8007e5e:	4682      	mov	sl, r0
 8007e60:	f04f 0300 	mov.w	r3, #0
 8007e64:	f04f 020a 	mov.w	r2, #10
 8007e68:	4641      	mov	r1, r8
 8007e6a:	4628      	mov	r0, r5
 8007e6c:	d107      	bne.n	8007e7e <_dtoa_r+0xb1e>
 8007e6e:	f000 fc67 	bl	8008740 <__multadd>
 8007e72:	4680      	mov	r8, r0
 8007e74:	4606      	mov	r6, r0
 8007e76:	9b02      	ldr	r3, [sp, #8]
 8007e78:	3301      	adds	r3, #1
 8007e7a:	9302      	str	r3, [sp, #8]
 8007e7c:	e777      	b.n	8007d6e <_dtoa_r+0xa0e>
 8007e7e:	f000 fc5f 	bl	8008740 <__multadd>
 8007e82:	4631      	mov	r1, r6
 8007e84:	4680      	mov	r8, r0
 8007e86:	2300      	movs	r3, #0
 8007e88:	220a      	movs	r2, #10
 8007e8a:	4628      	mov	r0, r5
 8007e8c:	f000 fc58 	bl	8008740 <__multadd>
 8007e90:	4606      	mov	r6, r0
 8007e92:	e7f0      	b.n	8007e76 <_dtoa_r+0xb16>
 8007e94:	f1bb 0f00 	cmp.w	fp, #0
 8007e98:	bfcc      	ite	gt
 8007e9a:	465f      	movgt	r7, fp
 8007e9c:	2701      	movle	r7, #1
 8007e9e:	f04f 0800 	mov.w	r8, #0
 8007ea2:	9a08      	ldr	r2, [sp, #32]
 8007ea4:	4417      	add	r7, r2
 8007ea6:	4651      	mov	r1, sl
 8007ea8:	2201      	movs	r2, #1
 8007eaa:	4628      	mov	r0, r5
 8007eac:	9302      	str	r3, [sp, #8]
 8007eae:	f000 fe3d 	bl	8008b2c <__lshift>
 8007eb2:	4621      	mov	r1, r4
 8007eb4:	4682      	mov	sl, r0
 8007eb6:	f000 fea5 	bl	8008c04 <__mcmp>
 8007eba:	2800      	cmp	r0, #0
 8007ebc:	dcb2      	bgt.n	8007e24 <_dtoa_r+0xac4>
 8007ebe:	d102      	bne.n	8007ec6 <_dtoa_r+0xb66>
 8007ec0:	9b02      	ldr	r3, [sp, #8]
 8007ec2:	07db      	lsls	r3, r3, #31
 8007ec4:	d4ae      	bmi.n	8007e24 <_dtoa_r+0xac4>
 8007ec6:	463b      	mov	r3, r7
 8007ec8:	461f      	mov	r7, r3
 8007eca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007ece:	2a30      	cmp	r2, #48	; 0x30
 8007ed0:	d0fa      	beq.n	8007ec8 <_dtoa_r+0xb68>
 8007ed2:	e6fb      	b.n	8007ccc <_dtoa_r+0x96c>
 8007ed4:	9a08      	ldr	r2, [sp, #32]
 8007ed6:	429a      	cmp	r2, r3
 8007ed8:	d1a5      	bne.n	8007e26 <_dtoa_r+0xac6>
 8007eda:	2331      	movs	r3, #49	; 0x31
 8007edc:	f109 0901 	add.w	r9, r9, #1
 8007ee0:	7013      	strb	r3, [r2, #0]
 8007ee2:	e6f3      	b.n	8007ccc <_dtoa_r+0x96c>
 8007ee4:	4b13      	ldr	r3, [pc, #76]	; (8007f34 <_dtoa_r+0xbd4>)
 8007ee6:	f7ff baa7 	b.w	8007438 <_dtoa_r+0xd8>
 8007eea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	f47f aa80 	bne.w	80073f2 <_dtoa_r+0x92>
 8007ef2:	4b11      	ldr	r3, [pc, #68]	; (8007f38 <_dtoa_r+0xbd8>)
 8007ef4:	f7ff baa0 	b.w	8007438 <_dtoa_r+0xd8>
 8007ef8:	f1bb 0f00 	cmp.w	fp, #0
 8007efc:	dc03      	bgt.n	8007f06 <_dtoa_r+0xba6>
 8007efe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007f00:	2b02      	cmp	r3, #2
 8007f02:	f73f aecc 	bgt.w	8007c9e <_dtoa_r+0x93e>
 8007f06:	9f08      	ldr	r7, [sp, #32]
 8007f08:	4621      	mov	r1, r4
 8007f0a:	4650      	mov	r0, sl
 8007f0c:	f7ff f99a 	bl	8007244 <quorem>
 8007f10:	9a08      	ldr	r2, [sp, #32]
 8007f12:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007f16:	f807 3b01 	strb.w	r3, [r7], #1
 8007f1a:	1aba      	subs	r2, r7, r2
 8007f1c:	4593      	cmp	fp, r2
 8007f1e:	ddb9      	ble.n	8007e94 <_dtoa_r+0xb34>
 8007f20:	4651      	mov	r1, sl
 8007f22:	2300      	movs	r3, #0
 8007f24:	220a      	movs	r2, #10
 8007f26:	4628      	mov	r0, r5
 8007f28:	f000 fc0a 	bl	8008740 <__multadd>
 8007f2c:	4682      	mov	sl, r0
 8007f2e:	e7eb      	b.n	8007f08 <_dtoa_r+0xba8>
 8007f30:	0800b6b4 	.word	0x0800b6b4
 8007f34:	0800b4b0 	.word	0x0800b4b0
 8007f38:	0800b631 	.word	0x0800b631

08007f3c <rshift>:
 8007f3c:	6903      	ldr	r3, [r0, #16]
 8007f3e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007f42:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007f46:	f100 0414 	add.w	r4, r0, #20
 8007f4a:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007f4e:	dd46      	ble.n	8007fde <rshift+0xa2>
 8007f50:	f011 011f 	ands.w	r1, r1, #31
 8007f54:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007f58:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007f5c:	d10c      	bne.n	8007f78 <rshift+0x3c>
 8007f5e:	4629      	mov	r1, r5
 8007f60:	f100 0710 	add.w	r7, r0, #16
 8007f64:	42b1      	cmp	r1, r6
 8007f66:	d335      	bcc.n	8007fd4 <rshift+0x98>
 8007f68:	1a9b      	subs	r3, r3, r2
 8007f6a:	009b      	lsls	r3, r3, #2
 8007f6c:	1eea      	subs	r2, r5, #3
 8007f6e:	4296      	cmp	r6, r2
 8007f70:	bf38      	it	cc
 8007f72:	2300      	movcc	r3, #0
 8007f74:	4423      	add	r3, r4
 8007f76:	e015      	b.n	8007fa4 <rshift+0x68>
 8007f78:	46a1      	mov	r9, r4
 8007f7a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007f7e:	f1c1 0820 	rsb	r8, r1, #32
 8007f82:	40cf      	lsrs	r7, r1
 8007f84:	f105 0e04 	add.w	lr, r5, #4
 8007f88:	4576      	cmp	r6, lr
 8007f8a:	46f4      	mov	ip, lr
 8007f8c:	d816      	bhi.n	8007fbc <rshift+0x80>
 8007f8e:	1a9b      	subs	r3, r3, r2
 8007f90:	009a      	lsls	r2, r3, #2
 8007f92:	3a04      	subs	r2, #4
 8007f94:	3501      	adds	r5, #1
 8007f96:	42ae      	cmp	r6, r5
 8007f98:	bf38      	it	cc
 8007f9a:	2200      	movcc	r2, #0
 8007f9c:	18a3      	adds	r3, r4, r2
 8007f9e:	50a7      	str	r7, [r4, r2]
 8007fa0:	b107      	cbz	r7, 8007fa4 <rshift+0x68>
 8007fa2:	3304      	adds	r3, #4
 8007fa4:	42a3      	cmp	r3, r4
 8007fa6:	eba3 0204 	sub.w	r2, r3, r4
 8007faa:	bf08      	it	eq
 8007fac:	2300      	moveq	r3, #0
 8007fae:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007fb2:	6102      	str	r2, [r0, #16]
 8007fb4:	bf08      	it	eq
 8007fb6:	6143      	streq	r3, [r0, #20]
 8007fb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007fbc:	f8dc c000 	ldr.w	ip, [ip]
 8007fc0:	fa0c fc08 	lsl.w	ip, ip, r8
 8007fc4:	ea4c 0707 	orr.w	r7, ip, r7
 8007fc8:	f849 7b04 	str.w	r7, [r9], #4
 8007fcc:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007fd0:	40cf      	lsrs	r7, r1
 8007fd2:	e7d9      	b.n	8007f88 <rshift+0x4c>
 8007fd4:	f851 cb04 	ldr.w	ip, [r1], #4
 8007fd8:	f847 cf04 	str.w	ip, [r7, #4]!
 8007fdc:	e7c2      	b.n	8007f64 <rshift+0x28>
 8007fde:	4623      	mov	r3, r4
 8007fe0:	e7e0      	b.n	8007fa4 <rshift+0x68>

08007fe2 <__hexdig_fun>:
 8007fe2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007fe6:	2b09      	cmp	r3, #9
 8007fe8:	d802      	bhi.n	8007ff0 <__hexdig_fun+0xe>
 8007fea:	3820      	subs	r0, #32
 8007fec:	b2c0      	uxtb	r0, r0
 8007fee:	4770      	bx	lr
 8007ff0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007ff4:	2b05      	cmp	r3, #5
 8007ff6:	d801      	bhi.n	8007ffc <__hexdig_fun+0x1a>
 8007ff8:	3847      	subs	r0, #71	; 0x47
 8007ffa:	e7f7      	b.n	8007fec <__hexdig_fun+0xa>
 8007ffc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008000:	2b05      	cmp	r3, #5
 8008002:	d801      	bhi.n	8008008 <__hexdig_fun+0x26>
 8008004:	3827      	subs	r0, #39	; 0x27
 8008006:	e7f1      	b.n	8007fec <__hexdig_fun+0xa>
 8008008:	2000      	movs	r0, #0
 800800a:	4770      	bx	lr

0800800c <__gethex>:
 800800c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008010:	b08b      	sub	sp, #44	; 0x2c
 8008012:	9306      	str	r3, [sp, #24]
 8008014:	4bb9      	ldr	r3, [pc, #740]	; (80082fc <__gethex+0x2f0>)
 8008016:	9002      	str	r0, [sp, #8]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	468b      	mov	fp, r1
 800801c:	4618      	mov	r0, r3
 800801e:	4690      	mov	r8, r2
 8008020:	9303      	str	r3, [sp, #12]
 8008022:	f7f8 f901 	bl	8000228 <strlen>
 8008026:	4682      	mov	sl, r0
 8008028:	9b03      	ldr	r3, [sp, #12]
 800802a:	f8db 2000 	ldr.w	r2, [fp]
 800802e:	4403      	add	r3, r0
 8008030:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008034:	9307      	str	r3, [sp, #28]
 8008036:	1c93      	adds	r3, r2, #2
 8008038:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800803c:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008040:	32fe      	adds	r2, #254	; 0xfe
 8008042:	18d1      	adds	r1, r2, r3
 8008044:	461f      	mov	r7, r3
 8008046:	f813 0b01 	ldrb.w	r0, [r3], #1
 800804a:	9101      	str	r1, [sp, #4]
 800804c:	2830      	cmp	r0, #48	; 0x30
 800804e:	d0f8      	beq.n	8008042 <__gethex+0x36>
 8008050:	f7ff ffc7 	bl	8007fe2 <__hexdig_fun>
 8008054:	4604      	mov	r4, r0
 8008056:	2800      	cmp	r0, #0
 8008058:	d13a      	bne.n	80080d0 <__gethex+0xc4>
 800805a:	4652      	mov	r2, sl
 800805c:	4638      	mov	r0, r7
 800805e:	9903      	ldr	r1, [sp, #12]
 8008060:	f001 f9ea 	bl	8009438 <strncmp>
 8008064:	4605      	mov	r5, r0
 8008066:	2800      	cmp	r0, #0
 8008068:	d166      	bne.n	8008138 <__gethex+0x12c>
 800806a:	f817 000a 	ldrb.w	r0, [r7, sl]
 800806e:	eb07 060a 	add.w	r6, r7, sl
 8008072:	f7ff ffb6 	bl	8007fe2 <__hexdig_fun>
 8008076:	2800      	cmp	r0, #0
 8008078:	d060      	beq.n	800813c <__gethex+0x130>
 800807a:	4633      	mov	r3, r6
 800807c:	7818      	ldrb	r0, [r3, #0]
 800807e:	461f      	mov	r7, r3
 8008080:	2830      	cmp	r0, #48	; 0x30
 8008082:	f103 0301 	add.w	r3, r3, #1
 8008086:	d0f9      	beq.n	800807c <__gethex+0x70>
 8008088:	f7ff ffab 	bl	8007fe2 <__hexdig_fun>
 800808c:	2301      	movs	r3, #1
 800808e:	fab0 f480 	clz	r4, r0
 8008092:	4635      	mov	r5, r6
 8008094:	0964      	lsrs	r4, r4, #5
 8008096:	9301      	str	r3, [sp, #4]
 8008098:	463a      	mov	r2, r7
 800809a:	4616      	mov	r6, r2
 800809c:	7830      	ldrb	r0, [r6, #0]
 800809e:	3201      	adds	r2, #1
 80080a0:	f7ff ff9f 	bl	8007fe2 <__hexdig_fun>
 80080a4:	2800      	cmp	r0, #0
 80080a6:	d1f8      	bne.n	800809a <__gethex+0x8e>
 80080a8:	4652      	mov	r2, sl
 80080aa:	4630      	mov	r0, r6
 80080ac:	9903      	ldr	r1, [sp, #12]
 80080ae:	f001 f9c3 	bl	8009438 <strncmp>
 80080b2:	b980      	cbnz	r0, 80080d6 <__gethex+0xca>
 80080b4:	b94d      	cbnz	r5, 80080ca <__gethex+0xbe>
 80080b6:	eb06 050a 	add.w	r5, r6, sl
 80080ba:	462a      	mov	r2, r5
 80080bc:	4616      	mov	r6, r2
 80080be:	7830      	ldrb	r0, [r6, #0]
 80080c0:	3201      	adds	r2, #1
 80080c2:	f7ff ff8e 	bl	8007fe2 <__hexdig_fun>
 80080c6:	2800      	cmp	r0, #0
 80080c8:	d1f8      	bne.n	80080bc <__gethex+0xb0>
 80080ca:	1bad      	subs	r5, r5, r6
 80080cc:	00ad      	lsls	r5, r5, #2
 80080ce:	e004      	b.n	80080da <__gethex+0xce>
 80080d0:	2400      	movs	r4, #0
 80080d2:	4625      	mov	r5, r4
 80080d4:	e7e0      	b.n	8008098 <__gethex+0x8c>
 80080d6:	2d00      	cmp	r5, #0
 80080d8:	d1f7      	bne.n	80080ca <__gethex+0xbe>
 80080da:	7833      	ldrb	r3, [r6, #0]
 80080dc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80080e0:	2b50      	cmp	r3, #80	; 0x50
 80080e2:	d139      	bne.n	8008158 <__gethex+0x14c>
 80080e4:	7873      	ldrb	r3, [r6, #1]
 80080e6:	2b2b      	cmp	r3, #43	; 0x2b
 80080e8:	d02a      	beq.n	8008140 <__gethex+0x134>
 80080ea:	2b2d      	cmp	r3, #45	; 0x2d
 80080ec:	d02c      	beq.n	8008148 <__gethex+0x13c>
 80080ee:	f04f 0900 	mov.w	r9, #0
 80080f2:	1c71      	adds	r1, r6, #1
 80080f4:	7808      	ldrb	r0, [r1, #0]
 80080f6:	f7ff ff74 	bl	8007fe2 <__hexdig_fun>
 80080fa:	1e43      	subs	r3, r0, #1
 80080fc:	b2db      	uxtb	r3, r3
 80080fe:	2b18      	cmp	r3, #24
 8008100:	d82a      	bhi.n	8008158 <__gethex+0x14c>
 8008102:	f1a0 0210 	sub.w	r2, r0, #16
 8008106:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800810a:	f7ff ff6a 	bl	8007fe2 <__hexdig_fun>
 800810e:	1e43      	subs	r3, r0, #1
 8008110:	b2db      	uxtb	r3, r3
 8008112:	2b18      	cmp	r3, #24
 8008114:	d91b      	bls.n	800814e <__gethex+0x142>
 8008116:	f1b9 0f00 	cmp.w	r9, #0
 800811a:	d000      	beq.n	800811e <__gethex+0x112>
 800811c:	4252      	negs	r2, r2
 800811e:	4415      	add	r5, r2
 8008120:	f8cb 1000 	str.w	r1, [fp]
 8008124:	b1d4      	cbz	r4, 800815c <__gethex+0x150>
 8008126:	9b01      	ldr	r3, [sp, #4]
 8008128:	2b00      	cmp	r3, #0
 800812a:	bf14      	ite	ne
 800812c:	2700      	movne	r7, #0
 800812e:	2706      	moveq	r7, #6
 8008130:	4638      	mov	r0, r7
 8008132:	b00b      	add	sp, #44	; 0x2c
 8008134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008138:	463e      	mov	r6, r7
 800813a:	4625      	mov	r5, r4
 800813c:	2401      	movs	r4, #1
 800813e:	e7cc      	b.n	80080da <__gethex+0xce>
 8008140:	f04f 0900 	mov.w	r9, #0
 8008144:	1cb1      	adds	r1, r6, #2
 8008146:	e7d5      	b.n	80080f4 <__gethex+0xe8>
 8008148:	f04f 0901 	mov.w	r9, #1
 800814c:	e7fa      	b.n	8008144 <__gethex+0x138>
 800814e:	230a      	movs	r3, #10
 8008150:	fb03 0202 	mla	r2, r3, r2, r0
 8008154:	3a10      	subs	r2, #16
 8008156:	e7d6      	b.n	8008106 <__gethex+0xfa>
 8008158:	4631      	mov	r1, r6
 800815a:	e7e1      	b.n	8008120 <__gethex+0x114>
 800815c:	4621      	mov	r1, r4
 800815e:	1bf3      	subs	r3, r6, r7
 8008160:	3b01      	subs	r3, #1
 8008162:	2b07      	cmp	r3, #7
 8008164:	dc0a      	bgt.n	800817c <__gethex+0x170>
 8008166:	9802      	ldr	r0, [sp, #8]
 8008168:	f000 fa88 	bl	800867c <_Balloc>
 800816c:	4604      	mov	r4, r0
 800816e:	b940      	cbnz	r0, 8008182 <__gethex+0x176>
 8008170:	4602      	mov	r2, r0
 8008172:	21de      	movs	r1, #222	; 0xde
 8008174:	4b62      	ldr	r3, [pc, #392]	; (8008300 <__gethex+0x2f4>)
 8008176:	4863      	ldr	r0, [pc, #396]	; (8008304 <__gethex+0x2f8>)
 8008178:	f001 f97e 	bl	8009478 <__assert_func>
 800817c:	3101      	adds	r1, #1
 800817e:	105b      	asrs	r3, r3, #1
 8008180:	e7ef      	b.n	8008162 <__gethex+0x156>
 8008182:	f04f 0b00 	mov.w	fp, #0
 8008186:	f100 0914 	add.w	r9, r0, #20
 800818a:	f1ca 0301 	rsb	r3, sl, #1
 800818e:	f8cd 9010 	str.w	r9, [sp, #16]
 8008192:	f8cd b004 	str.w	fp, [sp, #4]
 8008196:	9308      	str	r3, [sp, #32]
 8008198:	42b7      	cmp	r7, r6
 800819a:	d33f      	bcc.n	800821c <__gethex+0x210>
 800819c:	9f04      	ldr	r7, [sp, #16]
 800819e:	9b01      	ldr	r3, [sp, #4]
 80081a0:	f847 3b04 	str.w	r3, [r7], #4
 80081a4:	eba7 0709 	sub.w	r7, r7, r9
 80081a8:	10bf      	asrs	r7, r7, #2
 80081aa:	6127      	str	r7, [r4, #16]
 80081ac:	4618      	mov	r0, r3
 80081ae:	f000 fb5b 	bl	8008868 <__hi0bits>
 80081b2:	017f      	lsls	r7, r7, #5
 80081b4:	f8d8 6000 	ldr.w	r6, [r8]
 80081b8:	1a3f      	subs	r7, r7, r0
 80081ba:	42b7      	cmp	r7, r6
 80081bc:	dd62      	ble.n	8008284 <__gethex+0x278>
 80081be:	1bbf      	subs	r7, r7, r6
 80081c0:	4639      	mov	r1, r7
 80081c2:	4620      	mov	r0, r4
 80081c4:	f000 fef1 	bl	8008faa <__any_on>
 80081c8:	4682      	mov	sl, r0
 80081ca:	b1a8      	cbz	r0, 80081f8 <__gethex+0x1ec>
 80081cc:	f04f 0a01 	mov.w	sl, #1
 80081d0:	1e7b      	subs	r3, r7, #1
 80081d2:	1159      	asrs	r1, r3, #5
 80081d4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80081d8:	f003 021f 	and.w	r2, r3, #31
 80081dc:	fa0a f202 	lsl.w	r2, sl, r2
 80081e0:	420a      	tst	r2, r1
 80081e2:	d009      	beq.n	80081f8 <__gethex+0x1ec>
 80081e4:	4553      	cmp	r3, sl
 80081e6:	dd05      	ble.n	80081f4 <__gethex+0x1e8>
 80081e8:	4620      	mov	r0, r4
 80081ea:	1eb9      	subs	r1, r7, #2
 80081ec:	f000 fedd 	bl	8008faa <__any_on>
 80081f0:	2800      	cmp	r0, #0
 80081f2:	d144      	bne.n	800827e <__gethex+0x272>
 80081f4:	f04f 0a02 	mov.w	sl, #2
 80081f8:	4639      	mov	r1, r7
 80081fa:	4620      	mov	r0, r4
 80081fc:	f7ff fe9e 	bl	8007f3c <rshift>
 8008200:	443d      	add	r5, r7
 8008202:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008206:	42ab      	cmp	r3, r5
 8008208:	da4a      	bge.n	80082a0 <__gethex+0x294>
 800820a:	4621      	mov	r1, r4
 800820c:	9802      	ldr	r0, [sp, #8]
 800820e:	f000 fa75 	bl	80086fc <_Bfree>
 8008212:	2300      	movs	r3, #0
 8008214:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008216:	27a3      	movs	r7, #163	; 0xa3
 8008218:	6013      	str	r3, [r2, #0]
 800821a:	e789      	b.n	8008130 <__gethex+0x124>
 800821c:	1e73      	subs	r3, r6, #1
 800821e:	9a07      	ldr	r2, [sp, #28]
 8008220:	9305      	str	r3, [sp, #20]
 8008222:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008226:	4293      	cmp	r3, r2
 8008228:	d019      	beq.n	800825e <__gethex+0x252>
 800822a:	f1bb 0f20 	cmp.w	fp, #32
 800822e:	d107      	bne.n	8008240 <__gethex+0x234>
 8008230:	9b04      	ldr	r3, [sp, #16]
 8008232:	9a01      	ldr	r2, [sp, #4]
 8008234:	f843 2b04 	str.w	r2, [r3], #4
 8008238:	9304      	str	r3, [sp, #16]
 800823a:	2300      	movs	r3, #0
 800823c:	469b      	mov	fp, r3
 800823e:	9301      	str	r3, [sp, #4]
 8008240:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008244:	f7ff fecd 	bl	8007fe2 <__hexdig_fun>
 8008248:	9b01      	ldr	r3, [sp, #4]
 800824a:	f000 000f 	and.w	r0, r0, #15
 800824e:	fa00 f00b 	lsl.w	r0, r0, fp
 8008252:	4303      	orrs	r3, r0
 8008254:	9301      	str	r3, [sp, #4]
 8008256:	f10b 0b04 	add.w	fp, fp, #4
 800825a:	9b05      	ldr	r3, [sp, #20]
 800825c:	e00d      	b.n	800827a <__gethex+0x26e>
 800825e:	9b05      	ldr	r3, [sp, #20]
 8008260:	9a08      	ldr	r2, [sp, #32]
 8008262:	4413      	add	r3, r2
 8008264:	42bb      	cmp	r3, r7
 8008266:	d3e0      	bcc.n	800822a <__gethex+0x21e>
 8008268:	4618      	mov	r0, r3
 800826a:	4652      	mov	r2, sl
 800826c:	9903      	ldr	r1, [sp, #12]
 800826e:	9309      	str	r3, [sp, #36]	; 0x24
 8008270:	f001 f8e2 	bl	8009438 <strncmp>
 8008274:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008276:	2800      	cmp	r0, #0
 8008278:	d1d7      	bne.n	800822a <__gethex+0x21e>
 800827a:	461e      	mov	r6, r3
 800827c:	e78c      	b.n	8008198 <__gethex+0x18c>
 800827e:	f04f 0a03 	mov.w	sl, #3
 8008282:	e7b9      	b.n	80081f8 <__gethex+0x1ec>
 8008284:	da09      	bge.n	800829a <__gethex+0x28e>
 8008286:	1bf7      	subs	r7, r6, r7
 8008288:	4621      	mov	r1, r4
 800828a:	463a      	mov	r2, r7
 800828c:	9802      	ldr	r0, [sp, #8]
 800828e:	f000 fc4d 	bl	8008b2c <__lshift>
 8008292:	4604      	mov	r4, r0
 8008294:	1bed      	subs	r5, r5, r7
 8008296:	f100 0914 	add.w	r9, r0, #20
 800829a:	f04f 0a00 	mov.w	sl, #0
 800829e:	e7b0      	b.n	8008202 <__gethex+0x1f6>
 80082a0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80082a4:	42a8      	cmp	r0, r5
 80082a6:	dd71      	ble.n	800838c <__gethex+0x380>
 80082a8:	1b45      	subs	r5, r0, r5
 80082aa:	42ae      	cmp	r6, r5
 80082ac:	dc34      	bgt.n	8008318 <__gethex+0x30c>
 80082ae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80082b2:	2b02      	cmp	r3, #2
 80082b4:	d028      	beq.n	8008308 <__gethex+0x2fc>
 80082b6:	2b03      	cmp	r3, #3
 80082b8:	d02a      	beq.n	8008310 <__gethex+0x304>
 80082ba:	2b01      	cmp	r3, #1
 80082bc:	d115      	bne.n	80082ea <__gethex+0x2de>
 80082be:	42ae      	cmp	r6, r5
 80082c0:	d113      	bne.n	80082ea <__gethex+0x2de>
 80082c2:	2e01      	cmp	r6, #1
 80082c4:	d10b      	bne.n	80082de <__gethex+0x2d2>
 80082c6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80082ca:	9a06      	ldr	r2, [sp, #24]
 80082cc:	2762      	movs	r7, #98	; 0x62
 80082ce:	6013      	str	r3, [r2, #0]
 80082d0:	2301      	movs	r3, #1
 80082d2:	6123      	str	r3, [r4, #16]
 80082d4:	f8c9 3000 	str.w	r3, [r9]
 80082d8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80082da:	601c      	str	r4, [r3, #0]
 80082dc:	e728      	b.n	8008130 <__gethex+0x124>
 80082de:	4620      	mov	r0, r4
 80082e0:	1e71      	subs	r1, r6, #1
 80082e2:	f000 fe62 	bl	8008faa <__any_on>
 80082e6:	2800      	cmp	r0, #0
 80082e8:	d1ed      	bne.n	80082c6 <__gethex+0x2ba>
 80082ea:	4621      	mov	r1, r4
 80082ec:	9802      	ldr	r0, [sp, #8]
 80082ee:	f000 fa05 	bl	80086fc <_Bfree>
 80082f2:	2300      	movs	r3, #0
 80082f4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80082f6:	2750      	movs	r7, #80	; 0x50
 80082f8:	6013      	str	r3, [r2, #0]
 80082fa:	e719      	b.n	8008130 <__gethex+0x124>
 80082fc:	0800b730 	.word	0x0800b730
 8008300:	0800b6b4 	.word	0x0800b6b4
 8008304:	0800b6c5 	.word	0x0800b6c5
 8008308:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800830a:	2b00      	cmp	r3, #0
 800830c:	d1ed      	bne.n	80082ea <__gethex+0x2de>
 800830e:	e7da      	b.n	80082c6 <__gethex+0x2ba>
 8008310:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008312:	2b00      	cmp	r3, #0
 8008314:	d1d7      	bne.n	80082c6 <__gethex+0x2ba>
 8008316:	e7e8      	b.n	80082ea <__gethex+0x2de>
 8008318:	1e6f      	subs	r7, r5, #1
 800831a:	f1ba 0f00 	cmp.w	sl, #0
 800831e:	d132      	bne.n	8008386 <__gethex+0x37a>
 8008320:	b127      	cbz	r7, 800832c <__gethex+0x320>
 8008322:	4639      	mov	r1, r7
 8008324:	4620      	mov	r0, r4
 8008326:	f000 fe40 	bl	8008faa <__any_on>
 800832a:	4682      	mov	sl, r0
 800832c:	2101      	movs	r1, #1
 800832e:	117b      	asrs	r3, r7, #5
 8008330:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008334:	f007 071f 	and.w	r7, r7, #31
 8008338:	fa01 f707 	lsl.w	r7, r1, r7
 800833c:	421f      	tst	r7, r3
 800833e:	f04f 0702 	mov.w	r7, #2
 8008342:	4629      	mov	r1, r5
 8008344:	4620      	mov	r0, r4
 8008346:	bf18      	it	ne
 8008348:	f04a 0a02 	orrne.w	sl, sl, #2
 800834c:	1b76      	subs	r6, r6, r5
 800834e:	f7ff fdf5 	bl	8007f3c <rshift>
 8008352:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008356:	f1ba 0f00 	cmp.w	sl, #0
 800835a:	d048      	beq.n	80083ee <__gethex+0x3e2>
 800835c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008360:	2b02      	cmp	r3, #2
 8008362:	d015      	beq.n	8008390 <__gethex+0x384>
 8008364:	2b03      	cmp	r3, #3
 8008366:	d017      	beq.n	8008398 <__gethex+0x38c>
 8008368:	2b01      	cmp	r3, #1
 800836a:	d109      	bne.n	8008380 <__gethex+0x374>
 800836c:	f01a 0f02 	tst.w	sl, #2
 8008370:	d006      	beq.n	8008380 <__gethex+0x374>
 8008372:	f8d9 0000 	ldr.w	r0, [r9]
 8008376:	ea4a 0a00 	orr.w	sl, sl, r0
 800837a:	f01a 0f01 	tst.w	sl, #1
 800837e:	d10e      	bne.n	800839e <__gethex+0x392>
 8008380:	f047 0710 	orr.w	r7, r7, #16
 8008384:	e033      	b.n	80083ee <__gethex+0x3e2>
 8008386:	f04f 0a01 	mov.w	sl, #1
 800838a:	e7cf      	b.n	800832c <__gethex+0x320>
 800838c:	2701      	movs	r7, #1
 800838e:	e7e2      	b.n	8008356 <__gethex+0x34a>
 8008390:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008392:	f1c3 0301 	rsb	r3, r3, #1
 8008396:	9315      	str	r3, [sp, #84]	; 0x54
 8008398:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800839a:	2b00      	cmp	r3, #0
 800839c:	d0f0      	beq.n	8008380 <__gethex+0x374>
 800839e:	f04f 0c00 	mov.w	ip, #0
 80083a2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80083a6:	f104 0314 	add.w	r3, r4, #20
 80083aa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80083ae:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80083b2:	4618      	mov	r0, r3
 80083b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80083b8:	f1b2 3fff 	cmp.w	r2, #4294967295
 80083bc:	d01c      	beq.n	80083f8 <__gethex+0x3ec>
 80083be:	3201      	adds	r2, #1
 80083c0:	6002      	str	r2, [r0, #0]
 80083c2:	2f02      	cmp	r7, #2
 80083c4:	f104 0314 	add.w	r3, r4, #20
 80083c8:	d13d      	bne.n	8008446 <__gethex+0x43a>
 80083ca:	f8d8 2000 	ldr.w	r2, [r8]
 80083ce:	3a01      	subs	r2, #1
 80083d0:	42b2      	cmp	r2, r6
 80083d2:	d10a      	bne.n	80083ea <__gethex+0x3de>
 80083d4:	2201      	movs	r2, #1
 80083d6:	1171      	asrs	r1, r6, #5
 80083d8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80083dc:	f006 061f 	and.w	r6, r6, #31
 80083e0:	fa02 f606 	lsl.w	r6, r2, r6
 80083e4:	421e      	tst	r6, r3
 80083e6:	bf18      	it	ne
 80083e8:	4617      	movne	r7, r2
 80083ea:	f047 0720 	orr.w	r7, r7, #32
 80083ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80083f0:	601c      	str	r4, [r3, #0]
 80083f2:	9b06      	ldr	r3, [sp, #24]
 80083f4:	601d      	str	r5, [r3, #0]
 80083f6:	e69b      	b.n	8008130 <__gethex+0x124>
 80083f8:	4299      	cmp	r1, r3
 80083fa:	f843 cc04 	str.w	ip, [r3, #-4]
 80083fe:	d8d8      	bhi.n	80083b2 <__gethex+0x3a6>
 8008400:	68a3      	ldr	r3, [r4, #8]
 8008402:	459b      	cmp	fp, r3
 8008404:	db17      	blt.n	8008436 <__gethex+0x42a>
 8008406:	6861      	ldr	r1, [r4, #4]
 8008408:	9802      	ldr	r0, [sp, #8]
 800840a:	3101      	adds	r1, #1
 800840c:	f000 f936 	bl	800867c <_Balloc>
 8008410:	4681      	mov	r9, r0
 8008412:	b918      	cbnz	r0, 800841c <__gethex+0x410>
 8008414:	4602      	mov	r2, r0
 8008416:	2184      	movs	r1, #132	; 0x84
 8008418:	4b19      	ldr	r3, [pc, #100]	; (8008480 <__gethex+0x474>)
 800841a:	e6ac      	b.n	8008176 <__gethex+0x16a>
 800841c:	6922      	ldr	r2, [r4, #16]
 800841e:	f104 010c 	add.w	r1, r4, #12
 8008422:	3202      	adds	r2, #2
 8008424:	0092      	lsls	r2, r2, #2
 8008426:	300c      	adds	r0, #12
 8008428:	f000 f91a 	bl	8008660 <memcpy>
 800842c:	4621      	mov	r1, r4
 800842e:	9802      	ldr	r0, [sp, #8]
 8008430:	f000 f964 	bl	80086fc <_Bfree>
 8008434:	464c      	mov	r4, r9
 8008436:	6923      	ldr	r3, [r4, #16]
 8008438:	1c5a      	adds	r2, r3, #1
 800843a:	6122      	str	r2, [r4, #16]
 800843c:	2201      	movs	r2, #1
 800843e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008442:	615a      	str	r2, [r3, #20]
 8008444:	e7bd      	b.n	80083c2 <__gethex+0x3b6>
 8008446:	6922      	ldr	r2, [r4, #16]
 8008448:	455a      	cmp	r2, fp
 800844a:	dd0b      	ble.n	8008464 <__gethex+0x458>
 800844c:	2101      	movs	r1, #1
 800844e:	4620      	mov	r0, r4
 8008450:	f7ff fd74 	bl	8007f3c <rshift>
 8008454:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008458:	3501      	adds	r5, #1
 800845a:	42ab      	cmp	r3, r5
 800845c:	f6ff aed5 	blt.w	800820a <__gethex+0x1fe>
 8008460:	2701      	movs	r7, #1
 8008462:	e7c2      	b.n	80083ea <__gethex+0x3de>
 8008464:	f016 061f 	ands.w	r6, r6, #31
 8008468:	d0fa      	beq.n	8008460 <__gethex+0x454>
 800846a:	449a      	add	sl, r3
 800846c:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8008470:	f000 f9fa 	bl	8008868 <__hi0bits>
 8008474:	f1c6 0620 	rsb	r6, r6, #32
 8008478:	42b0      	cmp	r0, r6
 800847a:	dbe7      	blt.n	800844c <__gethex+0x440>
 800847c:	e7f0      	b.n	8008460 <__gethex+0x454>
 800847e:	bf00      	nop
 8008480:	0800b6b4 	.word	0x0800b6b4

08008484 <L_shift>:
 8008484:	f1c2 0208 	rsb	r2, r2, #8
 8008488:	0092      	lsls	r2, r2, #2
 800848a:	b570      	push	{r4, r5, r6, lr}
 800848c:	f1c2 0620 	rsb	r6, r2, #32
 8008490:	6843      	ldr	r3, [r0, #4]
 8008492:	6804      	ldr	r4, [r0, #0]
 8008494:	fa03 f506 	lsl.w	r5, r3, r6
 8008498:	432c      	orrs	r4, r5
 800849a:	40d3      	lsrs	r3, r2
 800849c:	6004      	str	r4, [r0, #0]
 800849e:	f840 3f04 	str.w	r3, [r0, #4]!
 80084a2:	4288      	cmp	r0, r1
 80084a4:	d3f4      	bcc.n	8008490 <L_shift+0xc>
 80084a6:	bd70      	pop	{r4, r5, r6, pc}

080084a8 <__match>:
 80084a8:	b530      	push	{r4, r5, lr}
 80084aa:	6803      	ldr	r3, [r0, #0]
 80084ac:	3301      	adds	r3, #1
 80084ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084b2:	b914      	cbnz	r4, 80084ba <__match+0x12>
 80084b4:	6003      	str	r3, [r0, #0]
 80084b6:	2001      	movs	r0, #1
 80084b8:	bd30      	pop	{r4, r5, pc}
 80084ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80084be:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80084c2:	2d19      	cmp	r5, #25
 80084c4:	bf98      	it	ls
 80084c6:	3220      	addls	r2, #32
 80084c8:	42a2      	cmp	r2, r4
 80084ca:	d0f0      	beq.n	80084ae <__match+0x6>
 80084cc:	2000      	movs	r0, #0
 80084ce:	e7f3      	b.n	80084b8 <__match+0x10>

080084d0 <__hexnan>:
 80084d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084d4:	2500      	movs	r5, #0
 80084d6:	680b      	ldr	r3, [r1, #0]
 80084d8:	4682      	mov	sl, r0
 80084da:	115e      	asrs	r6, r3, #5
 80084dc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80084e0:	f013 031f 	ands.w	r3, r3, #31
 80084e4:	bf18      	it	ne
 80084e6:	3604      	addne	r6, #4
 80084e8:	1f37      	subs	r7, r6, #4
 80084ea:	4690      	mov	r8, r2
 80084ec:	46b9      	mov	r9, r7
 80084ee:	463c      	mov	r4, r7
 80084f0:	46ab      	mov	fp, r5
 80084f2:	b087      	sub	sp, #28
 80084f4:	6801      	ldr	r1, [r0, #0]
 80084f6:	9301      	str	r3, [sp, #4]
 80084f8:	f846 5c04 	str.w	r5, [r6, #-4]
 80084fc:	9502      	str	r5, [sp, #8]
 80084fe:	784a      	ldrb	r2, [r1, #1]
 8008500:	1c4b      	adds	r3, r1, #1
 8008502:	9303      	str	r3, [sp, #12]
 8008504:	b342      	cbz	r2, 8008558 <__hexnan+0x88>
 8008506:	4610      	mov	r0, r2
 8008508:	9105      	str	r1, [sp, #20]
 800850a:	9204      	str	r2, [sp, #16]
 800850c:	f7ff fd69 	bl	8007fe2 <__hexdig_fun>
 8008510:	2800      	cmp	r0, #0
 8008512:	d14f      	bne.n	80085b4 <__hexnan+0xe4>
 8008514:	9a04      	ldr	r2, [sp, #16]
 8008516:	9905      	ldr	r1, [sp, #20]
 8008518:	2a20      	cmp	r2, #32
 800851a:	d818      	bhi.n	800854e <__hexnan+0x7e>
 800851c:	9b02      	ldr	r3, [sp, #8]
 800851e:	459b      	cmp	fp, r3
 8008520:	dd13      	ble.n	800854a <__hexnan+0x7a>
 8008522:	454c      	cmp	r4, r9
 8008524:	d206      	bcs.n	8008534 <__hexnan+0x64>
 8008526:	2d07      	cmp	r5, #7
 8008528:	dc04      	bgt.n	8008534 <__hexnan+0x64>
 800852a:	462a      	mov	r2, r5
 800852c:	4649      	mov	r1, r9
 800852e:	4620      	mov	r0, r4
 8008530:	f7ff ffa8 	bl	8008484 <L_shift>
 8008534:	4544      	cmp	r4, r8
 8008536:	d950      	bls.n	80085da <__hexnan+0x10a>
 8008538:	2300      	movs	r3, #0
 800853a:	f1a4 0904 	sub.w	r9, r4, #4
 800853e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008542:	461d      	mov	r5, r3
 8008544:	464c      	mov	r4, r9
 8008546:	f8cd b008 	str.w	fp, [sp, #8]
 800854a:	9903      	ldr	r1, [sp, #12]
 800854c:	e7d7      	b.n	80084fe <__hexnan+0x2e>
 800854e:	2a29      	cmp	r2, #41	; 0x29
 8008550:	d156      	bne.n	8008600 <__hexnan+0x130>
 8008552:	3102      	adds	r1, #2
 8008554:	f8ca 1000 	str.w	r1, [sl]
 8008558:	f1bb 0f00 	cmp.w	fp, #0
 800855c:	d050      	beq.n	8008600 <__hexnan+0x130>
 800855e:	454c      	cmp	r4, r9
 8008560:	d206      	bcs.n	8008570 <__hexnan+0xa0>
 8008562:	2d07      	cmp	r5, #7
 8008564:	dc04      	bgt.n	8008570 <__hexnan+0xa0>
 8008566:	462a      	mov	r2, r5
 8008568:	4649      	mov	r1, r9
 800856a:	4620      	mov	r0, r4
 800856c:	f7ff ff8a 	bl	8008484 <L_shift>
 8008570:	4544      	cmp	r4, r8
 8008572:	d934      	bls.n	80085de <__hexnan+0x10e>
 8008574:	4623      	mov	r3, r4
 8008576:	f1a8 0204 	sub.w	r2, r8, #4
 800857a:	f853 1b04 	ldr.w	r1, [r3], #4
 800857e:	429f      	cmp	r7, r3
 8008580:	f842 1f04 	str.w	r1, [r2, #4]!
 8008584:	d2f9      	bcs.n	800857a <__hexnan+0xaa>
 8008586:	1b3b      	subs	r3, r7, r4
 8008588:	f023 0303 	bic.w	r3, r3, #3
 800858c:	3304      	adds	r3, #4
 800858e:	3401      	adds	r4, #1
 8008590:	3e03      	subs	r6, #3
 8008592:	42b4      	cmp	r4, r6
 8008594:	bf88      	it	hi
 8008596:	2304      	movhi	r3, #4
 8008598:	2200      	movs	r2, #0
 800859a:	4443      	add	r3, r8
 800859c:	f843 2b04 	str.w	r2, [r3], #4
 80085a0:	429f      	cmp	r7, r3
 80085a2:	d2fb      	bcs.n	800859c <__hexnan+0xcc>
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	b91b      	cbnz	r3, 80085b0 <__hexnan+0xe0>
 80085a8:	4547      	cmp	r7, r8
 80085aa:	d127      	bne.n	80085fc <__hexnan+0x12c>
 80085ac:	2301      	movs	r3, #1
 80085ae:	603b      	str	r3, [r7, #0]
 80085b0:	2005      	movs	r0, #5
 80085b2:	e026      	b.n	8008602 <__hexnan+0x132>
 80085b4:	3501      	adds	r5, #1
 80085b6:	2d08      	cmp	r5, #8
 80085b8:	f10b 0b01 	add.w	fp, fp, #1
 80085bc:	dd06      	ble.n	80085cc <__hexnan+0xfc>
 80085be:	4544      	cmp	r4, r8
 80085c0:	d9c3      	bls.n	800854a <__hexnan+0x7a>
 80085c2:	2300      	movs	r3, #0
 80085c4:	2501      	movs	r5, #1
 80085c6:	f844 3c04 	str.w	r3, [r4, #-4]
 80085ca:	3c04      	subs	r4, #4
 80085cc:	6822      	ldr	r2, [r4, #0]
 80085ce:	f000 000f 	and.w	r0, r0, #15
 80085d2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80085d6:	6022      	str	r2, [r4, #0]
 80085d8:	e7b7      	b.n	800854a <__hexnan+0x7a>
 80085da:	2508      	movs	r5, #8
 80085dc:	e7b5      	b.n	800854a <__hexnan+0x7a>
 80085de:	9b01      	ldr	r3, [sp, #4]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d0df      	beq.n	80085a4 <__hexnan+0xd4>
 80085e4:	f04f 32ff 	mov.w	r2, #4294967295
 80085e8:	f1c3 0320 	rsb	r3, r3, #32
 80085ec:	fa22 f303 	lsr.w	r3, r2, r3
 80085f0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80085f4:	401a      	ands	r2, r3
 80085f6:	f846 2c04 	str.w	r2, [r6, #-4]
 80085fa:	e7d3      	b.n	80085a4 <__hexnan+0xd4>
 80085fc:	3f04      	subs	r7, #4
 80085fe:	e7d1      	b.n	80085a4 <__hexnan+0xd4>
 8008600:	2004      	movs	r0, #4
 8008602:	b007      	add	sp, #28
 8008604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008608 <_localeconv_r>:
 8008608:	4800      	ldr	r0, [pc, #0]	; (800860c <_localeconv_r+0x4>)
 800860a:	4770      	bx	lr
 800860c:	20000180 	.word	0x20000180

08008610 <malloc>:
 8008610:	4b02      	ldr	r3, [pc, #8]	; (800861c <malloc+0xc>)
 8008612:	4601      	mov	r1, r0
 8008614:	6818      	ldr	r0, [r3, #0]
 8008616:	f000 bd43 	b.w	80090a0 <_malloc_r>
 800861a:	bf00      	nop
 800861c:	20000028 	.word	0x20000028

08008620 <__ascii_mbtowc>:
 8008620:	b082      	sub	sp, #8
 8008622:	b901      	cbnz	r1, 8008626 <__ascii_mbtowc+0x6>
 8008624:	a901      	add	r1, sp, #4
 8008626:	b142      	cbz	r2, 800863a <__ascii_mbtowc+0x1a>
 8008628:	b14b      	cbz	r3, 800863e <__ascii_mbtowc+0x1e>
 800862a:	7813      	ldrb	r3, [r2, #0]
 800862c:	600b      	str	r3, [r1, #0]
 800862e:	7812      	ldrb	r2, [r2, #0]
 8008630:	1e10      	subs	r0, r2, #0
 8008632:	bf18      	it	ne
 8008634:	2001      	movne	r0, #1
 8008636:	b002      	add	sp, #8
 8008638:	4770      	bx	lr
 800863a:	4610      	mov	r0, r2
 800863c:	e7fb      	b.n	8008636 <__ascii_mbtowc+0x16>
 800863e:	f06f 0001 	mvn.w	r0, #1
 8008642:	e7f8      	b.n	8008636 <__ascii_mbtowc+0x16>

08008644 <memchr>:
 8008644:	4603      	mov	r3, r0
 8008646:	b510      	push	{r4, lr}
 8008648:	b2c9      	uxtb	r1, r1
 800864a:	4402      	add	r2, r0
 800864c:	4293      	cmp	r3, r2
 800864e:	4618      	mov	r0, r3
 8008650:	d101      	bne.n	8008656 <memchr+0x12>
 8008652:	2000      	movs	r0, #0
 8008654:	e003      	b.n	800865e <memchr+0x1a>
 8008656:	7804      	ldrb	r4, [r0, #0]
 8008658:	3301      	adds	r3, #1
 800865a:	428c      	cmp	r4, r1
 800865c:	d1f6      	bne.n	800864c <memchr+0x8>
 800865e:	bd10      	pop	{r4, pc}

08008660 <memcpy>:
 8008660:	440a      	add	r2, r1
 8008662:	4291      	cmp	r1, r2
 8008664:	f100 33ff 	add.w	r3, r0, #4294967295
 8008668:	d100      	bne.n	800866c <memcpy+0xc>
 800866a:	4770      	bx	lr
 800866c:	b510      	push	{r4, lr}
 800866e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008672:	4291      	cmp	r1, r2
 8008674:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008678:	d1f9      	bne.n	800866e <memcpy+0xe>
 800867a:	bd10      	pop	{r4, pc}

0800867c <_Balloc>:
 800867c:	b570      	push	{r4, r5, r6, lr}
 800867e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008680:	4604      	mov	r4, r0
 8008682:	460d      	mov	r5, r1
 8008684:	b976      	cbnz	r6, 80086a4 <_Balloc+0x28>
 8008686:	2010      	movs	r0, #16
 8008688:	f7ff ffc2 	bl	8008610 <malloc>
 800868c:	4602      	mov	r2, r0
 800868e:	6260      	str	r0, [r4, #36]	; 0x24
 8008690:	b920      	cbnz	r0, 800869c <_Balloc+0x20>
 8008692:	2166      	movs	r1, #102	; 0x66
 8008694:	4b17      	ldr	r3, [pc, #92]	; (80086f4 <_Balloc+0x78>)
 8008696:	4818      	ldr	r0, [pc, #96]	; (80086f8 <_Balloc+0x7c>)
 8008698:	f000 feee 	bl	8009478 <__assert_func>
 800869c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80086a0:	6006      	str	r6, [r0, #0]
 80086a2:	60c6      	str	r6, [r0, #12]
 80086a4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80086a6:	68f3      	ldr	r3, [r6, #12]
 80086a8:	b183      	cbz	r3, 80086cc <_Balloc+0x50>
 80086aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80086ac:	68db      	ldr	r3, [r3, #12]
 80086ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80086b2:	b9b8      	cbnz	r0, 80086e4 <_Balloc+0x68>
 80086b4:	2101      	movs	r1, #1
 80086b6:	fa01 f605 	lsl.w	r6, r1, r5
 80086ba:	1d72      	adds	r2, r6, #5
 80086bc:	4620      	mov	r0, r4
 80086be:	0092      	lsls	r2, r2, #2
 80086c0:	f000 fc94 	bl	8008fec <_calloc_r>
 80086c4:	b160      	cbz	r0, 80086e0 <_Balloc+0x64>
 80086c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80086ca:	e00e      	b.n	80086ea <_Balloc+0x6e>
 80086cc:	2221      	movs	r2, #33	; 0x21
 80086ce:	2104      	movs	r1, #4
 80086d0:	4620      	mov	r0, r4
 80086d2:	f000 fc8b 	bl	8008fec <_calloc_r>
 80086d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80086d8:	60f0      	str	r0, [r6, #12]
 80086da:	68db      	ldr	r3, [r3, #12]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d1e4      	bne.n	80086aa <_Balloc+0x2e>
 80086e0:	2000      	movs	r0, #0
 80086e2:	bd70      	pop	{r4, r5, r6, pc}
 80086e4:	6802      	ldr	r2, [r0, #0]
 80086e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80086ea:	2300      	movs	r3, #0
 80086ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80086f0:	e7f7      	b.n	80086e2 <_Balloc+0x66>
 80086f2:	bf00      	nop
 80086f4:	0800b63e 	.word	0x0800b63e
 80086f8:	0800b744 	.word	0x0800b744

080086fc <_Bfree>:
 80086fc:	b570      	push	{r4, r5, r6, lr}
 80086fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008700:	4605      	mov	r5, r0
 8008702:	460c      	mov	r4, r1
 8008704:	b976      	cbnz	r6, 8008724 <_Bfree+0x28>
 8008706:	2010      	movs	r0, #16
 8008708:	f7ff ff82 	bl	8008610 <malloc>
 800870c:	4602      	mov	r2, r0
 800870e:	6268      	str	r0, [r5, #36]	; 0x24
 8008710:	b920      	cbnz	r0, 800871c <_Bfree+0x20>
 8008712:	218a      	movs	r1, #138	; 0x8a
 8008714:	4b08      	ldr	r3, [pc, #32]	; (8008738 <_Bfree+0x3c>)
 8008716:	4809      	ldr	r0, [pc, #36]	; (800873c <_Bfree+0x40>)
 8008718:	f000 feae 	bl	8009478 <__assert_func>
 800871c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008720:	6006      	str	r6, [r0, #0]
 8008722:	60c6      	str	r6, [r0, #12]
 8008724:	b13c      	cbz	r4, 8008736 <_Bfree+0x3a>
 8008726:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008728:	6862      	ldr	r2, [r4, #4]
 800872a:	68db      	ldr	r3, [r3, #12]
 800872c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008730:	6021      	str	r1, [r4, #0]
 8008732:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008736:	bd70      	pop	{r4, r5, r6, pc}
 8008738:	0800b63e 	.word	0x0800b63e
 800873c:	0800b744 	.word	0x0800b744

08008740 <__multadd>:
 8008740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008744:	4698      	mov	r8, r3
 8008746:	460c      	mov	r4, r1
 8008748:	2300      	movs	r3, #0
 800874a:	690e      	ldr	r6, [r1, #16]
 800874c:	4607      	mov	r7, r0
 800874e:	f101 0014 	add.w	r0, r1, #20
 8008752:	6805      	ldr	r5, [r0, #0]
 8008754:	3301      	adds	r3, #1
 8008756:	b2a9      	uxth	r1, r5
 8008758:	fb02 8101 	mla	r1, r2, r1, r8
 800875c:	0c2d      	lsrs	r5, r5, #16
 800875e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008762:	fb02 c505 	mla	r5, r2, r5, ip
 8008766:	b289      	uxth	r1, r1
 8008768:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800876c:	429e      	cmp	r6, r3
 800876e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008772:	f840 1b04 	str.w	r1, [r0], #4
 8008776:	dcec      	bgt.n	8008752 <__multadd+0x12>
 8008778:	f1b8 0f00 	cmp.w	r8, #0
 800877c:	d022      	beq.n	80087c4 <__multadd+0x84>
 800877e:	68a3      	ldr	r3, [r4, #8]
 8008780:	42b3      	cmp	r3, r6
 8008782:	dc19      	bgt.n	80087b8 <__multadd+0x78>
 8008784:	6861      	ldr	r1, [r4, #4]
 8008786:	4638      	mov	r0, r7
 8008788:	3101      	adds	r1, #1
 800878a:	f7ff ff77 	bl	800867c <_Balloc>
 800878e:	4605      	mov	r5, r0
 8008790:	b928      	cbnz	r0, 800879e <__multadd+0x5e>
 8008792:	4602      	mov	r2, r0
 8008794:	21b5      	movs	r1, #181	; 0xb5
 8008796:	4b0d      	ldr	r3, [pc, #52]	; (80087cc <__multadd+0x8c>)
 8008798:	480d      	ldr	r0, [pc, #52]	; (80087d0 <__multadd+0x90>)
 800879a:	f000 fe6d 	bl	8009478 <__assert_func>
 800879e:	6922      	ldr	r2, [r4, #16]
 80087a0:	f104 010c 	add.w	r1, r4, #12
 80087a4:	3202      	adds	r2, #2
 80087a6:	0092      	lsls	r2, r2, #2
 80087a8:	300c      	adds	r0, #12
 80087aa:	f7ff ff59 	bl	8008660 <memcpy>
 80087ae:	4621      	mov	r1, r4
 80087b0:	4638      	mov	r0, r7
 80087b2:	f7ff ffa3 	bl	80086fc <_Bfree>
 80087b6:	462c      	mov	r4, r5
 80087b8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80087bc:	3601      	adds	r6, #1
 80087be:	f8c3 8014 	str.w	r8, [r3, #20]
 80087c2:	6126      	str	r6, [r4, #16]
 80087c4:	4620      	mov	r0, r4
 80087c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087ca:	bf00      	nop
 80087cc:	0800b6b4 	.word	0x0800b6b4
 80087d0:	0800b744 	.word	0x0800b744

080087d4 <__s2b>:
 80087d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087d8:	4615      	mov	r5, r2
 80087da:	2209      	movs	r2, #9
 80087dc:	461f      	mov	r7, r3
 80087de:	3308      	adds	r3, #8
 80087e0:	460c      	mov	r4, r1
 80087e2:	fb93 f3f2 	sdiv	r3, r3, r2
 80087e6:	4606      	mov	r6, r0
 80087e8:	2201      	movs	r2, #1
 80087ea:	2100      	movs	r1, #0
 80087ec:	429a      	cmp	r2, r3
 80087ee:	db09      	blt.n	8008804 <__s2b+0x30>
 80087f0:	4630      	mov	r0, r6
 80087f2:	f7ff ff43 	bl	800867c <_Balloc>
 80087f6:	b940      	cbnz	r0, 800880a <__s2b+0x36>
 80087f8:	4602      	mov	r2, r0
 80087fa:	21ce      	movs	r1, #206	; 0xce
 80087fc:	4b18      	ldr	r3, [pc, #96]	; (8008860 <__s2b+0x8c>)
 80087fe:	4819      	ldr	r0, [pc, #100]	; (8008864 <__s2b+0x90>)
 8008800:	f000 fe3a 	bl	8009478 <__assert_func>
 8008804:	0052      	lsls	r2, r2, #1
 8008806:	3101      	adds	r1, #1
 8008808:	e7f0      	b.n	80087ec <__s2b+0x18>
 800880a:	9b08      	ldr	r3, [sp, #32]
 800880c:	2d09      	cmp	r5, #9
 800880e:	6143      	str	r3, [r0, #20]
 8008810:	f04f 0301 	mov.w	r3, #1
 8008814:	6103      	str	r3, [r0, #16]
 8008816:	dd16      	ble.n	8008846 <__s2b+0x72>
 8008818:	f104 0909 	add.w	r9, r4, #9
 800881c:	46c8      	mov	r8, r9
 800881e:	442c      	add	r4, r5
 8008820:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008824:	4601      	mov	r1, r0
 8008826:	220a      	movs	r2, #10
 8008828:	4630      	mov	r0, r6
 800882a:	3b30      	subs	r3, #48	; 0x30
 800882c:	f7ff ff88 	bl	8008740 <__multadd>
 8008830:	45a0      	cmp	r8, r4
 8008832:	d1f5      	bne.n	8008820 <__s2b+0x4c>
 8008834:	f1a5 0408 	sub.w	r4, r5, #8
 8008838:	444c      	add	r4, r9
 800883a:	1b2d      	subs	r5, r5, r4
 800883c:	1963      	adds	r3, r4, r5
 800883e:	42bb      	cmp	r3, r7
 8008840:	db04      	blt.n	800884c <__s2b+0x78>
 8008842:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008846:	2509      	movs	r5, #9
 8008848:	340a      	adds	r4, #10
 800884a:	e7f6      	b.n	800883a <__s2b+0x66>
 800884c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008850:	4601      	mov	r1, r0
 8008852:	220a      	movs	r2, #10
 8008854:	4630      	mov	r0, r6
 8008856:	3b30      	subs	r3, #48	; 0x30
 8008858:	f7ff ff72 	bl	8008740 <__multadd>
 800885c:	e7ee      	b.n	800883c <__s2b+0x68>
 800885e:	bf00      	nop
 8008860:	0800b6b4 	.word	0x0800b6b4
 8008864:	0800b744 	.word	0x0800b744

08008868 <__hi0bits>:
 8008868:	0c02      	lsrs	r2, r0, #16
 800886a:	0412      	lsls	r2, r2, #16
 800886c:	4603      	mov	r3, r0
 800886e:	b9ca      	cbnz	r2, 80088a4 <__hi0bits+0x3c>
 8008870:	0403      	lsls	r3, r0, #16
 8008872:	2010      	movs	r0, #16
 8008874:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008878:	bf04      	itt	eq
 800887a:	021b      	lsleq	r3, r3, #8
 800887c:	3008      	addeq	r0, #8
 800887e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008882:	bf04      	itt	eq
 8008884:	011b      	lsleq	r3, r3, #4
 8008886:	3004      	addeq	r0, #4
 8008888:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800888c:	bf04      	itt	eq
 800888e:	009b      	lsleq	r3, r3, #2
 8008890:	3002      	addeq	r0, #2
 8008892:	2b00      	cmp	r3, #0
 8008894:	db05      	blt.n	80088a2 <__hi0bits+0x3a>
 8008896:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800889a:	f100 0001 	add.w	r0, r0, #1
 800889e:	bf08      	it	eq
 80088a0:	2020      	moveq	r0, #32
 80088a2:	4770      	bx	lr
 80088a4:	2000      	movs	r0, #0
 80088a6:	e7e5      	b.n	8008874 <__hi0bits+0xc>

080088a8 <__lo0bits>:
 80088a8:	6803      	ldr	r3, [r0, #0]
 80088aa:	4602      	mov	r2, r0
 80088ac:	f013 0007 	ands.w	r0, r3, #7
 80088b0:	d00b      	beq.n	80088ca <__lo0bits+0x22>
 80088b2:	07d9      	lsls	r1, r3, #31
 80088b4:	d422      	bmi.n	80088fc <__lo0bits+0x54>
 80088b6:	0798      	lsls	r0, r3, #30
 80088b8:	bf49      	itett	mi
 80088ba:	085b      	lsrmi	r3, r3, #1
 80088bc:	089b      	lsrpl	r3, r3, #2
 80088be:	2001      	movmi	r0, #1
 80088c0:	6013      	strmi	r3, [r2, #0]
 80088c2:	bf5c      	itt	pl
 80088c4:	2002      	movpl	r0, #2
 80088c6:	6013      	strpl	r3, [r2, #0]
 80088c8:	4770      	bx	lr
 80088ca:	b299      	uxth	r1, r3
 80088cc:	b909      	cbnz	r1, 80088d2 <__lo0bits+0x2a>
 80088ce:	2010      	movs	r0, #16
 80088d0:	0c1b      	lsrs	r3, r3, #16
 80088d2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80088d6:	bf04      	itt	eq
 80088d8:	0a1b      	lsreq	r3, r3, #8
 80088da:	3008      	addeq	r0, #8
 80088dc:	0719      	lsls	r1, r3, #28
 80088de:	bf04      	itt	eq
 80088e0:	091b      	lsreq	r3, r3, #4
 80088e2:	3004      	addeq	r0, #4
 80088e4:	0799      	lsls	r1, r3, #30
 80088e6:	bf04      	itt	eq
 80088e8:	089b      	lsreq	r3, r3, #2
 80088ea:	3002      	addeq	r0, #2
 80088ec:	07d9      	lsls	r1, r3, #31
 80088ee:	d403      	bmi.n	80088f8 <__lo0bits+0x50>
 80088f0:	085b      	lsrs	r3, r3, #1
 80088f2:	f100 0001 	add.w	r0, r0, #1
 80088f6:	d003      	beq.n	8008900 <__lo0bits+0x58>
 80088f8:	6013      	str	r3, [r2, #0]
 80088fa:	4770      	bx	lr
 80088fc:	2000      	movs	r0, #0
 80088fe:	4770      	bx	lr
 8008900:	2020      	movs	r0, #32
 8008902:	4770      	bx	lr

08008904 <__i2b>:
 8008904:	b510      	push	{r4, lr}
 8008906:	460c      	mov	r4, r1
 8008908:	2101      	movs	r1, #1
 800890a:	f7ff feb7 	bl	800867c <_Balloc>
 800890e:	4602      	mov	r2, r0
 8008910:	b928      	cbnz	r0, 800891e <__i2b+0x1a>
 8008912:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008916:	4b04      	ldr	r3, [pc, #16]	; (8008928 <__i2b+0x24>)
 8008918:	4804      	ldr	r0, [pc, #16]	; (800892c <__i2b+0x28>)
 800891a:	f000 fdad 	bl	8009478 <__assert_func>
 800891e:	2301      	movs	r3, #1
 8008920:	6144      	str	r4, [r0, #20]
 8008922:	6103      	str	r3, [r0, #16]
 8008924:	bd10      	pop	{r4, pc}
 8008926:	bf00      	nop
 8008928:	0800b6b4 	.word	0x0800b6b4
 800892c:	0800b744 	.word	0x0800b744

08008930 <__multiply>:
 8008930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008934:	4614      	mov	r4, r2
 8008936:	690a      	ldr	r2, [r1, #16]
 8008938:	6923      	ldr	r3, [r4, #16]
 800893a:	460d      	mov	r5, r1
 800893c:	429a      	cmp	r2, r3
 800893e:	bfbe      	ittt	lt
 8008940:	460b      	movlt	r3, r1
 8008942:	4625      	movlt	r5, r4
 8008944:	461c      	movlt	r4, r3
 8008946:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800894a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800894e:	68ab      	ldr	r3, [r5, #8]
 8008950:	6869      	ldr	r1, [r5, #4]
 8008952:	eb0a 0709 	add.w	r7, sl, r9
 8008956:	42bb      	cmp	r3, r7
 8008958:	b085      	sub	sp, #20
 800895a:	bfb8      	it	lt
 800895c:	3101      	addlt	r1, #1
 800895e:	f7ff fe8d 	bl	800867c <_Balloc>
 8008962:	b930      	cbnz	r0, 8008972 <__multiply+0x42>
 8008964:	4602      	mov	r2, r0
 8008966:	f240 115d 	movw	r1, #349	; 0x15d
 800896a:	4b41      	ldr	r3, [pc, #260]	; (8008a70 <__multiply+0x140>)
 800896c:	4841      	ldr	r0, [pc, #260]	; (8008a74 <__multiply+0x144>)
 800896e:	f000 fd83 	bl	8009478 <__assert_func>
 8008972:	f100 0614 	add.w	r6, r0, #20
 8008976:	4633      	mov	r3, r6
 8008978:	2200      	movs	r2, #0
 800897a:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800897e:	4543      	cmp	r3, r8
 8008980:	d31e      	bcc.n	80089c0 <__multiply+0x90>
 8008982:	f105 0c14 	add.w	ip, r5, #20
 8008986:	f104 0314 	add.w	r3, r4, #20
 800898a:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800898e:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008992:	9202      	str	r2, [sp, #8]
 8008994:	ebac 0205 	sub.w	r2, ip, r5
 8008998:	3a15      	subs	r2, #21
 800899a:	f022 0203 	bic.w	r2, r2, #3
 800899e:	3204      	adds	r2, #4
 80089a0:	f105 0115 	add.w	r1, r5, #21
 80089a4:	458c      	cmp	ip, r1
 80089a6:	bf38      	it	cc
 80089a8:	2204      	movcc	r2, #4
 80089aa:	9201      	str	r2, [sp, #4]
 80089ac:	9a02      	ldr	r2, [sp, #8]
 80089ae:	9303      	str	r3, [sp, #12]
 80089b0:	429a      	cmp	r2, r3
 80089b2:	d808      	bhi.n	80089c6 <__multiply+0x96>
 80089b4:	2f00      	cmp	r7, #0
 80089b6:	dc55      	bgt.n	8008a64 <__multiply+0x134>
 80089b8:	6107      	str	r7, [r0, #16]
 80089ba:	b005      	add	sp, #20
 80089bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089c0:	f843 2b04 	str.w	r2, [r3], #4
 80089c4:	e7db      	b.n	800897e <__multiply+0x4e>
 80089c6:	f8b3 a000 	ldrh.w	sl, [r3]
 80089ca:	f1ba 0f00 	cmp.w	sl, #0
 80089ce:	d020      	beq.n	8008a12 <__multiply+0xe2>
 80089d0:	46b1      	mov	r9, r6
 80089d2:	2200      	movs	r2, #0
 80089d4:	f105 0e14 	add.w	lr, r5, #20
 80089d8:	f85e 4b04 	ldr.w	r4, [lr], #4
 80089dc:	f8d9 b000 	ldr.w	fp, [r9]
 80089e0:	b2a1      	uxth	r1, r4
 80089e2:	fa1f fb8b 	uxth.w	fp, fp
 80089e6:	fb0a b101 	mla	r1, sl, r1, fp
 80089ea:	4411      	add	r1, r2
 80089ec:	f8d9 2000 	ldr.w	r2, [r9]
 80089f0:	0c24      	lsrs	r4, r4, #16
 80089f2:	0c12      	lsrs	r2, r2, #16
 80089f4:	fb0a 2404 	mla	r4, sl, r4, r2
 80089f8:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80089fc:	b289      	uxth	r1, r1
 80089fe:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008a02:	45f4      	cmp	ip, lr
 8008a04:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008a08:	f849 1b04 	str.w	r1, [r9], #4
 8008a0c:	d8e4      	bhi.n	80089d8 <__multiply+0xa8>
 8008a0e:	9901      	ldr	r1, [sp, #4]
 8008a10:	5072      	str	r2, [r6, r1]
 8008a12:	9a03      	ldr	r2, [sp, #12]
 8008a14:	3304      	adds	r3, #4
 8008a16:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008a1a:	f1b9 0f00 	cmp.w	r9, #0
 8008a1e:	d01f      	beq.n	8008a60 <__multiply+0x130>
 8008a20:	46b6      	mov	lr, r6
 8008a22:	f04f 0a00 	mov.w	sl, #0
 8008a26:	6834      	ldr	r4, [r6, #0]
 8008a28:	f105 0114 	add.w	r1, r5, #20
 8008a2c:	880a      	ldrh	r2, [r1, #0]
 8008a2e:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008a32:	b2a4      	uxth	r4, r4
 8008a34:	fb09 b202 	mla	r2, r9, r2, fp
 8008a38:	4492      	add	sl, r2
 8008a3a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008a3e:	f84e 4b04 	str.w	r4, [lr], #4
 8008a42:	f851 4b04 	ldr.w	r4, [r1], #4
 8008a46:	f8be 2000 	ldrh.w	r2, [lr]
 8008a4a:	0c24      	lsrs	r4, r4, #16
 8008a4c:	fb09 2404 	mla	r4, r9, r4, r2
 8008a50:	458c      	cmp	ip, r1
 8008a52:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008a56:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008a5a:	d8e7      	bhi.n	8008a2c <__multiply+0xfc>
 8008a5c:	9a01      	ldr	r2, [sp, #4]
 8008a5e:	50b4      	str	r4, [r6, r2]
 8008a60:	3604      	adds	r6, #4
 8008a62:	e7a3      	b.n	80089ac <__multiply+0x7c>
 8008a64:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d1a5      	bne.n	80089b8 <__multiply+0x88>
 8008a6c:	3f01      	subs	r7, #1
 8008a6e:	e7a1      	b.n	80089b4 <__multiply+0x84>
 8008a70:	0800b6b4 	.word	0x0800b6b4
 8008a74:	0800b744 	.word	0x0800b744

08008a78 <__pow5mult>:
 8008a78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a7c:	4615      	mov	r5, r2
 8008a7e:	f012 0203 	ands.w	r2, r2, #3
 8008a82:	4606      	mov	r6, r0
 8008a84:	460f      	mov	r7, r1
 8008a86:	d007      	beq.n	8008a98 <__pow5mult+0x20>
 8008a88:	4c25      	ldr	r4, [pc, #148]	; (8008b20 <__pow5mult+0xa8>)
 8008a8a:	3a01      	subs	r2, #1
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008a92:	f7ff fe55 	bl	8008740 <__multadd>
 8008a96:	4607      	mov	r7, r0
 8008a98:	10ad      	asrs	r5, r5, #2
 8008a9a:	d03d      	beq.n	8008b18 <__pow5mult+0xa0>
 8008a9c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008a9e:	b97c      	cbnz	r4, 8008ac0 <__pow5mult+0x48>
 8008aa0:	2010      	movs	r0, #16
 8008aa2:	f7ff fdb5 	bl	8008610 <malloc>
 8008aa6:	4602      	mov	r2, r0
 8008aa8:	6270      	str	r0, [r6, #36]	; 0x24
 8008aaa:	b928      	cbnz	r0, 8008ab8 <__pow5mult+0x40>
 8008aac:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008ab0:	4b1c      	ldr	r3, [pc, #112]	; (8008b24 <__pow5mult+0xac>)
 8008ab2:	481d      	ldr	r0, [pc, #116]	; (8008b28 <__pow5mult+0xb0>)
 8008ab4:	f000 fce0 	bl	8009478 <__assert_func>
 8008ab8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008abc:	6004      	str	r4, [r0, #0]
 8008abe:	60c4      	str	r4, [r0, #12]
 8008ac0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008ac4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008ac8:	b94c      	cbnz	r4, 8008ade <__pow5mult+0x66>
 8008aca:	f240 2171 	movw	r1, #625	; 0x271
 8008ace:	4630      	mov	r0, r6
 8008ad0:	f7ff ff18 	bl	8008904 <__i2b>
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	4604      	mov	r4, r0
 8008ad8:	f8c8 0008 	str.w	r0, [r8, #8]
 8008adc:	6003      	str	r3, [r0, #0]
 8008ade:	f04f 0900 	mov.w	r9, #0
 8008ae2:	07eb      	lsls	r3, r5, #31
 8008ae4:	d50a      	bpl.n	8008afc <__pow5mult+0x84>
 8008ae6:	4639      	mov	r1, r7
 8008ae8:	4622      	mov	r2, r4
 8008aea:	4630      	mov	r0, r6
 8008aec:	f7ff ff20 	bl	8008930 <__multiply>
 8008af0:	4680      	mov	r8, r0
 8008af2:	4639      	mov	r1, r7
 8008af4:	4630      	mov	r0, r6
 8008af6:	f7ff fe01 	bl	80086fc <_Bfree>
 8008afa:	4647      	mov	r7, r8
 8008afc:	106d      	asrs	r5, r5, #1
 8008afe:	d00b      	beq.n	8008b18 <__pow5mult+0xa0>
 8008b00:	6820      	ldr	r0, [r4, #0]
 8008b02:	b938      	cbnz	r0, 8008b14 <__pow5mult+0x9c>
 8008b04:	4622      	mov	r2, r4
 8008b06:	4621      	mov	r1, r4
 8008b08:	4630      	mov	r0, r6
 8008b0a:	f7ff ff11 	bl	8008930 <__multiply>
 8008b0e:	6020      	str	r0, [r4, #0]
 8008b10:	f8c0 9000 	str.w	r9, [r0]
 8008b14:	4604      	mov	r4, r0
 8008b16:	e7e4      	b.n	8008ae2 <__pow5mult+0x6a>
 8008b18:	4638      	mov	r0, r7
 8008b1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b1e:	bf00      	nop
 8008b20:	0800b898 	.word	0x0800b898
 8008b24:	0800b63e 	.word	0x0800b63e
 8008b28:	0800b744 	.word	0x0800b744

08008b2c <__lshift>:
 8008b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b30:	460c      	mov	r4, r1
 8008b32:	4607      	mov	r7, r0
 8008b34:	4691      	mov	r9, r2
 8008b36:	6923      	ldr	r3, [r4, #16]
 8008b38:	6849      	ldr	r1, [r1, #4]
 8008b3a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008b3e:	68a3      	ldr	r3, [r4, #8]
 8008b40:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008b44:	f108 0601 	add.w	r6, r8, #1
 8008b48:	42b3      	cmp	r3, r6
 8008b4a:	db0b      	blt.n	8008b64 <__lshift+0x38>
 8008b4c:	4638      	mov	r0, r7
 8008b4e:	f7ff fd95 	bl	800867c <_Balloc>
 8008b52:	4605      	mov	r5, r0
 8008b54:	b948      	cbnz	r0, 8008b6a <__lshift+0x3e>
 8008b56:	4602      	mov	r2, r0
 8008b58:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008b5c:	4b27      	ldr	r3, [pc, #156]	; (8008bfc <__lshift+0xd0>)
 8008b5e:	4828      	ldr	r0, [pc, #160]	; (8008c00 <__lshift+0xd4>)
 8008b60:	f000 fc8a 	bl	8009478 <__assert_func>
 8008b64:	3101      	adds	r1, #1
 8008b66:	005b      	lsls	r3, r3, #1
 8008b68:	e7ee      	b.n	8008b48 <__lshift+0x1c>
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	f100 0114 	add.w	r1, r0, #20
 8008b70:	f100 0210 	add.w	r2, r0, #16
 8008b74:	4618      	mov	r0, r3
 8008b76:	4553      	cmp	r3, sl
 8008b78:	db33      	blt.n	8008be2 <__lshift+0xb6>
 8008b7a:	6920      	ldr	r0, [r4, #16]
 8008b7c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008b80:	f104 0314 	add.w	r3, r4, #20
 8008b84:	f019 091f 	ands.w	r9, r9, #31
 8008b88:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008b8c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008b90:	d02b      	beq.n	8008bea <__lshift+0xbe>
 8008b92:	468a      	mov	sl, r1
 8008b94:	2200      	movs	r2, #0
 8008b96:	f1c9 0e20 	rsb	lr, r9, #32
 8008b9a:	6818      	ldr	r0, [r3, #0]
 8008b9c:	fa00 f009 	lsl.w	r0, r0, r9
 8008ba0:	4302      	orrs	r2, r0
 8008ba2:	f84a 2b04 	str.w	r2, [sl], #4
 8008ba6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008baa:	459c      	cmp	ip, r3
 8008bac:	fa22 f20e 	lsr.w	r2, r2, lr
 8008bb0:	d8f3      	bhi.n	8008b9a <__lshift+0x6e>
 8008bb2:	ebac 0304 	sub.w	r3, ip, r4
 8008bb6:	3b15      	subs	r3, #21
 8008bb8:	f023 0303 	bic.w	r3, r3, #3
 8008bbc:	3304      	adds	r3, #4
 8008bbe:	f104 0015 	add.w	r0, r4, #21
 8008bc2:	4584      	cmp	ip, r0
 8008bc4:	bf38      	it	cc
 8008bc6:	2304      	movcc	r3, #4
 8008bc8:	50ca      	str	r2, [r1, r3]
 8008bca:	b10a      	cbz	r2, 8008bd0 <__lshift+0xa4>
 8008bcc:	f108 0602 	add.w	r6, r8, #2
 8008bd0:	3e01      	subs	r6, #1
 8008bd2:	4638      	mov	r0, r7
 8008bd4:	4621      	mov	r1, r4
 8008bd6:	612e      	str	r6, [r5, #16]
 8008bd8:	f7ff fd90 	bl	80086fc <_Bfree>
 8008bdc:	4628      	mov	r0, r5
 8008bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008be2:	f842 0f04 	str.w	r0, [r2, #4]!
 8008be6:	3301      	adds	r3, #1
 8008be8:	e7c5      	b.n	8008b76 <__lshift+0x4a>
 8008bea:	3904      	subs	r1, #4
 8008bec:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bf0:	459c      	cmp	ip, r3
 8008bf2:	f841 2f04 	str.w	r2, [r1, #4]!
 8008bf6:	d8f9      	bhi.n	8008bec <__lshift+0xc0>
 8008bf8:	e7ea      	b.n	8008bd0 <__lshift+0xa4>
 8008bfa:	bf00      	nop
 8008bfc:	0800b6b4 	.word	0x0800b6b4
 8008c00:	0800b744 	.word	0x0800b744

08008c04 <__mcmp>:
 8008c04:	4603      	mov	r3, r0
 8008c06:	690a      	ldr	r2, [r1, #16]
 8008c08:	6900      	ldr	r0, [r0, #16]
 8008c0a:	b530      	push	{r4, r5, lr}
 8008c0c:	1a80      	subs	r0, r0, r2
 8008c0e:	d10d      	bne.n	8008c2c <__mcmp+0x28>
 8008c10:	3314      	adds	r3, #20
 8008c12:	3114      	adds	r1, #20
 8008c14:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008c18:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008c1c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008c20:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008c24:	4295      	cmp	r5, r2
 8008c26:	d002      	beq.n	8008c2e <__mcmp+0x2a>
 8008c28:	d304      	bcc.n	8008c34 <__mcmp+0x30>
 8008c2a:	2001      	movs	r0, #1
 8008c2c:	bd30      	pop	{r4, r5, pc}
 8008c2e:	42a3      	cmp	r3, r4
 8008c30:	d3f4      	bcc.n	8008c1c <__mcmp+0x18>
 8008c32:	e7fb      	b.n	8008c2c <__mcmp+0x28>
 8008c34:	f04f 30ff 	mov.w	r0, #4294967295
 8008c38:	e7f8      	b.n	8008c2c <__mcmp+0x28>
	...

08008c3c <__mdiff>:
 8008c3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c40:	460c      	mov	r4, r1
 8008c42:	4606      	mov	r6, r0
 8008c44:	4611      	mov	r1, r2
 8008c46:	4620      	mov	r0, r4
 8008c48:	4692      	mov	sl, r2
 8008c4a:	f7ff ffdb 	bl	8008c04 <__mcmp>
 8008c4e:	1e05      	subs	r5, r0, #0
 8008c50:	d111      	bne.n	8008c76 <__mdiff+0x3a>
 8008c52:	4629      	mov	r1, r5
 8008c54:	4630      	mov	r0, r6
 8008c56:	f7ff fd11 	bl	800867c <_Balloc>
 8008c5a:	4602      	mov	r2, r0
 8008c5c:	b928      	cbnz	r0, 8008c6a <__mdiff+0x2e>
 8008c5e:	f240 2132 	movw	r1, #562	; 0x232
 8008c62:	4b3c      	ldr	r3, [pc, #240]	; (8008d54 <__mdiff+0x118>)
 8008c64:	483c      	ldr	r0, [pc, #240]	; (8008d58 <__mdiff+0x11c>)
 8008c66:	f000 fc07 	bl	8009478 <__assert_func>
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008c70:	4610      	mov	r0, r2
 8008c72:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c76:	bfa4      	itt	ge
 8008c78:	4653      	movge	r3, sl
 8008c7a:	46a2      	movge	sl, r4
 8008c7c:	4630      	mov	r0, r6
 8008c7e:	f8da 1004 	ldr.w	r1, [sl, #4]
 8008c82:	bfa6      	itte	ge
 8008c84:	461c      	movge	r4, r3
 8008c86:	2500      	movge	r5, #0
 8008c88:	2501      	movlt	r5, #1
 8008c8a:	f7ff fcf7 	bl	800867c <_Balloc>
 8008c8e:	4602      	mov	r2, r0
 8008c90:	b918      	cbnz	r0, 8008c9a <__mdiff+0x5e>
 8008c92:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008c96:	4b2f      	ldr	r3, [pc, #188]	; (8008d54 <__mdiff+0x118>)
 8008c98:	e7e4      	b.n	8008c64 <__mdiff+0x28>
 8008c9a:	f100 0814 	add.w	r8, r0, #20
 8008c9e:	f8da 7010 	ldr.w	r7, [sl, #16]
 8008ca2:	60c5      	str	r5, [r0, #12]
 8008ca4:	f04f 0c00 	mov.w	ip, #0
 8008ca8:	f10a 0514 	add.w	r5, sl, #20
 8008cac:	f10a 0010 	add.w	r0, sl, #16
 8008cb0:	46c2      	mov	sl, r8
 8008cb2:	6926      	ldr	r6, [r4, #16]
 8008cb4:	f104 0914 	add.w	r9, r4, #20
 8008cb8:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8008cbc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008cc0:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8008cc4:	f859 3b04 	ldr.w	r3, [r9], #4
 8008cc8:	fa1f f18b 	uxth.w	r1, fp
 8008ccc:	4461      	add	r1, ip
 8008cce:	fa1f fc83 	uxth.w	ip, r3
 8008cd2:	0c1b      	lsrs	r3, r3, #16
 8008cd4:	eba1 010c 	sub.w	r1, r1, ip
 8008cd8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008cdc:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008ce0:	b289      	uxth	r1, r1
 8008ce2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8008ce6:	454e      	cmp	r6, r9
 8008ce8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008cec:	f84a 3b04 	str.w	r3, [sl], #4
 8008cf0:	d8e6      	bhi.n	8008cc0 <__mdiff+0x84>
 8008cf2:	1b33      	subs	r3, r6, r4
 8008cf4:	3b15      	subs	r3, #21
 8008cf6:	f023 0303 	bic.w	r3, r3, #3
 8008cfa:	3415      	adds	r4, #21
 8008cfc:	3304      	adds	r3, #4
 8008cfe:	42a6      	cmp	r6, r4
 8008d00:	bf38      	it	cc
 8008d02:	2304      	movcc	r3, #4
 8008d04:	441d      	add	r5, r3
 8008d06:	4443      	add	r3, r8
 8008d08:	461e      	mov	r6, r3
 8008d0a:	462c      	mov	r4, r5
 8008d0c:	4574      	cmp	r4, lr
 8008d0e:	d30e      	bcc.n	8008d2e <__mdiff+0xf2>
 8008d10:	f10e 0103 	add.w	r1, lr, #3
 8008d14:	1b49      	subs	r1, r1, r5
 8008d16:	f021 0103 	bic.w	r1, r1, #3
 8008d1a:	3d03      	subs	r5, #3
 8008d1c:	45ae      	cmp	lr, r5
 8008d1e:	bf38      	it	cc
 8008d20:	2100      	movcc	r1, #0
 8008d22:	4419      	add	r1, r3
 8008d24:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008d28:	b18b      	cbz	r3, 8008d4e <__mdiff+0x112>
 8008d2a:	6117      	str	r7, [r2, #16]
 8008d2c:	e7a0      	b.n	8008c70 <__mdiff+0x34>
 8008d2e:	f854 8b04 	ldr.w	r8, [r4], #4
 8008d32:	fa1f f188 	uxth.w	r1, r8
 8008d36:	4461      	add	r1, ip
 8008d38:	1408      	asrs	r0, r1, #16
 8008d3a:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8008d3e:	b289      	uxth	r1, r1
 8008d40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008d44:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008d48:	f846 1b04 	str.w	r1, [r6], #4
 8008d4c:	e7de      	b.n	8008d0c <__mdiff+0xd0>
 8008d4e:	3f01      	subs	r7, #1
 8008d50:	e7e8      	b.n	8008d24 <__mdiff+0xe8>
 8008d52:	bf00      	nop
 8008d54:	0800b6b4 	.word	0x0800b6b4
 8008d58:	0800b744 	.word	0x0800b744

08008d5c <__ulp>:
 8008d5c:	4b11      	ldr	r3, [pc, #68]	; (8008da4 <__ulp+0x48>)
 8008d5e:	400b      	ands	r3, r1
 8008d60:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	dd02      	ble.n	8008d6e <__ulp+0x12>
 8008d68:	2000      	movs	r0, #0
 8008d6a:	4619      	mov	r1, r3
 8008d6c:	4770      	bx	lr
 8008d6e:	425b      	negs	r3, r3
 8008d70:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8008d74:	f04f 0000 	mov.w	r0, #0
 8008d78:	f04f 0100 	mov.w	r1, #0
 8008d7c:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008d80:	da04      	bge.n	8008d8c <__ulp+0x30>
 8008d82:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008d86:	fa43 f102 	asr.w	r1, r3, r2
 8008d8a:	4770      	bx	lr
 8008d8c:	f1a2 0314 	sub.w	r3, r2, #20
 8008d90:	2b1e      	cmp	r3, #30
 8008d92:	bfd6      	itet	le
 8008d94:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8008d98:	2301      	movgt	r3, #1
 8008d9a:	fa22 f303 	lsrle.w	r3, r2, r3
 8008d9e:	4618      	mov	r0, r3
 8008da0:	4770      	bx	lr
 8008da2:	bf00      	nop
 8008da4:	7ff00000 	.word	0x7ff00000

08008da8 <__b2d>:
 8008da8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008dac:	6907      	ldr	r7, [r0, #16]
 8008dae:	f100 0914 	add.w	r9, r0, #20
 8008db2:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8008db6:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8008dba:	f1a7 0804 	sub.w	r8, r7, #4
 8008dbe:	4630      	mov	r0, r6
 8008dc0:	f7ff fd52 	bl	8008868 <__hi0bits>
 8008dc4:	f1c0 0320 	rsb	r3, r0, #32
 8008dc8:	280a      	cmp	r0, #10
 8008dca:	600b      	str	r3, [r1, #0]
 8008dcc:	491f      	ldr	r1, [pc, #124]	; (8008e4c <__b2d+0xa4>)
 8008dce:	dc17      	bgt.n	8008e00 <__b2d+0x58>
 8008dd0:	45c1      	cmp	r9, r8
 8008dd2:	bf28      	it	cs
 8008dd4:	2200      	movcs	r2, #0
 8008dd6:	f1c0 0c0b 	rsb	ip, r0, #11
 8008dda:	fa26 f30c 	lsr.w	r3, r6, ip
 8008dde:	bf38      	it	cc
 8008de0:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8008de4:	ea43 0501 	orr.w	r5, r3, r1
 8008de8:	f100 0315 	add.w	r3, r0, #21
 8008dec:	fa06 f303 	lsl.w	r3, r6, r3
 8008df0:	fa22 f20c 	lsr.w	r2, r2, ip
 8008df4:	ea43 0402 	orr.w	r4, r3, r2
 8008df8:	4620      	mov	r0, r4
 8008dfa:	4629      	mov	r1, r5
 8008dfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e00:	45c1      	cmp	r9, r8
 8008e02:	bf2e      	itee	cs
 8008e04:	2200      	movcs	r2, #0
 8008e06:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8008e0a:	f1a7 0808 	subcc.w	r8, r7, #8
 8008e0e:	f1b0 030b 	subs.w	r3, r0, #11
 8008e12:	d016      	beq.n	8008e42 <__b2d+0x9a>
 8008e14:	f1c3 0720 	rsb	r7, r3, #32
 8008e18:	fa22 f107 	lsr.w	r1, r2, r7
 8008e1c:	45c8      	cmp	r8, r9
 8008e1e:	fa06 f603 	lsl.w	r6, r6, r3
 8008e22:	ea46 0601 	orr.w	r6, r6, r1
 8008e26:	bf94      	ite	ls
 8008e28:	2100      	movls	r1, #0
 8008e2a:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8008e2e:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8008e32:	fa02 f003 	lsl.w	r0, r2, r3
 8008e36:	40f9      	lsrs	r1, r7
 8008e38:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008e3c:	ea40 0401 	orr.w	r4, r0, r1
 8008e40:	e7da      	b.n	8008df8 <__b2d+0x50>
 8008e42:	4614      	mov	r4, r2
 8008e44:	ea46 0501 	orr.w	r5, r6, r1
 8008e48:	e7d6      	b.n	8008df8 <__b2d+0x50>
 8008e4a:	bf00      	nop
 8008e4c:	3ff00000 	.word	0x3ff00000

08008e50 <__d2b>:
 8008e50:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008e54:	2101      	movs	r1, #1
 8008e56:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8008e5a:	4690      	mov	r8, r2
 8008e5c:	461d      	mov	r5, r3
 8008e5e:	f7ff fc0d 	bl	800867c <_Balloc>
 8008e62:	4604      	mov	r4, r0
 8008e64:	b930      	cbnz	r0, 8008e74 <__d2b+0x24>
 8008e66:	4602      	mov	r2, r0
 8008e68:	f240 310a 	movw	r1, #778	; 0x30a
 8008e6c:	4b24      	ldr	r3, [pc, #144]	; (8008f00 <__d2b+0xb0>)
 8008e6e:	4825      	ldr	r0, [pc, #148]	; (8008f04 <__d2b+0xb4>)
 8008e70:	f000 fb02 	bl	8009478 <__assert_func>
 8008e74:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8008e78:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8008e7c:	bb2d      	cbnz	r5, 8008eca <__d2b+0x7a>
 8008e7e:	9301      	str	r3, [sp, #4]
 8008e80:	f1b8 0300 	subs.w	r3, r8, #0
 8008e84:	d026      	beq.n	8008ed4 <__d2b+0x84>
 8008e86:	4668      	mov	r0, sp
 8008e88:	9300      	str	r3, [sp, #0]
 8008e8a:	f7ff fd0d 	bl	80088a8 <__lo0bits>
 8008e8e:	9900      	ldr	r1, [sp, #0]
 8008e90:	b1f0      	cbz	r0, 8008ed0 <__d2b+0x80>
 8008e92:	9a01      	ldr	r2, [sp, #4]
 8008e94:	f1c0 0320 	rsb	r3, r0, #32
 8008e98:	fa02 f303 	lsl.w	r3, r2, r3
 8008e9c:	430b      	orrs	r3, r1
 8008e9e:	40c2      	lsrs	r2, r0
 8008ea0:	6163      	str	r3, [r4, #20]
 8008ea2:	9201      	str	r2, [sp, #4]
 8008ea4:	9b01      	ldr	r3, [sp, #4]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	bf14      	ite	ne
 8008eaa:	2102      	movne	r1, #2
 8008eac:	2101      	moveq	r1, #1
 8008eae:	61a3      	str	r3, [r4, #24]
 8008eb0:	6121      	str	r1, [r4, #16]
 8008eb2:	b1c5      	cbz	r5, 8008ee6 <__d2b+0x96>
 8008eb4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008eb8:	4405      	add	r5, r0
 8008eba:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008ebe:	603d      	str	r5, [r7, #0]
 8008ec0:	6030      	str	r0, [r6, #0]
 8008ec2:	4620      	mov	r0, r4
 8008ec4:	b002      	add	sp, #8
 8008ec6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008eca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008ece:	e7d6      	b.n	8008e7e <__d2b+0x2e>
 8008ed0:	6161      	str	r1, [r4, #20]
 8008ed2:	e7e7      	b.n	8008ea4 <__d2b+0x54>
 8008ed4:	a801      	add	r0, sp, #4
 8008ed6:	f7ff fce7 	bl	80088a8 <__lo0bits>
 8008eda:	2101      	movs	r1, #1
 8008edc:	9b01      	ldr	r3, [sp, #4]
 8008ede:	6121      	str	r1, [r4, #16]
 8008ee0:	6163      	str	r3, [r4, #20]
 8008ee2:	3020      	adds	r0, #32
 8008ee4:	e7e5      	b.n	8008eb2 <__d2b+0x62>
 8008ee6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8008eea:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008eee:	6038      	str	r0, [r7, #0]
 8008ef0:	6918      	ldr	r0, [r3, #16]
 8008ef2:	f7ff fcb9 	bl	8008868 <__hi0bits>
 8008ef6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8008efa:	6031      	str	r1, [r6, #0]
 8008efc:	e7e1      	b.n	8008ec2 <__d2b+0x72>
 8008efe:	bf00      	nop
 8008f00:	0800b6b4 	.word	0x0800b6b4
 8008f04:	0800b744 	.word	0x0800b744

08008f08 <__ratio>:
 8008f08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f0c:	4688      	mov	r8, r1
 8008f0e:	4669      	mov	r1, sp
 8008f10:	4681      	mov	r9, r0
 8008f12:	f7ff ff49 	bl	8008da8 <__b2d>
 8008f16:	460f      	mov	r7, r1
 8008f18:	4604      	mov	r4, r0
 8008f1a:	460d      	mov	r5, r1
 8008f1c:	4640      	mov	r0, r8
 8008f1e:	a901      	add	r1, sp, #4
 8008f20:	f7ff ff42 	bl	8008da8 <__b2d>
 8008f24:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008f28:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008f2c:	468b      	mov	fp, r1
 8008f2e:	eba3 0c02 	sub.w	ip, r3, r2
 8008f32:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008f36:	1a9b      	subs	r3, r3, r2
 8008f38:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	bfd5      	itete	le
 8008f40:	460a      	movle	r2, r1
 8008f42:	462a      	movgt	r2, r5
 8008f44:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008f48:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008f4c:	bfd8      	it	le
 8008f4e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008f52:	465b      	mov	r3, fp
 8008f54:	4602      	mov	r2, r0
 8008f56:	4639      	mov	r1, r7
 8008f58:	4620      	mov	r0, r4
 8008f5a:	f7f7 fc53 	bl	8000804 <__aeabi_ddiv>
 8008f5e:	b003      	add	sp, #12
 8008f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008f64 <__copybits>:
 8008f64:	3901      	subs	r1, #1
 8008f66:	b570      	push	{r4, r5, r6, lr}
 8008f68:	1149      	asrs	r1, r1, #5
 8008f6a:	6914      	ldr	r4, [r2, #16]
 8008f6c:	3101      	adds	r1, #1
 8008f6e:	f102 0314 	add.w	r3, r2, #20
 8008f72:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008f76:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008f7a:	1f05      	subs	r5, r0, #4
 8008f7c:	42a3      	cmp	r3, r4
 8008f7e:	d30c      	bcc.n	8008f9a <__copybits+0x36>
 8008f80:	1aa3      	subs	r3, r4, r2
 8008f82:	3b11      	subs	r3, #17
 8008f84:	f023 0303 	bic.w	r3, r3, #3
 8008f88:	3211      	adds	r2, #17
 8008f8a:	42a2      	cmp	r2, r4
 8008f8c:	bf88      	it	hi
 8008f8e:	2300      	movhi	r3, #0
 8008f90:	4418      	add	r0, r3
 8008f92:	2300      	movs	r3, #0
 8008f94:	4288      	cmp	r0, r1
 8008f96:	d305      	bcc.n	8008fa4 <__copybits+0x40>
 8008f98:	bd70      	pop	{r4, r5, r6, pc}
 8008f9a:	f853 6b04 	ldr.w	r6, [r3], #4
 8008f9e:	f845 6f04 	str.w	r6, [r5, #4]!
 8008fa2:	e7eb      	b.n	8008f7c <__copybits+0x18>
 8008fa4:	f840 3b04 	str.w	r3, [r0], #4
 8008fa8:	e7f4      	b.n	8008f94 <__copybits+0x30>

08008faa <__any_on>:
 8008faa:	f100 0214 	add.w	r2, r0, #20
 8008fae:	6900      	ldr	r0, [r0, #16]
 8008fb0:	114b      	asrs	r3, r1, #5
 8008fb2:	4298      	cmp	r0, r3
 8008fb4:	b510      	push	{r4, lr}
 8008fb6:	db11      	blt.n	8008fdc <__any_on+0x32>
 8008fb8:	dd0a      	ble.n	8008fd0 <__any_on+0x26>
 8008fba:	f011 011f 	ands.w	r1, r1, #31
 8008fbe:	d007      	beq.n	8008fd0 <__any_on+0x26>
 8008fc0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008fc4:	fa24 f001 	lsr.w	r0, r4, r1
 8008fc8:	fa00 f101 	lsl.w	r1, r0, r1
 8008fcc:	428c      	cmp	r4, r1
 8008fce:	d10b      	bne.n	8008fe8 <__any_on+0x3e>
 8008fd0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d803      	bhi.n	8008fe0 <__any_on+0x36>
 8008fd8:	2000      	movs	r0, #0
 8008fda:	bd10      	pop	{r4, pc}
 8008fdc:	4603      	mov	r3, r0
 8008fde:	e7f7      	b.n	8008fd0 <__any_on+0x26>
 8008fe0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008fe4:	2900      	cmp	r1, #0
 8008fe6:	d0f5      	beq.n	8008fd4 <__any_on+0x2a>
 8008fe8:	2001      	movs	r0, #1
 8008fea:	e7f6      	b.n	8008fda <__any_on+0x30>

08008fec <_calloc_r>:
 8008fec:	b538      	push	{r3, r4, r5, lr}
 8008fee:	fb02 f501 	mul.w	r5, r2, r1
 8008ff2:	4629      	mov	r1, r5
 8008ff4:	f000 f854 	bl	80090a0 <_malloc_r>
 8008ff8:	4604      	mov	r4, r0
 8008ffa:	b118      	cbz	r0, 8009004 <_calloc_r+0x18>
 8008ffc:	462a      	mov	r2, r5
 8008ffe:	2100      	movs	r1, #0
 8009000:	f7fc fbba 	bl	8005778 <memset>
 8009004:	4620      	mov	r0, r4
 8009006:	bd38      	pop	{r3, r4, r5, pc}

08009008 <_free_r>:
 8009008:	b538      	push	{r3, r4, r5, lr}
 800900a:	4605      	mov	r5, r0
 800900c:	2900      	cmp	r1, #0
 800900e:	d043      	beq.n	8009098 <_free_r+0x90>
 8009010:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009014:	1f0c      	subs	r4, r1, #4
 8009016:	2b00      	cmp	r3, #0
 8009018:	bfb8      	it	lt
 800901a:	18e4      	addlt	r4, r4, r3
 800901c:	f000 fa76 	bl	800950c <__malloc_lock>
 8009020:	4a1e      	ldr	r2, [pc, #120]	; (800909c <_free_r+0x94>)
 8009022:	6813      	ldr	r3, [r2, #0]
 8009024:	4610      	mov	r0, r2
 8009026:	b933      	cbnz	r3, 8009036 <_free_r+0x2e>
 8009028:	6063      	str	r3, [r4, #4]
 800902a:	6014      	str	r4, [r2, #0]
 800902c:	4628      	mov	r0, r5
 800902e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009032:	f000 ba71 	b.w	8009518 <__malloc_unlock>
 8009036:	42a3      	cmp	r3, r4
 8009038:	d90a      	bls.n	8009050 <_free_r+0x48>
 800903a:	6821      	ldr	r1, [r4, #0]
 800903c:	1862      	adds	r2, r4, r1
 800903e:	4293      	cmp	r3, r2
 8009040:	bf01      	itttt	eq
 8009042:	681a      	ldreq	r2, [r3, #0]
 8009044:	685b      	ldreq	r3, [r3, #4]
 8009046:	1852      	addeq	r2, r2, r1
 8009048:	6022      	streq	r2, [r4, #0]
 800904a:	6063      	str	r3, [r4, #4]
 800904c:	6004      	str	r4, [r0, #0]
 800904e:	e7ed      	b.n	800902c <_free_r+0x24>
 8009050:	461a      	mov	r2, r3
 8009052:	685b      	ldr	r3, [r3, #4]
 8009054:	b10b      	cbz	r3, 800905a <_free_r+0x52>
 8009056:	42a3      	cmp	r3, r4
 8009058:	d9fa      	bls.n	8009050 <_free_r+0x48>
 800905a:	6811      	ldr	r1, [r2, #0]
 800905c:	1850      	adds	r0, r2, r1
 800905e:	42a0      	cmp	r0, r4
 8009060:	d10b      	bne.n	800907a <_free_r+0x72>
 8009062:	6820      	ldr	r0, [r4, #0]
 8009064:	4401      	add	r1, r0
 8009066:	1850      	adds	r0, r2, r1
 8009068:	4283      	cmp	r3, r0
 800906a:	6011      	str	r1, [r2, #0]
 800906c:	d1de      	bne.n	800902c <_free_r+0x24>
 800906e:	6818      	ldr	r0, [r3, #0]
 8009070:	685b      	ldr	r3, [r3, #4]
 8009072:	4401      	add	r1, r0
 8009074:	6011      	str	r1, [r2, #0]
 8009076:	6053      	str	r3, [r2, #4]
 8009078:	e7d8      	b.n	800902c <_free_r+0x24>
 800907a:	d902      	bls.n	8009082 <_free_r+0x7a>
 800907c:	230c      	movs	r3, #12
 800907e:	602b      	str	r3, [r5, #0]
 8009080:	e7d4      	b.n	800902c <_free_r+0x24>
 8009082:	6820      	ldr	r0, [r4, #0]
 8009084:	1821      	adds	r1, r4, r0
 8009086:	428b      	cmp	r3, r1
 8009088:	bf01      	itttt	eq
 800908a:	6819      	ldreq	r1, [r3, #0]
 800908c:	685b      	ldreq	r3, [r3, #4]
 800908e:	1809      	addeq	r1, r1, r0
 8009090:	6021      	streq	r1, [r4, #0]
 8009092:	6063      	str	r3, [r4, #4]
 8009094:	6054      	str	r4, [r2, #4]
 8009096:	e7c9      	b.n	800902c <_free_r+0x24>
 8009098:	bd38      	pop	{r3, r4, r5, pc}
 800909a:	bf00      	nop
 800909c:	20000318 	.word	0x20000318

080090a0 <_malloc_r>:
 80090a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090a2:	1ccd      	adds	r5, r1, #3
 80090a4:	f025 0503 	bic.w	r5, r5, #3
 80090a8:	3508      	adds	r5, #8
 80090aa:	2d0c      	cmp	r5, #12
 80090ac:	bf38      	it	cc
 80090ae:	250c      	movcc	r5, #12
 80090b0:	2d00      	cmp	r5, #0
 80090b2:	4606      	mov	r6, r0
 80090b4:	db01      	blt.n	80090ba <_malloc_r+0x1a>
 80090b6:	42a9      	cmp	r1, r5
 80090b8:	d903      	bls.n	80090c2 <_malloc_r+0x22>
 80090ba:	230c      	movs	r3, #12
 80090bc:	6033      	str	r3, [r6, #0]
 80090be:	2000      	movs	r0, #0
 80090c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090c2:	f000 fa23 	bl	800950c <__malloc_lock>
 80090c6:	4921      	ldr	r1, [pc, #132]	; (800914c <_malloc_r+0xac>)
 80090c8:	680a      	ldr	r2, [r1, #0]
 80090ca:	4614      	mov	r4, r2
 80090cc:	b99c      	cbnz	r4, 80090f6 <_malloc_r+0x56>
 80090ce:	4f20      	ldr	r7, [pc, #128]	; (8009150 <_malloc_r+0xb0>)
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	b923      	cbnz	r3, 80090de <_malloc_r+0x3e>
 80090d4:	4621      	mov	r1, r4
 80090d6:	4630      	mov	r0, r6
 80090d8:	f000 f99e 	bl	8009418 <_sbrk_r>
 80090dc:	6038      	str	r0, [r7, #0]
 80090de:	4629      	mov	r1, r5
 80090e0:	4630      	mov	r0, r6
 80090e2:	f000 f999 	bl	8009418 <_sbrk_r>
 80090e6:	1c43      	adds	r3, r0, #1
 80090e8:	d123      	bne.n	8009132 <_malloc_r+0x92>
 80090ea:	230c      	movs	r3, #12
 80090ec:	4630      	mov	r0, r6
 80090ee:	6033      	str	r3, [r6, #0]
 80090f0:	f000 fa12 	bl	8009518 <__malloc_unlock>
 80090f4:	e7e3      	b.n	80090be <_malloc_r+0x1e>
 80090f6:	6823      	ldr	r3, [r4, #0]
 80090f8:	1b5b      	subs	r3, r3, r5
 80090fa:	d417      	bmi.n	800912c <_malloc_r+0x8c>
 80090fc:	2b0b      	cmp	r3, #11
 80090fe:	d903      	bls.n	8009108 <_malloc_r+0x68>
 8009100:	6023      	str	r3, [r4, #0]
 8009102:	441c      	add	r4, r3
 8009104:	6025      	str	r5, [r4, #0]
 8009106:	e004      	b.n	8009112 <_malloc_r+0x72>
 8009108:	6863      	ldr	r3, [r4, #4]
 800910a:	42a2      	cmp	r2, r4
 800910c:	bf0c      	ite	eq
 800910e:	600b      	streq	r3, [r1, #0]
 8009110:	6053      	strne	r3, [r2, #4]
 8009112:	4630      	mov	r0, r6
 8009114:	f000 fa00 	bl	8009518 <__malloc_unlock>
 8009118:	f104 000b 	add.w	r0, r4, #11
 800911c:	1d23      	adds	r3, r4, #4
 800911e:	f020 0007 	bic.w	r0, r0, #7
 8009122:	1ac2      	subs	r2, r0, r3
 8009124:	d0cc      	beq.n	80090c0 <_malloc_r+0x20>
 8009126:	1a1b      	subs	r3, r3, r0
 8009128:	50a3      	str	r3, [r4, r2]
 800912a:	e7c9      	b.n	80090c0 <_malloc_r+0x20>
 800912c:	4622      	mov	r2, r4
 800912e:	6864      	ldr	r4, [r4, #4]
 8009130:	e7cc      	b.n	80090cc <_malloc_r+0x2c>
 8009132:	1cc4      	adds	r4, r0, #3
 8009134:	f024 0403 	bic.w	r4, r4, #3
 8009138:	42a0      	cmp	r0, r4
 800913a:	d0e3      	beq.n	8009104 <_malloc_r+0x64>
 800913c:	1a21      	subs	r1, r4, r0
 800913e:	4630      	mov	r0, r6
 8009140:	f000 f96a 	bl	8009418 <_sbrk_r>
 8009144:	3001      	adds	r0, #1
 8009146:	d1dd      	bne.n	8009104 <_malloc_r+0x64>
 8009148:	e7cf      	b.n	80090ea <_malloc_r+0x4a>
 800914a:	bf00      	nop
 800914c:	20000318 	.word	0x20000318
 8009150:	2000031c 	.word	0x2000031c

08009154 <__ssputs_r>:
 8009154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009158:	688e      	ldr	r6, [r1, #8]
 800915a:	4682      	mov	sl, r0
 800915c:	429e      	cmp	r6, r3
 800915e:	460c      	mov	r4, r1
 8009160:	4690      	mov	r8, r2
 8009162:	461f      	mov	r7, r3
 8009164:	d838      	bhi.n	80091d8 <__ssputs_r+0x84>
 8009166:	898a      	ldrh	r2, [r1, #12]
 8009168:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800916c:	d032      	beq.n	80091d4 <__ssputs_r+0x80>
 800916e:	6825      	ldr	r5, [r4, #0]
 8009170:	6909      	ldr	r1, [r1, #16]
 8009172:	3301      	adds	r3, #1
 8009174:	eba5 0901 	sub.w	r9, r5, r1
 8009178:	6965      	ldr	r5, [r4, #20]
 800917a:	444b      	add	r3, r9
 800917c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009180:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009184:	106d      	asrs	r5, r5, #1
 8009186:	429d      	cmp	r5, r3
 8009188:	bf38      	it	cc
 800918a:	461d      	movcc	r5, r3
 800918c:	0553      	lsls	r3, r2, #21
 800918e:	d531      	bpl.n	80091f4 <__ssputs_r+0xa0>
 8009190:	4629      	mov	r1, r5
 8009192:	f7ff ff85 	bl	80090a0 <_malloc_r>
 8009196:	4606      	mov	r6, r0
 8009198:	b950      	cbnz	r0, 80091b0 <__ssputs_r+0x5c>
 800919a:	230c      	movs	r3, #12
 800919c:	f04f 30ff 	mov.w	r0, #4294967295
 80091a0:	f8ca 3000 	str.w	r3, [sl]
 80091a4:	89a3      	ldrh	r3, [r4, #12]
 80091a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091aa:	81a3      	strh	r3, [r4, #12]
 80091ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091b0:	464a      	mov	r2, r9
 80091b2:	6921      	ldr	r1, [r4, #16]
 80091b4:	f7ff fa54 	bl	8008660 <memcpy>
 80091b8:	89a3      	ldrh	r3, [r4, #12]
 80091ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80091be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091c2:	81a3      	strh	r3, [r4, #12]
 80091c4:	6126      	str	r6, [r4, #16]
 80091c6:	444e      	add	r6, r9
 80091c8:	6026      	str	r6, [r4, #0]
 80091ca:	463e      	mov	r6, r7
 80091cc:	6165      	str	r5, [r4, #20]
 80091ce:	eba5 0509 	sub.w	r5, r5, r9
 80091d2:	60a5      	str	r5, [r4, #8]
 80091d4:	42be      	cmp	r6, r7
 80091d6:	d900      	bls.n	80091da <__ssputs_r+0x86>
 80091d8:	463e      	mov	r6, r7
 80091da:	4632      	mov	r2, r6
 80091dc:	4641      	mov	r1, r8
 80091de:	6820      	ldr	r0, [r4, #0]
 80091e0:	f000 f97a 	bl	80094d8 <memmove>
 80091e4:	68a3      	ldr	r3, [r4, #8]
 80091e6:	6822      	ldr	r2, [r4, #0]
 80091e8:	1b9b      	subs	r3, r3, r6
 80091ea:	4432      	add	r2, r6
 80091ec:	2000      	movs	r0, #0
 80091ee:	60a3      	str	r3, [r4, #8]
 80091f0:	6022      	str	r2, [r4, #0]
 80091f2:	e7db      	b.n	80091ac <__ssputs_r+0x58>
 80091f4:	462a      	mov	r2, r5
 80091f6:	f000 f995 	bl	8009524 <_realloc_r>
 80091fa:	4606      	mov	r6, r0
 80091fc:	2800      	cmp	r0, #0
 80091fe:	d1e1      	bne.n	80091c4 <__ssputs_r+0x70>
 8009200:	4650      	mov	r0, sl
 8009202:	6921      	ldr	r1, [r4, #16]
 8009204:	f7ff ff00 	bl	8009008 <_free_r>
 8009208:	e7c7      	b.n	800919a <__ssputs_r+0x46>
	...

0800920c <_svfiprintf_r>:
 800920c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009210:	4698      	mov	r8, r3
 8009212:	898b      	ldrh	r3, [r1, #12]
 8009214:	4607      	mov	r7, r0
 8009216:	061b      	lsls	r3, r3, #24
 8009218:	460d      	mov	r5, r1
 800921a:	4614      	mov	r4, r2
 800921c:	b09d      	sub	sp, #116	; 0x74
 800921e:	d50e      	bpl.n	800923e <_svfiprintf_r+0x32>
 8009220:	690b      	ldr	r3, [r1, #16]
 8009222:	b963      	cbnz	r3, 800923e <_svfiprintf_r+0x32>
 8009224:	2140      	movs	r1, #64	; 0x40
 8009226:	f7ff ff3b 	bl	80090a0 <_malloc_r>
 800922a:	6028      	str	r0, [r5, #0]
 800922c:	6128      	str	r0, [r5, #16]
 800922e:	b920      	cbnz	r0, 800923a <_svfiprintf_r+0x2e>
 8009230:	230c      	movs	r3, #12
 8009232:	603b      	str	r3, [r7, #0]
 8009234:	f04f 30ff 	mov.w	r0, #4294967295
 8009238:	e0d1      	b.n	80093de <_svfiprintf_r+0x1d2>
 800923a:	2340      	movs	r3, #64	; 0x40
 800923c:	616b      	str	r3, [r5, #20]
 800923e:	2300      	movs	r3, #0
 8009240:	9309      	str	r3, [sp, #36]	; 0x24
 8009242:	2320      	movs	r3, #32
 8009244:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009248:	2330      	movs	r3, #48	; 0x30
 800924a:	f04f 0901 	mov.w	r9, #1
 800924e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009252:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80093f8 <_svfiprintf_r+0x1ec>
 8009256:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800925a:	4623      	mov	r3, r4
 800925c:	469a      	mov	sl, r3
 800925e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009262:	b10a      	cbz	r2, 8009268 <_svfiprintf_r+0x5c>
 8009264:	2a25      	cmp	r2, #37	; 0x25
 8009266:	d1f9      	bne.n	800925c <_svfiprintf_r+0x50>
 8009268:	ebba 0b04 	subs.w	fp, sl, r4
 800926c:	d00b      	beq.n	8009286 <_svfiprintf_r+0x7a>
 800926e:	465b      	mov	r3, fp
 8009270:	4622      	mov	r2, r4
 8009272:	4629      	mov	r1, r5
 8009274:	4638      	mov	r0, r7
 8009276:	f7ff ff6d 	bl	8009154 <__ssputs_r>
 800927a:	3001      	adds	r0, #1
 800927c:	f000 80aa 	beq.w	80093d4 <_svfiprintf_r+0x1c8>
 8009280:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009282:	445a      	add	r2, fp
 8009284:	9209      	str	r2, [sp, #36]	; 0x24
 8009286:	f89a 3000 	ldrb.w	r3, [sl]
 800928a:	2b00      	cmp	r3, #0
 800928c:	f000 80a2 	beq.w	80093d4 <_svfiprintf_r+0x1c8>
 8009290:	2300      	movs	r3, #0
 8009292:	f04f 32ff 	mov.w	r2, #4294967295
 8009296:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800929a:	f10a 0a01 	add.w	sl, sl, #1
 800929e:	9304      	str	r3, [sp, #16]
 80092a0:	9307      	str	r3, [sp, #28]
 80092a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80092a6:	931a      	str	r3, [sp, #104]	; 0x68
 80092a8:	4654      	mov	r4, sl
 80092aa:	2205      	movs	r2, #5
 80092ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092b0:	4851      	ldr	r0, [pc, #324]	; (80093f8 <_svfiprintf_r+0x1ec>)
 80092b2:	f7ff f9c7 	bl	8008644 <memchr>
 80092b6:	9a04      	ldr	r2, [sp, #16]
 80092b8:	b9d8      	cbnz	r0, 80092f2 <_svfiprintf_r+0xe6>
 80092ba:	06d0      	lsls	r0, r2, #27
 80092bc:	bf44      	itt	mi
 80092be:	2320      	movmi	r3, #32
 80092c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092c4:	0711      	lsls	r1, r2, #28
 80092c6:	bf44      	itt	mi
 80092c8:	232b      	movmi	r3, #43	; 0x2b
 80092ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092ce:	f89a 3000 	ldrb.w	r3, [sl]
 80092d2:	2b2a      	cmp	r3, #42	; 0x2a
 80092d4:	d015      	beq.n	8009302 <_svfiprintf_r+0xf6>
 80092d6:	4654      	mov	r4, sl
 80092d8:	2000      	movs	r0, #0
 80092da:	f04f 0c0a 	mov.w	ip, #10
 80092de:	9a07      	ldr	r2, [sp, #28]
 80092e0:	4621      	mov	r1, r4
 80092e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80092e6:	3b30      	subs	r3, #48	; 0x30
 80092e8:	2b09      	cmp	r3, #9
 80092ea:	d94e      	bls.n	800938a <_svfiprintf_r+0x17e>
 80092ec:	b1b0      	cbz	r0, 800931c <_svfiprintf_r+0x110>
 80092ee:	9207      	str	r2, [sp, #28]
 80092f0:	e014      	b.n	800931c <_svfiprintf_r+0x110>
 80092f2:	eba0 0308 	sub.w	r3, r0, r8
 80092f6:	fa09 f303 	lsl.w	r3, r9, r3
 80092fa:	4313      	orrs	r3, r2
 80092fc:	46a2      	mov	sl, r4
 80092fe:	9304      	str	r3, [sp, #16]
 8009300:	e7d2      	b.n	80092a8 <_svfiprintf_r+0x9c>
 8009302:	9b03      	ldr	r3, [sp, #12]
 8009304:	1d19      	adds	r1, r3, #4
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	9103      	str	r1, [sp, #12]
 800930a:	2b00      	cmp	r3, #0
 800930c:	bfbb      	ittet	lt
 800930e:	425b      	neglt	r3, r3
 8009310:	f042 0202 	orrlt.w	r2, r2, #2
 8009314:	9307      	strge	r3, [sp, #28]
 8009316:	9307      	strlt	r3, [sp, #28]
 8009318:	bfb8      	it	lt
 800931a:	9204      	strlt	r2, [sp, #16]
 800931c:	7823      	ldrb	r3, [r4, #0]
 800931e:	2b2e      	cmp	r3, #46	; 0x2e
 8009320:	d10c      	bne.n	800933c <_svfiprintf_r+0x130>
 8009322:	7863      	ldrb	r3, [r4, #1]
 8009324:	2b2a      	cmp	r3, #42	; 0x2a
 8009326:	d135      	bne.n	8009394 <_svfiprintf_r+0x188>
 8009328:	9b03      	ldr	r3, [sp, #12]
 800932a:	3402      	adds	r4, #2
 800932c:	1d1a      	adds	r2, r3, #4
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	9203      	str	r2, [sp, #12]
 8009332:	2b00      	cmp	r3, #0
 8009334:	bfb8      	it	lt
 8009336:	f04f 33ff 	movlt.w	r3, #4294967295
 800933a:	9305      	str	r3, [sp, #20]
 800933c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009408 <_svfiprintf_r+0x1fc>
 8009340:	2203      	movs	r2, #3
 8009342:	4650      	mov	r0, sl
 8009344:	7821      	ldrb	r1, [r4, #0]
 8009346:	f7ff f97d 	bl	8008644 <memchr>
 800934a:	b140      	cbz	r0, 800935e <_svfiprintf_r+0x152>
 800934c:	2340      	movs	r3, #64	; 0x40
 800934e:	eba0 000a 	sub.w	r0, r0, sl
 8009352:	fa03 f000 	lsl.w	r0, r3, r0
 8009356:	9b04      	ldr	r3, [sp, #16]
 8009358:	3401      	adds	r4, #1
 800935a:	4303      	orrs	r3, r0
 800935c:	9304      	str	r3, [sp, #16]
 800935e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009362:	2206      	movs	r2, #6
 8009364:	4825      	ldr	r0, [pc, #148]	; (80093fc <_svfiprintf_r+0x1f0>)
 8009366:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800936a:	f7ff f96b 	bl	8008644 <memchr>
 800936e:	2800      	cmp	r0, #0
 8009370:	d038      	beq.n	80093e4 <_svfiprintf_r+0x1d8>
 8009372:	4b23      	ldr	r3, [pc, #140]	; (8009400 <_svfiprintf_r+0x1f4>)
 8009374:	bb1b      	cbnz	r3, 80093be <_svfiprintf_r+0x1b2>
 8009376:	9b03      	ldr	r3, [sp, #12]
 8009378:	3307      	adds	r3, #7
 800937a:	f023 0307 	bic.w	r3, r3, #7
 800937e:	3308      	adds	r3, #8
 8009380:	9303      	str	r3, [sp, #12]
 8009382:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009384:	4433      	add	r3, r6
 8009386:	9309      	str	r3, [sp, #36]	; 0x24
 8009388:	e767      	b.n	800925a <_svfiprintf_r+0x4e>
 800938a:	460c      	mov	r4, r1
 800938c:	2001      	movs	r0, #1
 800938e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009392:	e7a5      	b.n	80092e0 <_svfiprintf_r+0xd4>
 8009394:	2300      	movs	r3, #0
 8009396:	f04f 0c0a 	mov.w	ip, #10
 800939a:	4619      	mov	r1, r3
 800939c:	3401      	adds	r4, #1
 800939e:	9305      	str	r3, [sp, #20]
 80093a0:	4620      	mov	r0, r4
 80093a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80093a6:	3a30      	subs	r2, #48	; 0x30
 80093a8:	2a09      	cmp	r2, #9
 80093aa:	d903      	bls.n	80093b4 <_svfiprintf_r+0x1a8>
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d0c5      	beq.n	800933c <_svfiprintf_r+0x130>
 80093b0:	9105      	str	r1, [sp, #20]
 80093b2:	e7c3      	b.n	800933c <_svfiprintf_r+0x130>
 80093b4:	4604      	mov	r4, r0
 80093b6:	2301      	movs	r3, #1
 80093b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80093bc:	e7f0      	b.n	80093a0 <_svfiprintf_r+0x194>
 80093be:	ab03      	add	r3, sp, #12
 80093c0:	9300      	str	r3, [sp, #0]
 80093c2:	462a      	mov	r2, r5
 80093c4:	4638      	mov	r0, r7
 80093c6:	4b0f      	ldr	r3, [pc, #60]	; (8009404 <_svfiprintf_r+0x1f8>)
 80093c8:	a904      	add	r1, sp, #16
 80093ca:	f7fc fa7b 	bl	80058c4 <_printf_float>
 80093ce:	1c42      	adds	r2, r0, #1
 80093d0:	4606      	mov	r6, r0
 80093d2:	d1d6      	bne.n	8009382 <_svfiprintf_r+0x176>
 80093d4:	89ab      	ldrh	r3, [r5, #12]
 80093d6:	065b      	lsls	r3, r3, #25
 80093d8:	f53f af2c 	bmi.w	8009234 <_svfiprintf_r+0x28>
 80093dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80093de:	b01d      	add	sp, #116	; 0x74
 80093e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093e4:	ab03      	add	r3, sp, #12
 80093e6:	9300      	str	r3, [sp, #0]
 80093e8:	462a      	mov	r2, r5
 80093ea:	4638      	mov	r0, r7
 80093ec:	4b05      	ldr	r3, [pc, #20]	; (8009404 <_svfiprintf_r+0x1f8>)
 80093ee:	a904      	add	r1, sp, #16
 80093f0:	f7fc fd04 	bl	8005dfc <_printf_i>
 80093f4:	e7eb      	b.n	80093ce <_svfiprintf_r+0x1c2>
 80093f6:	bf00      	nop
 80093f8:	0800b8a4 	.word	0x0800b8a4
 80093fc:	0800b8ae 	.word	0x0800b8ae
 8009400:	080058c5 	.word	0x080058c5
 8009404:	08009155 	.word	0x08009155
 8009408:	0800b8aa 	.word	0x0800b8aa

0800940c <nan>:
 800940c:	2000      	movs	r0, #0
 800940e:	4901      	ldr	r1, [pc, #4]	; (8009414 <nan+0x8>)
 8009410:	4770      	bx	lr
 8009412:	bf00      	nop
 8009414:	7ff80000 	.word	0x7ff80000

08009418 <_sbrk_r>:
 8009418:	b538      	push	{r3, r4, r5, lr}
 800941a:	2300      	movs	r3, #0
 800941c:	4d05      	ldr	r5, [pc, #20]	; (8009434 <_sbrk_r+0x1c>)
 800941e:	4604      	mov	r4, r0
 8009420:	4608      	mov	r0, r1
 8009422:	602b      	str	r3, [r5, #0]
 8009424:	f7f9 fffe 	bl	8003424 <_sbrk>
 8009428:	1c43      	adds	r3, r0, #1
 800942a:	d102      	bne.n	8009432 <_sbrk_r+0x1a>
 800942c:	682b      	ldr	r3, [r5, #0]
 800942e:	b103      	cbz	r3, 8009432 <_sbrk_r+0x1a>
 8009430:	6023      	str	r3, [r4, #0]
 8009432:	bd38      	pop	{r3, r4, r5, pc}
 8009434:	20000924 	.word	0x20000924

08009438 <strncmp>:
 8009438:	b510      	push	{r4, lr}
 800943a:	b16a      	cbz	r2, 8009458 <strncmp+0x20>
 800943c:	3901      	subs	r1, #1
 800943e:	1884      	adds	r4, r0, r2
 8009440:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009444:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009448:	4293      	cmp	r3, r2
 800944a:	d103      	bne.n	8009454 <strncmp+0x1c>
 800944c:	42a0      	cmp	r0, r4
 800944e:	d001      	beq.n	8009454 <strncmp+0x1c>
 8009450:	2b00      	cmp	r3, #0
 8009452:	d1f5      	bne.n	8009440 <strncmp+0x8>
 8009454:	1a98      	subs	r0, r3, r2
 8009456:	bd10      	pop	{r4, pc}
 8009458:	4610      	mov	r0, r2
 800945a:	e7fc      	b.n	8009456 <strncmp+0x1e>

0800945c <__ascii_wctomb>:
 800945c:	4603      	mov	r3, r0
 800945e:	4608      	mov	r0, r1
 8009460:	b141      	cbz	r1, 8009474 <__ascii_wctomb+0x18>
 8009462:	2aff      	cmp	r2, #255	; 0xff
 8009464:	d904      	bls.n	8009470 <__ascii_wctomb+0x14>
 8009466:	228a      	movs	r2, #138	; 0x8a
 8009468:	f04f 30ff 	mov.w	r0, #4294967295
 800946c:	601a      	str	r2, [r3, #0]
 800946e:	4770      	bx	lr
 8009470:	2001      	movs	r0, #1
 8009472:	700a      	strb	r2, [r1, #0]
 8009474:	4770      	bx	lr
	...

08009478 <__assert_func>:
 8009478:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800947a:	4614      	mov	r4, r2
 800947c:	461a      	mov	r2, r3
 800947e:	4b09      	ldr	r3, [pc, #36]	; (80094a4 <__assert_func+0x2c>)
 8009480:	4605      	mov	r5, r0
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	68d8      	ldr	r0, [r3, #12]
 8009486:	b14c      	cbz	r4, 800949c <__assert_func+0x24>
 8009488:	4b07      	ldr	r3, [pc, #28]	; (80094a8 <__assert_func+0x30>)
 800948a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800948e:	9100      	str	r1, [sp, #0]
 8009490:	462b      	mov	r3, r5
 8009492:	4906      	ldr	r1, [pc, #24]	; (80094ac <__assert_func+0x34>)
 8009494:	f000 f80e 	bl	80094b4 <fiprintf>
 8009498:	f000 fa82 	bl	80099a0 <abort>
 800949c:	4b04      	ldr	r3, [pc, #16]	; (80094b0 <__assert_func+0x38>)
 800949e:	461c      	mov	r4, r3
 80094a0:	e7f3      	b.n	800948a <__assert_func+0x12>
 80094a2:	bf00      	nop
 80094a4:	20000028 	.word	0x20000028
 80094a8:	0800b8b5 	.word	0x0800b8b5
 80094ac:	0800b8c2 	.word	0x0800b8c2
 80094b0:	0800b8f0 	.word	0x0800b8f0

080094b4 <fiprintf>:
 80094b4:	b40e      	push	{r1, r2, r3}
 80094b6:	b503      	push	{r0, r1, lr}
 80094b8:	4601      	mov	r1, r0
 80094ba:	ab03      	add	r3, sp, #12
 80094bc:	4805      	ldr	r0, [pc, #20]	; (80094d4 <fiprintf+0x20>)
 80094be:	f853 2b04 	ldr.w	r2, [r3], #4
 80094c2:	6800      	ldr	r0, [r0, #0]
 80094c4:	9301      	str	r3, [sp, #4]
 80094c6:	f000 f87b 	bl	80095c0 <_vfiprintf_r>
 80094ca:	b002      	add	sp, #8
 80094cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80094d0:	b003      	add	sp, #12
 80094d2:	4770      	bx	lr
 80094d4:	20000028 	.word	0x20000028

080094d8 <memmove>:
 80094d8:	4288      	cmp	r0, r1
 80094da:	b510      	push	{r4, lr}
 80094dc:	eb01 0402 	add.w	r4, r1, r2
 80094e0:	d902      	bls.n	80094e8 <memmove+0x10>
 80094e2:	4284      	cmp	r4, r0
 80094e4:	4623      	mov	r3, r4
 80094e6:	d807      	bhi.n	80094f8 <memmove+0x20>
 80094e8:	1e43      	subs	r3, r0, #1
 80094ea:	42a1      	cmp	r1, r4
 80094ec:	d008      	beq.n	8009500 <memmove+0x28>
 80094ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80094f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80094f6:	e7f8      	b.n	80094ea <memmove+0x12>
 80094f8:	4601      	mov	r1, r0
 80094fa:	4402      	add	r2, r0
 80094fc:	428a      	cmp	r2, r1
 80094fe:	d100      	bne.n	8009502 <memmove+0x2a>
 8009500:	bd10      	pop	{r4, pc}
 8009502:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009506:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800950a:	e7f7      	b.n	80094fc <memmove+0x24>

0800950c <__malloc_lock>:
 800950c:	4801      	ldr	r0, [pc, #4]	; (8009514 <__malloc_lock+0x8>)
 800950e:	f000 bc07 	b.w	8009d20 <__retarget_lock_acquire_recursive>
 8009512:	bf00      	nop
 8009514:	2000092c 	.word	0x2000092c

08009518 <__malloc_unlock>:
 8009518:	4801      	ldr	r0, [pc, #4]	; (8009520 <__malloc_unlock+0x8>)
 800951a:	f000 bc02 	b.w	8009d22 <__retarget_lock_release_recursive>
 800951e:	bf00      	nop
 8009520:	2000092c 	.word	0x2000092c

08009524 <_realloc_r>:
 8009524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009526:	4607      	mov	r7, r0
 8009528:	4614      	mov	r4, r2
 800952a:	460e      	mov	r6, r1
 800952c:	b921      	cbnz	r1, 8009538 <_realloc_r+0x14>
 800952e:	4611      	mov	r1, r2
 8009530:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009534:	f7ff bdb4 	b.w	80090a0 <_malloc_r>
 8009538:	b922      	cbnz	r2, 8009544 <_realloc_r+0x20>
 800953a:	f7ff fd65 	bl	8009008 <_free_r>
 800953e:	4625      	mov	r5, r4
 8009540:	4628      	mov	r0, r5
 8009542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009544:	f000 fc52 	bl	8009dec <_malloc_usable_size_r>
 8009548:	42a0      	cmp	r0, r4
 800954a:	d20f      	bcs.n	800956c <_realloc_r+0x48>
 800954c:	4621      	mov	r1, r4
 800954e:	4638      	mov	r0, r7
 8009550:	f7ff fda6 	bl	80090a0 <_malloc_r>
 8009554:	4605      	mov	r5, r0
 8009556:	2800      	cmp	r0, #0
 8009558:	d0f2      	beq.n	8009540 <_realloc_r+0x1c>
 800955a:	4631      	mov	r1, r6
 800955c:	4622      	mov	r2, r4
 800955e:	f7ff f87f 	bl	8008660 <memcpy>
 8009562:	4631      	mov	r1, r6
 8009564:	4638      	mov	r0, r7
 8009566:	f7ff fd4f 	bl	8009008 <_free_r>
 800956a:	e7e9      	b.n	8009540 <_realloc_r+0x1c>
 800956c:	4635      	mov	r5, r6
 800956e:	e7e7      	b.n	8009540 <_realloc_r+0x1c>

08009570 <__sfputc_r>:
 8009570:	6893      	ldr	r3, [r2, #8]
 8009572:	b410      	push	{r4}
 8009574:	3b01      	subs	r3, #1
 8009576:	2b00      	cmp	r3, #0
 8009578:	6093      	str	r3, [r2, #8]
 800957a:	da07      	bge.n	800958c <__sfputc_r+0x1c>
 800957c:	6994      	ldr	r4, [r2, #24]
 800957e:	42a3      	cmp	r3, r4
 8009580:	db01      	blt.n	8009586 <__sfputc_r+0x16>
 8009582:	290a      	cmp	r1, #10
 8009584:	d102      	bne.n	800958c <__sfputc_r+0x1c>
 8009586:	bc10      	pop	{r4}
 8009588:	f000 b94a 	b.w	8009820 <__swbuf_r>
 800958c:	6813      	ldr	r3, [r2, #0]
 800958e:	1c58      	adds	r0, r3, #1
 8009590:	6010      	str	r0, [r2, #0]
 8009592:	7019      	strb	r1, [r3, #0]
 8009594:	4608      	mov	r0, r1
 8009596:	bc10      	pop	{r4}
 8009598:	4770      	bx	lr

0800959a <__sfputs_r>:
 800959a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800959c:	4606      	mov	r6, r0
 800959e:	460f      	mov	r7, r1
 80095a0:	4614      	mov	r4, r2
 80095a2:	18d5      	adds	r5, r2, r3
 80095a4:	42ac      	cmp	r4, r5
 80095a6:	d101      	bne.n	80095ac <__sfputs_r+0x12>
 80095a8:	2000      	movs	r0, #0
 80095aa:	e007      	b.n	80095bc <__sfputs_r+0x22>
 80095ac:	463a      	mov	r2, r7
 80095ae:	4630      	mov	r0, r6
 80095b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095b4:	f7ff ffdc 	bl	8009570 <__sfputc_r>
 80095b8:	1c43      	adds	r3, r0, #1
 80095ba:	d1f3      	bne.n	80095a4 <__sfputs_r+0xa>
 80095bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080095c0 <_vfiprintf_r>:
 80095c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095c4:	460d      	mov	r5, r1
 80095c6:	4614      	mov	r4, r2
 80095c8:	4698      	mov	r8, r3
 80095ca:	4606      	mov	r6, r0
 80095cc:	b09d      	sub	sp, #116	; 0x74
 80095ce:	b118      	cbz	r0, 80095d8 <_vfiprintf_r+0x18>
 80095d0:	6983      	ldr	r3, [r0, #24]
 80095d2:	b90b      	cbnz	r3, 80095d8 <_vfiprintf_r+0x18>
 80095d4:	f000 fb06 	bl	8009be4 <__sinit>
 80095d8:	4b89      	ldr	r3, [pc, #548]	; (8009800 <_vfiprintf_r+0x240>)
 80095da:	429d      	cmp	r5, r3
 80095dc:	d11b      	bne.n	8009616 <_vfiprintf_r+0x56>
 80095de:	6875      	ldr	r5, [r6, #4]
 80095e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80095e2:	07d9      	lsls	r1, r3, #31
 80095e4:	d405      	bmi.n	80095f2 <_vfiprintf_r+0x32>
 80095e6:	89ab      	ldrh	r3, [r5, #12]
 80095e8:	059a      	lsls	r2, r3, #22
 80095ea:	d402      	bmi.n	80095f2 <_vfiprintf_r+0x32>
 80095ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80095ee:	f000 fb97 	bl	8009d20 <__retarget_lock_acquire_recursive>
 80095f2:	89ab      	ldrh	r3, [r5, #12]
 80095f4:	071b      	lsls	r3, r3, #28
 80095f6:	d501      	bpl.n	80095fc <_vfiprintf_r+0x3c>
 80095f8:	692b      	ldr	r3, [r5, #16]
 80095fa:	b9eb      	cbnz	r3, 8009638 <_vfiprintf_r+0x78>
 80095fc:	4629      	mov	r1, r5
 80095fe:	4630      	mov	r0, r6
 8009600:	f000 f960 	bl	80098c4 <__swsetup_r>
 8009604:	b1c0      	cbz	r0, 8009638 <_vfiprintf_r+0x78>
 8009606:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009608:	07dc      	lsls	r4, r3, #31
 800960a:	d50e      	bpl.n	800962a <_vfiprintf_r+0x6a>
 800960c:	f04f 30ff 	mov.w	r0, #4294967295
 8009610:	b01d      	add	sp, #116	; 0x74
 8009612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009616:	4b7b      	ldr	r3, [pc, #492]	; (8009804 <_vfiprintf_r+0x244>)
 8009618:	429d      	cmp	r5, r3
 800961a:	d101      	bne.n	8009620 <_vfiprintf_r+0x60>
 800961c:	68b5      	ldr	r5, [r6, #8]
 800961e:	e7df      	b.n	80095e0 <_vfiprintf_r+0x20>
 8009620:	4b79      	ldr	r3, [pc, #484]	; (8009808 <_vfiprintf_r+0x248>)
 8009622:	429d      	cmp	r5, r3
 8009624:	bf08      	it	eq
 8009626:	68f5      	ldreq	r5, [r6, #12]
 8009628:	e7da      	b.n	80095e0 <_vfiprintf_r+0x20>
 800962a:	89ab      	ldrh	r3, [r5, #12]
 800962c:	0598      	lsls	r0, r3, #22
 800962e:	d4ed      	bmi.n	800960c <_vfiprintf_r+0x4c>
 8009630:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009632:	f000 fb76 	bl	8009d22 <__retarget_lock_release_recursive>
 8009636:	e7e9      	b.n	800960c <_vfiprintf_r+0x4c>
 8009638:	2300      	movs	r3, #0
 800963a:	9309      	str	r3, [sp, #36]	; 0x24
 800963c:	2320      	movs	r3, #32
 800963e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009642:	2330      	movs	r3, #48	; 0x30
 8009644:	f04f 0901 	mov.w	r9, #1
 8009648:	f8cd 800c 	str.w	r8, [sp, #12]
 800964c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800980c <_vfiprintf_r+0x24c>
 8009650:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009654:	4623      	mov	r3, r4
 8009656:	469a      	mov	sl, r3
 8009658:	f813 2b01 	ldrb.w	r2, [r3], #1
 800965c:	b10a      	cbz	r2, 8009662 <_vfiprintf_r+0xa2>
 800965e:	2a25      	cmp	r2, #37	; 0x25
 8009660:	d1f9      	bne.n	8009656 <_vfiprintf_r+0x96>
 8009662:	ebba 0b04 	subs.w	fp, sl, r4
 8009666:	d00b      	beq.n	8009680 <_vfiprintf_r+0xc0>
 8009668:	465b      	mov	r3, fp
 800966a:	4622      	mov	r2, r4
 800966c:	4629      	mov	r1, r5
 800966e:	4630      	mov	r0, r6
 8009670:	f7ff ff93 	bl	800959a <__sfputs_r>
 8009674:	3001      	adds	r0, #1
 8009676:	f000 80aa 	beq.w	80097ce <_vfiprintf_r+0x20e>
 800967a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800967c:	445a      	add	r2, fp
 800967e:	9209      	str	r2, [sp, #36]	; 0x24
 8009680:	f89a 3000 	ldrb.w	r3, [sl]
 8009684:	2b00      	cmp	r3, #0
 8009686:	f000 80a2 	beq.w	80097ce <_vfiprintf_r+0x20e>
 800968a:	2300      	movs	r3, #0
 800968c:	f04f 32ff 	mov.w	r2, #4294967295
 8009690:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009694:	f10a 0a01 	add.w	sl, sl, #1
 8009698:	9304      	str	r3, [sp, #16]
 800969a:	9307      	str	r3, [sp, #28]
 800969c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80096a0:	931a      	str	r3, [sp, #104]	; 0x68
 80096a2:	4654      	mov	r4, sl
 80096a4:	2205      	movs	r2, #5
 80096a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096aa:	4858      	ldr	r0, [pc, #352]	; (800980c <_vfiprintf_r+0x24c>)
 80096ac:	f7fe ffca 	bl	8008644 <memchr>
 80096b0:	9a04      	ldr	r2, [sp, #16]
 80096b2:	b9d8      	cbnz	r0, 80096ec <_vfiprintf_r+0x12c>
 80096b4:	06d1      	lsls	r1, r2, #27
 80096b6:	bf44      	itt	mi
 80096b8:	2320      	movmi	r3, #32
 80096ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096be:	0713      	lsls	r3, r2, #28
 80096c0:	bf44      	itt	mi
 80096c2:	232b      	movmi	r3, #43	; 0x2b
 80096c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096c8:	f89a 3000 	ldrb.w	r3, [sl]
 80096cc:	2b2a      	cmp	r3, #42	; 0x2a
 80096ce:	d015      	beq.n	80096fc <_vfiprintf_r+0x13c>
 80096d0:	4654      	mov	r4, sl
 80096d2:	2000      	movs	r0, #0
 80096d4:	f04f 0c0a 	mov.w	ip, #10
 80096d8:	9a07      	ldr	r2, [sp, #28]
 80096da:	4621      	mov	r1, r4
 80096dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80096e0:	3b30      	subs	r3, #48	; 0x30
 80096e2:	2b09      	cmp	r3, #9
 80096e4:	d94e      	bls.n	8009784 <_vfiprintf_r+0x1c4>
 80096e6:	b1b0      	cbz	r0, 8009716 <_vfiprintf_r+0x156>
 80096e8:	9207      	str	r2, [sp, #28]
 80096ea:	e014      	b.n	8009716 <_vfiprintf_r+0x156>
 80096ec:	eba0 0308 	sub.w	r3, r0, r8
 80096f0:	fa09 f303 	lsl.w	r3, r9, r3
 80096f4:	4313      	orrs	r3, r2
 80096f6:	46a2      	mov	sl, r4
 80096f8:	9304      	str	r3, [sp, #16]
 80096fa:	e7d2      	b.n	80096a2 <_vfiprintf_r+0xe2>
 80096fc:	9b03      	ldr	r3, [sp, #12]
 80096fe:	1d19      	adds	r1, r3, #4
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	9103      	str	r1, [sp, #12]
 8009704:	2b00      	cmp	r3, #0
 8009706:	bfbb      	ittet	lt
 8009708:	425b      	neglt	r3, r3
 800970a:	f042 0202 	orrlt.w	r2, r2, #2
 800970e:	9307      	strge	r3, [sp, #28]
 8009710:	9307      	strlt	r3, [sp, #28]
 8009712:	bfb8      	it	lt
 8009714:	9204      	strlt	r2, [sp, #16]
 8009716:	7823      	ldrb	r3, [r4, #0]
 8009718:	2b2e      	cmp	r3, #46	; 0x2e
 800971a:	d10c      	bne.n	8009736 <_vfiprintf_r+0x176>
 800971c:	7863      	ldrb	r3, [r4, #1]
 800971e:	2b2a      	cmp	r3, #42	; 0x2a
 8009720:	d135      	bne.n	800978e <_vfiprintf_r+0x1ce>
 8009722:	9b03      	ldr	r3, [sp, #12]
 8009724:	3402      	adds	r4, #2
 8009726:	1d1a      	adds	r2, r3, #4
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	9203      	str	r2, [sp, #12]
 800972c:	2b00      	cmp	r3, #0
 800972e:	bfb8      	it	lt
 8009730:	f04f 33ff 	movlt.w	r3, #4294967295
 8009734:	9305      	str	r3, [sp, #20]
 8009736:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800981c <_vfiprintf_r+0x25c>
 800973a:	2203      	movs	r2, #3
 800973c:	4650      	mov	r0, sl
 800973e:	7821      	ldrb	r1, [r4, #0]
 8009740:	f7fe ff80 	bl	8008644 <memchr>
 8009744:	b140      	cbz	r0, 8009758 <_vfiprintf_r+0x198>
 8009746:	2340      	movs	r3, #64	; 0x40
 8009748:	eba0 000a 	sub.w	r0, r0, sl
 800974c:	fa03 f000 	lsl.w	r0, r3, r0
 8009750:	9b04      	ldr	r3, [sp, #16]
 8009752:	3401      	adds	r4, #1
 8009754:	4303      	orrs	r3, r0
 8009756:	9304      	str	r3, [sp, #16]
 8009758:	f814 1b01 	ldrb.w	r1, [r4], #1
 800975c:	2206      	movs	r2, #6
 800975e:	482c      	ldr	r0, [pc, #176]	; (8009810 <_vfiprintf_r+0x250>)
 8009760:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009764:	f7fe ff6e 	bl	8008644 <memchr>
 8009768:	2800      	cmp	r0, #0
 800976a:	d03f      	beq.n	80097ec <_vfiprintf_r+0x22c>
 800976c:	4b29      	ldr	r3, [pc, #164]	; (8009814 <_vfiprintf_r+0x254>)
 800976e:	bb1b      	cbnz	r3, 80097b8 <_vfiprintf_r+0x1f8>
 8009770:	9b03      	ldr	r3, [sp, #12]
 8009772:	3307      	adds	r3, #7
 8009774:	f023 0307 	bic.w	r3, r3, #7
 8009778:	3308      	adds	r3, #8
 800977a:	9303      	str	r3, [sp, #12]
 800977c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800977e:	443b      	add	r3, r7
 8009780:	9309      	str	r3, [sp, #36]	; 0x24
 8009782:	e767      	b.n	8009654 <_vfiprintf_r+0x94>
 8009784:	460c      	mov	r4, r1
 8009786:	2001      	movs	r0, #1
 8009788:	fb0c 3202 	mla	r2, ip, r2, r3
 800978c:	e7a5      	b.n	80096da <_vfiprintf_r+0x11a>
 800978e:	2300      	movs	r3, #0
 8009790:	f04f 0c0a 	mov.w	ip, #10
 8009794:	4619      	mov	r1, r3
 8009796:	3401      	adds	r4, #1
 8009798:	9305      	str	r3, [sp, #20]
 800979a:	4620      	mov	r0, r4
 800979c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80097a0:	3a30      	subs	r2, #48	; 0x30
 80097a2:	2a09      	cmp	r2, #9
 80097a4:	d903      	bls.n	80097ae <_vfiprintf_r+0x1ee>
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d0c5      	beq.n	8009736 <_vfiprintf_r+0x176>
 80097aa:	9105      	str	r1, [sp, #20]
 80097ac:	e7c3      	b.n	8009736 <_vfiprintf_r+0x176>
 80097ae:	4604      	mov	r4, r0
 80097b0:	2301      	movs	r3, #1
 80097b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80097b6:	e7f0      	b.n	800979a <_vfiprintf_r+0x1da>
 80097b8:	ab03      	add	r3, sp, #12
 80097ba:	9300      	str	r3, [sp, #0]
 80097bc:	462a      	mov	r2, r5
 80097be:	4630      	mov	r0, r6
 80097c0:	4b15      	ldr	r3, [pc, #84]	; (8009818 <_vfiprintf_r+0x258>)
 80097c2:	a904      	add	r1, sp, #16
 80097c4:	f7fc f87e 	bl	80058c4 <_printf_float>
 80097c8:	4607      	mov	r7, r0
 80097ca:	1c78      	adds	r0, r7, #1
 80097cc:	d1d6      	bne.n	800977c <_vfiprintf_r+0x1bc>
 80097ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80097d0:	07d9      	lsls	r1, r3, #31
 80097d2:	d405      	bmi.n	80097e0 <_vfiprintf_r+0x220>
 80097d4:	89ab      	ldrh	r3, [r5, #12]
 80097d6:	059a      	lsls	r2, r3, #22
 80097d8:	d402      	bmi.n	80097e0 <_vfiprintf_r+0x220>
 80097da:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80097dc:	f000 faa1 	bl	8009d22 <__retarget_lock_release_recursive>
 80097e0:	89ab      	ldrh	r3, [r5, #12]
 80097e2:	065b      	lsls	r3, r3, #25
 80097e4:	f53f af12 	bmi.w	800960c <_vfiprintf_r+0x4c>
 80097e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80097ea:	e711      	b.n	8009610 <_vfiprintf_r+0x50>
 80097ec:	ab03      	add	r3, sp, #12
 80097ee:	9300      	str	r3, [sp, #0]
 80097f0:	462a      	mov	r2, r5
 80097f2:	4630      	mov	r0, r6
 80097f4:	4b08      	ldr	r3, [pc, #32]	; (8009818 <_vfiprintf_r+0x258>)
 80097f6:	a904      	add	r1, sp, #16
 80097f8:	f7fc fb00 	bl	8005dfc <_printf_i>
 80097fc:	e7e4      	b.n	80097c8 <_vfiprintf_r+0x208>
 80097fe:	bf00      	nop
 8009800:	0800b914 	.word	0x0800b914
 8009804:	0800b934 	.word	0x0800b934
 8009808:	0800b8f4 	.word	0x0800b8f4
 800980c:	0800b8a4 	.word	0x0800b8a4
 8009810:	0800b8ae 	.word	0x0800b8ae
 8009814:	080058c5 	.word	0x080058c5
 8009818:	0800959b 	.word	0x0800959b
 800981c:	0800b8aa 	.word	0x0800b8aa

08009820 <__swbuf_r>:
 8009820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009822:	460e      	mov	r6, r1
 8009824:	4614      	mov	r4, r2
 8009826:	4605      	mov	r5, r0
 8009828:	b118      	cbz	r0, 8009832 <__swbuf_r+0x12>
 800982a:	6983      	ldr	r3, [r0, #24]
 800982c:	b90b      	cbnz	r3, 8009832 <__swbuf_r+0x12>
 800982e:	f000 f9d9 	bl	8009be4 <__sinit>
 8009832:	4b21      	ldr	r3, [pc, #132]	; (80098b8 <__swbuf_r+0x98>)
 8009834:	429c      	cmp	r4, r3
 8009836:	d12b      	bne.n	8009890 <__swbuf_r+0x70>
 8009838:	686c      	ldr	r4, [r5, #4]
 800983a:	69a3      	ldr	r3, [r4, #24]
 800983c:	60a3      	str	r3, [r4, #8]
 800983e:	89a3      	ldrh	r3, [r4, #12]
 8009840:	071a      	lsls	r2, r3, #28
 8009842:	d52f      	bpl.n	80098a4 <__swbuf_r+0x84>
 8009844:	6923      	ldr	r3, [r4, #16]
 8009846:	b36b      	cbz	r3, 80098a4 <__swbuf_r+0x84>
 8009848:	6923      	ldr	r3, [r4, #16]
 800984a:	6820      	ldr	r0, [r4, #0]
 800984c:	b2f6      	uxtb	r6, r6
 800984e:	1ac0      	subs	r0, r0, r3
 8009850:	6963      	ldr	r3, [r4, #20]
 8009852:	4637      	mov	r7, r6
 8009854:	4283      	cmp	r3, r0
 8009856:	dc04      	bgt.n	8009862 <__swbuf_r+0x42>
 8009858:	4621      	mov	r1, r4
 800985a:	4628      	mov	r0, r5
 800985c:	f000 f92e 	bl	8009abc <_fflush_r>
 8009860:	bb30      	cbnz	r0, 80098b0 <__swbuf_r+0x90>
 8009862:	68a3      	ldr	r3, [r4, #8]
 8009864:	3001      	adds	r0, #1
 8009866:	3b01      	subs	r3, #1
 8009868:	60a3      	str	r3, [r4, #8]
 800986a:	6823      	ldr	r3, [r4, #0]
 800986c:	1c5a      	adds	r2, r3, #1
 800986e:	6022      	str	r2, [r4, #0]
 8009870:	701e      	strb	r6, [r3, #0]
 8009872:	6963      	ldr	r3, [r4, #20]
 8009874:	4283      	cmp	r3, r0
 8009876:	d004      	beq.n	8009882 <__swbuf_r+0x62>
 8009878:	89a3      	ldrh	r3, [r4, #12]
 800987a:	07db      	lsls	r3, r3, #31
 800987c:	d506      	bpl.n	800988c <__swbuf_r+0x6c>
 800987e:	2e0a      	cmp	r6, #10
 8009880:	d104      	bne.n	800988c <__swbuf_r+0x6c>
 8009882:	4621      	mov	r1, r4
 8009884:	4628      	mov	r0, r5
 8009886:	f000 f919 	bl	8009abc <_fflush_r>
 800988a:	b988      	cbnz	r0, 80098b0 <__swbuf_r+0x90>
 800988c:	4638      	mov	r0, r7
 800988e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009890:	4b0a      	ldr	r3, [pc, #40]	; (80098bc <__swbuf_r+0x9c>)
 8009892:	429c      	cmp	r4, r3
 8009894:	d101      	bne.n	800989a <__swbuf_r+0x7a>
 8009896:	68ac      	ldr	r4, [r5, #8]
 8009898:	e7cf      	b.n	800983a <__swbuf_r+0x1a>
 800989a:	4b09      	ldr	r3, [pc, #36]	; (80098c0 <__swbuf_r+0xa0>)
 800989c:	429c      	cmp	r4, r3
 800989e:	bf08      	it	eq
 80098a0:	68ec      	ldreq	r4, [r5, #12]
 80098a2:	e7ca      	b.n	800983a <__swbuf_r+0x1a>
 80098a4:	4621      	mov	r1, r4
 80098a6:	4628      	mov	r0, r5
 80098a8:	f000 f80c 	bl	80098c4 <__swsetup_r>
 80098ac:	2800      	cmp	r0, #0
 80098ae:	d0cb      	beq.n	8009848 <__swbuf_r+0x28>
 80098b0:	f04f 37ff 	mov.w	r7, #4294967295
 80098b4:	e7ea      	b.n	800988c <__swbuf_r+0x6c>
 80098b6:	bf00      	nop
 80098b8:	0800b914 	.word	0x0800b914
 80098bc:	0800b934 	.word	0x0800b934
 80098c0:	0800b8f4 	.word	0x0800b8f4

080098c4 <__swsetup_r>:
 80098c4:	4b32      	ldr	r3, [pc, #200]	; (8009990 <__swsetup_r+0xcc>)
 80098c6:	b570      	push	{r4, r5, r6, lr}
 80098c8:	681d      	ldr	r5, [r3, #0]
 80098ca:	4606      	mov	r6, r0
 80098cc:	460c      	mov	r4, r1
 80098ce:	b125      	cbz	r5, 80098da <__swsetup_r+0x16>
 80098d0:	69ab      	ldr	r3, [r5, #24]
 80098d2:	b913      	cbnz	r3, 80098da <__swsetup_r+0x16>
 80098d4:	4628      	mov	r0, r5
 80098d6:	f000 f985 	bl	8009be4 <__sinit>
 80098da:	4b2e      	ldr	r3, [pc, #184]	; (8009994 <__swsetup_r+0xd0>)
 80098dc:	429c      	cmp	r4, r3
 80098de:	d10f      	bne.n	8009900 <__swsetup_r+0x3c>
 80098e0:	686c      	ldr	r4, [r5, #4]
 80098e2:	89a3      	ldrh	r3, [r4, #12]
 80098e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80098e8:	0719      	lsls	r1, r3, #28
 80098ea:	d42c      	bmi.n	8009946 <__swsetup_r+0x82>
 80098ec:	06dd      	lsls	r5, r3, #27
 80098ee:	d411      	bmi.n	8009914 <__swsetup_r+0x50>
 80098f0:	2309      	movs	r3, #9
 80098f2:	6033      	str	r3, [r6, #0]
 80098f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80098f8:	f04f 30ff 	mov.w	r0, #4294967295
 80098fc:	81a3      	strh	r3, [r4, #12]
 80098fe:	e03e      	b.n	800997e <__swsetup_r+0xba>
 8009900:	4b25      	ldr	r3, [pc, #148]	; (8009998 <__swsetup_r+0xd4>)
 8009902:	429c      	cmp	r4, r3
 8009904:	d101      	bne.n	800990a <__swsetup_r+0x46>
 8009906:	68ac      	ldr	r4, [r5, #8]
 8009908:	e7eb      	b.n	80098e2 <__swsetup_r+0x1e>
 800990a:	4b24      	ldr	r3, [pc, #144]	; (800999c <__swsetup_r+0xd8>)
 800990c:	429c      	cmp	r4, r3
 800990e:	bf08      	it	eq
 8009910:	68ec      	ldreq	r4, [r5, #12]
 8009912:	e7e6      	b.n	80098e2 <__swsetup_r+0x1e>
 8009914:	0758      	lsls	r0, r3, #29
 8009916:	d512      	bpl.n	800993e <__swsetup_r+0x7a>
 8009918:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800991a:	b141      	cbz	r1, 800992e <__swsetup_r+0x6a>
 800991c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009920:	4299      	cmp	r1, r3
 8009922:	d002      	beq.n	800992a <__swsetup_r+0x66>
 8009924:	4630      	mov	r0, r6
 8009926:	f7ff fb6f 	bl	8009008 <_free_r>
 800992a:	2300      	movs	r3, #0
 800992c:	6363      	str	r3, [r4, #52]	; 0x34
 800992e:	89a3      	ldrh	r3, [r4, #12]
 8009930:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009934:	81a3      	strh	r3, [r4, #12]
 8009936:	2300      	movs	r3, #0
 8009938:	6063      	str	r3, [r4, #4]
 800993a:	6923      	ldr	r3, [r4, #16]
 800993c:	6023      	str	r3, [r4, #0]
 800993e:	89a3      	ldrh	r3, [r4, #12]
 8009940:	f043 0308 	orr.w	r3, r3, #8
 8009944:	81a3      	strh	r3, [r4, #12]
 8009946:	6923      	ldr	r3, [r4, #16]
 8009948:	b94b      	cbnz	r3, 800995e <__swsetup_r+0x9a>
 800994a:	89a3      	ldrh	r3, [r4, #12]
 800994c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009950:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009954:	d003      	beq.n	800995e <__swsetup_r+0x9a>
 8009956:	4621      	mov	r1, r4
 8009958:	4630      	mov	r0, r6
 800995a:	f000 fa07 	bl	8009d6c <__smakebuf_r>
 800995e:	89a0      	ldrh	r0, [r4, #12]
 8009960:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009964:	f010 0301 	ands.w	r3, r0, #1
 8009968:	d00a      	beq.n	8009980 <__swsetup_r+0xbc>
 800996a:	2300      	movs	r3, #0
 800996c:	60a3      	str	r3, [r4, #8]
 800996e:	6963      	ldr	r3, [r4, #20]
 8009970:	425b      	negs	r3, r3
 8009972:	61a3      	str	r3, [r4, #24]
 8009974:	6923      	ldr	r3, [r4, #16]
 8009976:	b943      	cbnz	r3, 800998a <__swsetup_r+0xc6>
 8009978:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800997c:	d1ba      	bne.n	80098f4 <__swsetup_r+0x30>
 800997e:	bd70      	pop	{r4, r5, r6, pc}
 8009980:	0781      	lsls	r1, r0, #30
 8009982:	bf58      	it	pl
 8009984:	6963      	ldrpl	r3, [r4, #20]
 8009986:	60a3      	str	r3, [r4, #8]
 8009988:	e7f4      	b.n	8009974 <__swsetup_r+0xb0>
 800998a:	2000      	movs	r0, #0
 800998c:	e7f7      	b.n	800997e <__swsetup_r+0xba>
 800998e:	bf00      	nop
 8009990:	20000028 	.word	0x20000028
 8009994:	0800b914 	.word	0x0800b914
 8009998:	0800b934 	.word	0x0800b934
 800999c:	0800b8f4 	.word	0x0800b8f4

080099a0 <abort>:
 80099a0:	2006      	movs	r0, #6
 80099a2:	b508      	push	{r3, lr}
 80099a4:	f000 fa52 	bl	8009e4c <raise>
 80099a8:	2001      	movs	r0, #1
 80099aa:	f7f9 fcc8 	bl	800333e <_exit>
	...

080099b0 <__sflush_r>:
 80099b0:	898a      	ldrh	r2, [r1, #12]
 80099b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099b6:	4605      	mov	r5, r0
 80099b8:	0710      	lsls	r0, r2, #28
 80099ba:	460c      	mov	r4, r1
 80099bc:	d458      	bmi.n	8009a70 <__sflush_r+0xc0>
 80099be:	684b      	ldr	r3, [r1, #4]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	dc05      	bgt.n	80099d0 <__sflush_r+0x20>
 80099c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	dc02      	bgt.n	80099d0 <__sflush_r+0x20>
 80099ca:	2000      	movs	r0, #0
 80099cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80099d2:	2e00      	cmp	r6, #0
 80099d4:	d0f9      	beq.n	80099ca <__sflush_r+0x1a>
 80099d6:	2300      	movs	r3, #0
 80099d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80099dc:	682f      	ldr	r7, [r5, #0]
 80099de:	602b      	str	r3, [r5, #0]
 80099e0:	d032      	beq.n	8009a48 <__sflush_r+0x98>
 80099e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80099e4:	89a3      	ldrh	r3, [r4, #12]
 80099e6:	075a      	lsls	r2, r3, #29
 80099e8:	d505      	bpl.n	80099f6 <__sflush_r+0x46>
 80099ea:	6863      	ldr	r3, [r4, #4]
 80099ec:	1ac0      	subs	r0, r0, r3
 80099ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80099f0:	b10b      	cbz	r3, 80099f6 <__sflush_r+0x46>
 80099f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80099f4:	1ac0      	subs	r0, r0, r3
 80099f6:	2300      	movs	r3, #0
 80099f8:	4602      	mov	r2, r0
 80099fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80099fc:	4628      	mov	r0, r5
 80099fe:	6a21      	ldr	r1, [r4, #32]
 8009a00:	47b0      	blx	r6
 8009a02:	1c43      	adds	r3, r0, #1
 8009a04:	89a3      	ldrh	r3, [r4, #12]
 8009a06:	d106      	bne.n	8009a16 <__sflush_r+0x66>
 8009a08:	6829      	ldr	r1, [r5, #0]
 8009a0a:	291d      	cmp	r1, #29
 8009a0c:	d82c      	bhi.n	8009a68 <__sflush_r+0xb8>
 8009a0e:	4a2a      	ldr	r2, [pc, #168]	; (8009ab8 <__sflush_r+0x108>)
 8009a10:	40ca      	lsrs	r2, r1
 8009a12:	07d6      	lsls	r6, r2, #31
 8009a14:	d528      	bpl.n	8009a68 <__sflush_r+0xb8>
 8009a16:	2200      	movs	r2, #0
 8009a18:	6062      	str	r2, [r4, #4]
 8009a1a:	6922      	ldr	r2, [r4, #16]
 8009a1c:	04d9      	lsls	r1, r3, #19
 8009a1e:	6022      	str	r2, [r4, #0]
 8009a20:	d504      	bpl.n	8009a2c <__sflush_r+0x7c>
 8009a22:	1c42      	adds	r2, r0, #1
 8009a24:	d101      	bne.n	8009a2a <__sflush_r+0x7a>
 8009a26:	682b      	ldr	r3, [r5, #0]
 8009a28:	b903      	cbnz	r3, 8009a2c <__sflush_r+0x7c>
 8009a2a:	6560      	str	r0, [r4, #84]	; 0x54
 8009a2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a2e:	602f      	str	r7, [r5, #0]
 8009a30:	2900      	cmp	r1, #0
 8009a32:	d0ca      	beq.n	80099ca <__sflush_r+0x1a>
 8009a34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a38:	4299      	cmp	r1, r3
 8009a3a:	d002      	beq.n	8009a42 <__sflush_r+0x92>
 8009a3c:	4628      	mov	r0, r5
 8009a3e:	f7ff fae3 	bl	8009008 <_free_r>
 8009a42:	2000      	movs	r0, #0
 8009a44:	6360      	str	r0, [r4, #52]	; 0x34
 8009a46:	e7c1      	b.n	80099cc <__sflush_r+0x1c>
 8009a48:	6a21      	ldr	r1, [r4, #32]
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	4628      	mov	r0, r5
 8009a4e:	47b0      	blx	r6
 8009a50:	1c41      	adds	r1, r0, #1
 8009a52:	d1c7      	bne.n	80099e4 <__sflush_r+0x34>
 8009a54:	682b      	ldr	r3, [r5, #0]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d0c4      	beq.n	80099e4 <__sflush_r+0x34>
 8009a5a:	2b1d      	cmp	r3, #29
 8009a5c:	d001      	beq.n	8009a62 <__sflush_r+0xb2>
 8009a5e:	2b16      	cmp	r3, #22
 8009a60:	d101      	bne.n	8009a66 <__sflush_r+0xb6>
 8009a62:	602f      	str	r7, [r5, #0]
 8009a64:	e7b1      	b.n	80099ca <__sflush_r+0x1a>
 8009a66:	89a3      	ldrh	r3, [r4, #12]
 8009a68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a6c:	81a3      	strh	r3, [r4, #12]
 8009a6e:	e7ad      	b.n	80099cc <__sflush_r+0x1c>
 8009a70:	690f      	ldr	r7, [r1, #16]
 8009a72:	2f00      	cmp	r7, #0
 8009a74:	d0a9      	beq.n	80099ca <__sflush_r+0x1a>
 8009a76:	0793      	lsls	r3, r2, #30
 8009a78:	bf18      	it	ne
 8009a7a:	2300      	movne	r3, #0
 8009a7c:	680e      	ldr	r6, [r1, #0]
 8009a7e:	bf08      	it	eq
 8009a80:	694b      	ldreq	r3, [r1, #20]
 8009a82:	eba6 0807 	sub.w	r8, r6, r7
 8009a86:	600f      	str	r7, [r1, #0]
 8009a88:	608b      	str	r3, [r1, #8]
 8009a8a:	f1b8 0f00 	cmp.w	r8, #0
 8009a8e:	dd9c      	ble.n	80099ca <__sflush_r+0x1a>
 8009a90:	4643      	mov	r3, r8
 8009a92:	463a      	mov	r2, r7
 8009a94:	4628      	mov	r0, r5
 8009a96:	6a21      	ldr	r1, [r4, #32]
 8009a98:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009a9a:	47b0      	blx	r6
 8009a9c:	2800      	cmp	r0, #0
 8009a9e:	dc06      	bgt.n	8009aae <__sflush_r+0xfe>
 8009aa0:	89a3      	ldrh	r3, [r4, #12]
 8009aa2:	f04f 30ff 	mov.w	r0, #4294967295
 8009aa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009aaa:	81a3      	strh	r3, [r4, #12]
 8009aac:	e78e      	b.n	80099cc <__sflush_r+0x1c>
 8009aae:	4407      	add	r7, r0
 8009ab0:	eba8 0800 	sub.w	r8, r8, r0
 8009ab4:	e7e9      	b.n	8009a8a <__sflush_r+0xda>
 8009ab6:	bf00      	nop
 8009ab8:	20400001 	.word	0x20400001

08009abc <_fflush_r>:
 8009abc:	b538      	push	{r3, r4, r5, lr}
 8009abe:	690b      	ldr	r3, [r1, #16]
 8009ac0:	4605      	mov	r5, r0
 8009ac2:	460c      	mov	r4, r1
 8009ac4:	b913      	cbnz	r3, 8009acc <_fflush_r+0x10>
 8009ac6:	2500      	movs	r5, #0
 8009ac8:	4628      	mov	r0, r5
 8009aca:	bd38      	pop	{r3, r4, r5, pc}
 8009acc:	b118      	cbz	r0, 8009ad6 <_fflush_r+0x1a>
 8009ace:	6983      	ldr	r3, [r0, #24]
 8009ad0:	b90b      	cbnz	r3, 8009ad6 <_fflush_r+0x1a>
 8009ad2:	f000 f887 	bl	8009be4 <__sinit>
 8009ad6:	4b14      	ldr	r3, [pc, #80]	; (8009b28 <_fflush_r+0x6c>)
 8009ad8:	429c      	cmp	r4, r3
 8009ada:	d11b      	bne.n	8009b14 <_fflush_r+0x58>
 8009adc:	686c      	ldr	r4, [r5, #4]
 8009ade:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d0ef      	beq.n	8009ac6 <_fflush_r+0xa>
 8009ae6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009ae8:	07d0      	lsls	r0, r2, #31
 8009aea:	d404      	bmi.n	8009af6 <_fflush_r+0x3a>
 8009aec:	0599      	lsls	r1, r3, #22
 8009aee:	d402      	bmi.n	8009af6 <_fflush_r+0x3a>
 8009af0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009af2:	f000 f915 	bl	8009d20 <__retarget_lock_acquire_recursive>
 8009af6:	4628      	mov	r0, r5
 8009af8:	4621      	mov	r1, r4
 8009afa:	f7ff ff59 	bl	80099b0 <__sflush_r>
 8009afe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009b00:	4605      	mov	r5, r0
 8009b02:	07da      	lsls	r2, r3, #31
 8009b04:	d4e0      	bmi.n	8009ac8 <_fflush_r+0xc>
 8009b06:	89a3      	ldrh	r3, [r4, #12]
 8009b08:	059b      	lsls	r3, r3, #22
 8009b0a:	d4dd      	bmi.n	8009ac8 <_fflush_r+0xc>
 8009b0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b0e:	f000 f908 	bl	8009d22 <__retarget_lock_release_recursive>
 8009b12:	e7d9      	b.n	8009ac8 <_fflush_r+0xc>
 8009b14:	4b05      	ldr	r3, [pc, #20]	; (8009b2c <_fflush_r+0x70>)
 8009b16:	429c      	cmp	r4, r3
 8009b18:	d101      	bne.n	8009b1e <_fflush_r+0x62>
 8009b1a:	68ac      	ldr	r4, [r5, #8]
 8009b1c:	e7df      	b.n	8009ade <_fflush_r+0x22>
 8009b1e:	4b04      	ldr	r3, [pc, #16]	; (8009b30 <_fflush_r+0x74>)
 8009b20:	429c      	cmp	r4, r3
 8009b22:	bf08      	it	eq
 8009b24:	68ec      	ldreq	r4, [r5, #12]
 8009b26:	e7da      	b.n	8009ade <_fflush_r+0x22>
 8009b28:	0800b914 	.word	0x0800b914
 8009b2c:	0800b934 	.word	0x0800b934
 8009b30:	0800b8f4 	.word	0x0800b8f4

08009b34 <std>:
 8009b34:	2300      	movs	r3, #0
 8009b36:	b510      	push	{r4, lr}
 8009b38:	4604      	mov	r4, r0
 8009b3a:	e9c0 3300 	strd	r3, r3, [r0]
 8009b3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009b42:	6083      	str	r3, [r0, #8]
 8009b44:	8181      	strh	r1, [r0, #12]
 8009b46:	6643      	str	r3, [r0, #100]	; 0x64
 8009b48:	81c2      	strh	r2, [r0, #14]
 8009b4a:	6183      	str	r3, [r0, #24]
 8009b4c:	4619      	mov	r1, r3
 8009b4e:	2208      	movs	r2, #8
 8009b50:	305c      	adds	r0, #92	; 0x5c
 8009b52:	f7fb fe11 	bl	8005778 <memset>
 8009b56:	4b05      	ldr	r3, [pc, #20]	; (8009b6c <std+0x38>)
 8009b58:	6224      	str	r4, [r4, #32]
 8009b5a:	6263      	str	r3, [r4, #36]	; 0x24
 8009b5c:	4b04      	ldr	r3, [pc, #16]	; (8009b70 <std+0x3c>)
 8009b5e:	62a3      	str	r3, [r4, #40]	; 0x28
 8009b60:	4b04      	ldr	r3, [pc, #16]	; (8009b74 <std+0x40>)
 8009b62:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009b64:	4b04      	ldr	r3, [pc, #16]	; (8009b78 <std+0x44>)
 8009b66:	6323      	str	r3, [r4, #48]	; 0x30
 8009b68:	bd10      	pop	{r4, pc}
 8009b6a:	bf00      	nop
 8009b6c:	08009e85 	.word	0x08009e85
 8009b70:	08009ea7 	.word	0x08009ea7
 8009b74:	08009edf 	.word	0x08009edf
 8009b78:	08009f03 	.word	0x08009f03

08009b7c <_cleanup_r>:
 8009b7c:	4901      	ldr	r1, [pc, #4]	; (8009b84 <_cleanup_r+0x8>)
 8009b7e:	f000 b8af 	b.w	8009ce0 <_fwalk_reent>
 8009b82:	bf00      	nop
 8009b84:	08009abd 	.word	0x08009abd

08009b88 <__sfmoreglue>:
 8009b88:	b570      	push	{r4, r5, r6, lr}
 8009b8a:	2568      	movs	r5, #104	; 0x68
 8009b8c:	1e4a      	subs	r2, r1, #1
 8009b8e:	4355      	muls	r5, r2
 8009b90:	460e      	mov	r6, r1
 8009b92:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009b96:	f7ff fa83 	bl	80090a0 <_malloc_r>
 8009b9a:	4604      	mov	r4, r0
 8009b9c:	b140      	cbz	r0, 8009bb0 <__sfmoreglue+0x28>
 8009b9e:	2100      	movs	r1, #0
 8009ba0:	e9c0 1600 	strd	r1, r6, [r0]
 8009ba4:	300c      	adds	r0, #12
 8009ba6:	60a0      	str	r0, [r4, #8]
 8009ba8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009bac:	f7fb fde4 	bl	8005778 <memset>
 8009bb0:	4620      	mov	r0, r4
 8009bb2:	bd70      	pop	{r4, r5, r6, pc}

08009bb4 <__sfp_lock_acquire>:
 8009bb4:	4801      	ldr	r0, [pc, #4]	; (8009bbc <__sfp_lock_acquire+0x8>)
 8009bb6:	f000 b8b3 	b.w	8009d20 <__retarget_lock_acquire_recursive>
 8009bba:	bf00      	nop
 8009bbc:	20000930 	.word	0x20000930

08009bc0 <__sfp_lock_release>:
 8009bc0:	4801      	ldr	r0, [pc, #4]	; (8009bc8 <__sfp_lock_release+0x8>)
 8009bc2:	f000 b8ae 	b.w	8009d22 <__retarget_lock_release_recursive>
 8009bc6:	bf00      	nop
 8009bc8:	20000930 	.word	0x20000930

08009bcc <__sinit_lock_acquire>:
 8009bcc:	4801      	ldr	r0, [pc, #4]	; (8009bd4 <__sinit_lock_acquire+0x8>)
 8009bce:	f000 b8a7 	b.w	8009d20 <__retarget_lock_acquire_recursive>
 8009bd2:	bf00      	nop
 8009bd4:	2000092b 	.word	0x2000092b

08009bd8 <__sinit_lock_release>:
 8009bd8:	4801      	ldr	r0, [pc, #4]	; (8009be0 <__sinit_lock_release+0x8>)
 8009bda:	f000 b8a2 	b.w	8009d22 <__retarget_lock_release_recursive>
 8009bde:	bf00      	nop
 8009be0:	2000092b 	.word	0x2000092b

08009be4 <__sinit>:
 8009be4:	b510      	push	{r4, lr}
 8009be6:	4604      	mov	r4, r0
 8009be8:	f7ff fff0 	bl	8009bcc <__sinit_lock_acquire>
 8009bec:	69a3      	ldr	r3, [r4, #24]
 8009bee:	b11b      	cbz	r3, 8009bf8 <__sinit+0x14>
 8009bf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009bf4:	f7ff bff0 	b.w	8009bd8 <__sinit_lock_release>
 8009bf8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009bfc:	6523      	str	r3, [r4, #80]	; 0x50
 8009bfe:	4b13      	ldr	r3, [pc, #76]	; (8009c4c <__sinit+0x68>)
 8009c00:	4a13      	ldr	r2, [pc, #76]	; (8009c50 <__sinit+0x6c>)
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	62a2      	str	r2, [r4, #40]	; 0x28
 8009c06:	42a3      	cmp	r3, r4
 8009c08:	bf08      	it	eq
 8009c0a:	2301      	moveq	r3, #1
 8009c0c:	4620      	mov	r0, r4
 8009c0e:	bf08      	it	eq
 8009c10:	61a3      	streq	r3, [r4, #24]
 8009c12:	f000 f81f 	bl	8009c54 <__sfp>
 8009c16:	6060      	str	r0, [r4, #4]
 8009c18:	4620      	mov	r0, r4
 8009c1a:	f000 f81b 	bl	8009c54 <__sfp>
 8009c1e:	60a0      	str	r0, [r4, #8]
 8009c20:	4620      	mov	r0, r4
 8009c22:	f000 f817 	bl	8009c54 <__sfp>
 8009c26:	2200      	movs	r2, #0
 8009c28:	2104      	movs	r1, #4
 8009c2a:	60e0      	str	r0, [r4, #12]
 8009c2c:	6860      	ldr	r0, [r4, #4]
 8009c2e:	f7ff ff81 	bl	8009b34 <std>
 8009c32:	2201      	movs	r2, #1
 8009c34:	2109      	movs	r1, #9
 8009c36:	68a0      	ldr	r0, [r4, #8]
 8009c38:	f7ff ff7c 	bl	8009b34 <std>
 8009c3c:	2202      	movs	r2, #2
 8009c3e:	2112      	movs	r1, #18
 8009c40:	68e0      	ldr	r0, [r4, #12]
 8009c42:	f7ff ff77 	bl	8009b34 <std>
 8009c46:	2301      	movs	r3, #1
 8009c48:	61a3      	str	r3, [r4, #24]
 8009c4a:	e7d1      	b.n	8009bf0 <__sinit+0xc>
 8009c4c:	0800b49c 	.word	0x0800b49c
 8009c50:	08009b7d 	.word	0x08009b7d

08009c54 <__sfp>:
 8009c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c56:	4607      	mov	r7, r0
 8009c58:	f7ff ffac 	bl	8009bb4 <__sfp_lock_acquire>
 8009c5c:	4b1e      	ldr	r3, [pc, #120]	; (8009cd8 <__sfp+0x84>)
 8009c5e:	681e      	ldr	r6, [r3, #0]
 8009c60:	69b3      	ldr	r3, [r6, #24]
 8009c62:	b913      	cbnz	r3, 8009c6a <__sfp+0x16>
 8009c64:	4630      	mov	r0, r6
 8009c66:	f7ff ffbd 	bl	8009be4 <__sinit>
 8009c6a:	3648      	adds	r6, #72	; 0x48
 8009c6c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009c70:	3b01      	subs	r3, #1
 8009c72:	d503      	bpl.n	8009c7c <__sfp+0x28>
 8009c74:	6833      	ldr	r3, [r6, #0]
 8009c76:	b30b      	cbz	r3, 8009cbc <__sfp+0x68>
 8009c78:	6836      	ldr	r6, [r6, #0]
 8009c7a:	e7f7      	b.n	8009c6c <__sfp+0x18>
 8009c7c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009c80:	b9d5      	cbnz	r5, 8009cb8 <__sfp+0x64>
 8009c82:	4b16      	ldr	r3, [pc, #88]	; (8009cdc <__sfp+0x88>)
 8009c84:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009c88:	60e3      	str	r3, [r4, #12]
 8009c8a:	6665      	str	r5, [r4, #100]	; 0x64
 8009c8c:	f000 f847 	bl	8009d1e <__retarget_lock_init_recursive>
 8009c90:	f7ff ff96 	bl	8009bc0 <__sfp_lock_release>
 8009c94:	2208      	movs	r2, #8
 8009c96:	4629      	mov	r1, r5
 8009c98:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009c9c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009ca0:	6025      	str	r5, [r4, #0]
 8009ca2:	61a5      	str	r5, [r4, #24]
 8009ca4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009ca8:	f7fb fd66 	bl	8005778 <memset>
 8009cac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009cb0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009cb4:	4620      	mov	r0, r4
 8009cb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cb8:	3468      	adds	r4, #104	; 0x68
 8009cba:	e7d9      	b.n	8009c70 <__sfp+0x1c>
 8009cbc:	2104      	movs	r1, #4
 8009cbe:	4638      	mov	r0, r7
 8009cc0:	f7ff ff62 	bl	8009b88 <__sfmoreglue>
 8009cc4:	4604      	mov	r4, r0
 8009cc6:	6030      	str	r0, [r6, #0]
 8009cc8:	2800      	cmp	r0, #0
 8009cca:	d1d5      	bne.n	8009c78 <__sfp+0x24>
 8009ccc:	f7ff ff78 	bl	8009bc0 <__sfp_lock_release>
 8009cd0:	230c      	movs	r3, #12
 8009cd2:	603b      	str	r3, [r7, #0]
 8009cd4:	e7ee      	b.n	8009cb4 <__sfp+0x60>
 8009cd6:	bf00      	nop
 8009cd8:	0800b49c 	.word	0x0800b49c
 8009cdc:	ffff0001 	.word	0xffff0001

08009ce0 <_fwalk_reent>:
 8009ce0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ce4:	4606      	mov	r6, r0
 8009ce6:	4688      	mov	r8, r1
 8009ce8:	2700      	movs	r7, #0
 8009cea:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009cee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009cf2:	f1b9 0901 	subs.w	r9, r9, #1
 8009cf6:	d505      	bpl.n	8009d04 <_fwalk_reent+0x24>
 8009cf8:	6824      	ldr	r4, [r4, #0]
 8009cfa:	2c00      	cmp	r4, #0
 8009cfc:	d1f7      	bne.n	8009cee <_fwalk_reent+0xe>
 8009cfe:	4638      	mov	r0, r7
 8009d00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d04:	89ab      	ldrh	r3, [r5, #12]
 8009d06:	2b01      	cmp	r3, #1
 8009d08:	d907      	bls.n	8009d1a <_fwalk_reent+0x3a>
 8009d0a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009d0e:	3301      	adds	r3, #1
 8009d10:	d003      	beq.n	8009d1a <_fwalk_reent+0x3a>
 8009d12:	4629      	mov	r1, r5
 8009d14:	4630      	mov	r0, r6
 8009d16:	47c0      	blx	r8
 8009d18:	4307      	orrs	r7, r0
 8009d1a:	3568      	adds	r5, #104	; 0x68
 8009d1c:	e7e9      	b.n	8009cf2 <_fwalk_reent+0x12>

08009d1e <__retarget_lock_init_recursive>:
 8009d1e:	4770      	bx	lr

08009d20 <__retarget_lock_acquire_recursive>:
 8009d20:	4770      	bx	lr

08009d22 <__retarget_lock_release_recursive>:
 8009d22:	4770      	bx	lr

08009d24 <__swhatbuf_r>:
 8009d24:	b570      	push	{r4, r5, r6, lr}
 8009d26:	460e      	mov	r6, r1
 8009d28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d2c:	4614      	mov	r4, r2
 8009d2e:	2900      	cmp	r1, #0
 8009d30:	461d      	mov	r5, r3
 8009d32:	b096      	sub	sp, #88	; 0x58
 8009d34:	da07      	bge.n	8009d46 <__swhatbuf_r+0x22>
 8009d36:	2300      	movs	r3, #0
 8009d38:	602b      	str	r3, [r5, #0]
 8009d3a:	89b3      	ldrh	r3, [r6, #12]
 8009d3c:	061a      	lsls	r2, r3, #24
 8009d3e:	d410      	bmi.n	8009d62 <__swhatbuf_r+0x3e>
 8009d40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d44:	e00e      	b.n	8009d64 <__swhatbuf_r+0x40>
 8009d46:	466a      	mov	r2, sp
 8009d48:	f000 f902 	bl	8009f50 <_fstat_r>
 8009d4c:	2800      	cmp	r0, #0
 8009d4e:	dbf2      	blt.n	8009d36 <__swhatbuf_r+0x12>
 8009d50:	9a01      	ldr	r2, [sp, #4]
 8009d52:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009d56:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009d5a:	425a      	negs	r2, r3
 8009d5c:	415a      	adcs	r2, r3
 8009d5e:	602a      	str	r2, [r5, #0]
 8009d60:	e7ee      	b.n	8009d40 <__swhatbuf_r+0x1c>
 8009d62:	2340      	movs	r3, #64	; 0x40
 8009d64:	2000      	movs	r0, #0
 8009d66:	6023      	str	r3, [r4, #0]
 8009d68:	b016      	add	sp, #88	; 0x58
 8009d6a:	bd70      	pop	{r4, r5, r6, pc}

08009d6c <__smakebuf_r>:
 8009d6c:	898b      	ldrh	r3, [r1, #12]
 8009d6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009d70:	079d      	lsls	r5, r3, #30
 8009d72:	4606      	mov	r6, r0
 8009d74:	460c      	mov	r4, r1
 8009d76:	d507      	bpl.n	8009d88 <__smakebuf_r+0x1c>
 8009d78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009d7c:	6023      	str	r3, [r4, #0]
 8009d7e:	6123      	str	r3, [r4, #16]
 8009d80:	2301      	movs	r3, #1
 8009d82:	6163      	str	r3, [r4, #20]
 8009d84:	b002      	add	sp, #8
 8009d86:	bd70      	pop	{r4, r5, r6, pc}
 8009d88:	466a      	mov	r2, sp
 8009d8a:	ab01      	add	r3, sp, #4
 8009d8c:	f7ff ffca 	bl	8009d24 <__swhatbuf_r>
 8009d90:	9900      	ldr	r1, [sp, #0]
 8009d92:	4605      	mov	r5, r0
 8009d94:	4630      	mov	r0, r6
 8009d96:	f7ff f983 	bl	80090a0 <_malloc_r>
 8009d9a:	b948      	cbnz	r0, 8009db0 <__smakebuf_r+0x44>
 8009d9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009da0:	059a      	lsls	r2, r3, #22
 8009da2:	d4ef      	bmi.n	8009d84 <__smakebuf_r+0x18>
 8009da4:	f023 0303 	bic.w	r3, r3, #3
 8009da8:	f043 0302 	orr.w	r3, r3, #2
 8009dac:	81a3      	strh	r3, [r4, #12]
 8009dae:	e7e3      	b.n	8009d78 <__smakebuf_r+0xc>
 8009db0:	4b0d      	ldr	r3, [pc, #52]	; (8009de8 <__smakebuf_r+0x7c>)
 8009db2:	62b3      	str	r3, [r6, #40]	; 0x28
 8009db4:	89a3      	ldrh	r3, [r4, #12]
 8009db6:	6020      	str	r0, [r4, #0]
 8009db8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009dbc:	81a3      	strh	r3, [r4, #12]
 8009dbe:	9b00      	ldr	r3, [sp, #0]
 8009dc0:	6120      	str	r0, [r4, #16]
 8009dc2:	6163      	str	r3, [r4, #20]
 8009dc4:	9b01      	ldr	r3, [sp, #4]
 8009dc6:	b15b      	cbz	r3, 8009de0 <__smakebuf_r+0x74>
 8009dc8:	4630      	mov	r0, r6
 8009dca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009dce:	f000 f8d1 	bl	8009f74 <_isatty_r>
 8009dd2:	b128      	cbz	r0, 8009de0 <__smakebuf_r+0x74>
 8009dd4:	89a3      	ldrh	r3, [r4, #12]
 8009dd6:	f023 0303 	bic.w	r3, r3, #3
 8009dda:	f043 0301 	orr.w	r3, r3, #1
 8009dde:	81a3      	strh	r3, [r4, #12]
 8009de0:	89a0      	ldrh	r0, [r4, #12]
 8009de2:	4305      	orrs	r5, r0
 8009de4:	81a5      	strh	r5, [r4, #12]
 8009de6:	e7cd      	b.n	8009d84 <__smakebuf_r+0x18>
 8009de8:	08009b7d 	.word	0x08009b7d

08009dec <_malloc_usable_size_r>:
 8009dec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009df0:	1f18      	subs	r0, r3, #4
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	bfbc      	itt	lt
 8009df6:	580b      	ldrlt	r3, [r1, r0]
 8009df8:	18c0      	addlt	r0, r0, r3
 8009dfa:	4770      	bx	lr

08009dfc <_raise_r>:
 8009dfc:	291f      	cmp	r1, #31
 8009dfe:	b538      	push	{r3, r4, r5, lr}
 8009e00:	4604      	mov	r4, r0
 8009e02:	460d      	mov	r5, r1
 8009e04:	d904      	bls.n	8009e10 <_raise_r+0x14>
 8009e06:	2316      	movs	r3, #22
 8009e08:	6003      	str	r3, [r0, #0]
 8009e0a:	f04f 30ff 	mov.w	r0, #4294967295
 8009e0e:	bd38      	pop	{r3, r4, r5, pc}
 8009e10:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009e12:	b112      	cbz	r2, 8009e1a <_raise_r+0x1e>
 8009e14:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009e18:	b94b      	cbnz	r3, 8009e2e <_raise_r+0x32>
 8009e1a:	4620      	mov	r0, r4
 8009e1c:	f000 f830 	bl	8009e80 <_getpid_r>
 8009e20:	462a      	mov	r2, r5
 8009e22:	4601      	mov	r1, r0
 8009e24:	4620      	mov	r0, r4
 8009e26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e2a:	f000 b817 	b.w	8009e5c <_kill_r>
 8009e2e:	2b01      	cmp	r3, #1
 8009e30:	d00a      	beq.n	8009e48 <_raise_r+0x4c>
 8009e32:	1c59      	adds	r1, r3, #1
 8009e34:	d103      	bne.n	8009e3e <_raise_r+0x42>
 8009e36:	2316      	movs	r3, #22
 8009e38:	6003      	str	r3, [r0, #0]
 8009e3a:	2001      	movs	r0, #1
 8009e3c:	e7e7      	b.n	8009e0e <_raise_r+0x12>
 8009e3e:	2400      	movs	r4, #0
 8009e40:	4628      	mov	r0, r5
 8009e42:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009e46:	4798      	blx	r3
 8009e48:	2000      	movs	r0, #0
 8009e4a:	e7e0      	b.n	8009e0e <_raise_r+0x12>

08009e4c <raise>:
 8009e4c:	4b02      	ldr	r3, [pc, #8]	; (8009e58 <raise+0xc>)
 8009e4e:	4601      	mov	r1, r0
 8009e50:	6818      	ldr	r0, [r3, #0]
 8009e52:	f7ff bfd3 	b.w	8009dfc <_raise_r>
 8009e56:	bf00      	nop
 8009e58:	20000028 	.word	0x20000028

08009e5c <_kill_r>:
 8009e5c:	b538      	push	{r3, r4, r5, lr}
 8009e5e:	2300      	movs	r3, #0
 8009e60:	4d06      	ldr	r5, [pc, #24]	; (8009e7c <_kill_r+0x20>)
 8009e62:	4604      	mov	r4, r0
 8009e64:	4608      	mov	r0, r1
 8009e66:	4611      	mov	r1, r2
 8009e68:	602b      	str	r3, [r5, #0]
 8009e6a:	f7f9 fa58 	bl	800331e <_kill>
 8009e6e:	1c43      	adds	r3, r0, #1
 8009e70:	d102      	bne.n	8009e78 <_kill_r+0x1c>
 8009e72:	682b      	ldr	r3, [r5, #0]
 8009e74:	b103      	cbz	r3, 8009e78 <_kill_r+0x1c>
 8009e76:	6023      	str	r3, [r4, #0]
 8009e78:	bd38      	pop	{r3, r4, r5, pc}
 8009e7a:	bf00      	nop
 8009e7c:	20000924 	.word	0x20000924

08009e80 <_getpid_r>:
 8009e80:	f7f9 ba46 	b.w	8003310 <_getpid>

08009e84 <__sread>:
 8009e84:	b510      	push	{r4, lr}
 8009e86:	460c      	mov	r4, r1
 8009e88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e8c:	f000 f894 	bl	8009fb8 <_read_r>
 8009e90:	2800      	cmp	r0, #0
 8009e92:	bfab      	itete	ge
 8009e94:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009e96:	89a3      	ldrhlt	r3, [r4, #12]
 8009e98:	181b      	addge	r3, r3, r0
 8009e9a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009e9e:	bfac      	ite	ge
 8009ea0:	6563      	strge	r3, [r4, #84]	; 0x54
 8009ea2:	81a3      	strhlt	r3, [r4, #12]
 8009ea4:	bd10      	pop	{r4, pc}

08009ea6 <__swrite>:
 8009ea6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009eaa:	461f      	mov	r7, r3
 8009eac:	898b      	ldrh	r3, [r1, #12]
 8009eae:	4605      	mov	r5, r0
 8009eb0:	05db      	lsls	r3, r3, #23
 8009eb2:	460c      	mov	r4, r1
 8009eb4:	4616      	mov	r6, r2
 8009eb6:	d505      	bpl.n	8009ec4 <__swrite+0x1e>
 8009eb8:	2302      	movs	r3, #2
 8009eba:	2200      	movs	r2, #0
 8009ebc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ec0:	f000 f868 	bl	8009f94 <_lseek_r>
 8009ec4:	89a3      	ldrh	r3, [r4, #12]
 8009ec6:	4632      	mov	r2, r6
 8009ec8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009ecc:	81a3      	strh	r3, [r4, #12]
 8009ece:	4628      	mov	r0, r5
 8009ed0:	463b      	mov	r3, r7
 8009ed2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ed6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009eda:	f000 b817 	b.w	8009f0c <_write_r>

08009ede <__sseek>:
 8009ede:	b510      	push	{r4, lr}
 8009ee0:	460c      	mov	r4, r1
 8009ee2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ee6:	f000 f855 	bl	8009f94 <_lseek_r>
 8009eea:	1c43      	adds	r3, r0, #1
 8009eec:	89a3      	ldrh	r3, [r4, #12]
 8009eee:	bf15      	itete	ne
 8009ef0:	6560      	strne	r0, [r4, #84]	; 0x54
 8009ef2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009ef6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009efa:	81a3      	strheq	r3, [r4, #12]
 8009efc:	bf18      	it	ne
 8009efe:	81a3      	strhne	r3, [r4, #12]
 8009f00:	bd10      	pop	{r4, pc}

08009f02 <__sclose>:
 8009f02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f06:	f000 b813 	b.w	8009f30 <_close_r>
	...

08009f0c <_write_r>:
 8009f0c:	b538      	push	{r3, r4, r5, lr}
 8009f0e:	4604      	mov	r4, r0
 8009f10:	4608      	mov	r0, r1
 8009f12:	4611      	mov	r1, r2
 8009f14:	2200      	movs	r2, #0
 8009f16:	4d05      	ldr	r5, [pc, #20]	; (8009f2c <_write_r+0x20>)
 8009f18:	602a      	str	r2, [r5, #0]
 8009f1a:	461a      	mov	r2, r3
 8009f1c:	f7f9 fa36 	bl	800338c <_write>
 8009f20:	1c43      	adds	r3, r0, #1
 8009f22:	d102      	bne.n	8009f2a <_write_r+0x1e>
 8009f24:	682b      	ldr	r3, [r5, #0]
 8009f26:	b103      	cbz	r3, 8009f2a <_write_r+0x1e>
 8009f28:	6023      	str	r3, [r4, #0]
 8009f2a:	bd38      	pop	{r3, r4, r5, pc}
 8009f2c:	20000924 	.word	0x20000924

08009f30 <_close_r>:
 8009f30:	b538      	push	{r3, r4, r5, lr}
 8009f32:	2300      	movs	r3, #0
 8009f34:	4d05      	ldr	r5, [pc, #20]	; (8009f4c <_close_r+0x1c>)
 8009f36:	4604      	mov	r4, r0
 8009f38:	4608      	mov	r0, r1
 8009f3a:	602b      	str	r3, [r5, #0]
 8009f3c:	f7f9 fa42 	bl	80033c4 <_close>
 8009f40:	1c43      	adds	r3, r0, #1
 8009f42:	d102      	bne.n	8009f4a <_close_r+0x1a>
 8009f44:	682b      	ldr	r3, [r5, #0]
 8009f46:	b103      	cbz	r3, 8009f4a <_close_r+0x1a>
 8009f48:	6023      	str	r3, [r4, #0]
 8009f4a:	bd38      	pop	{r3, r4, r5, pc}
 8009f4c:	20000924 	.word	0x20000924

08009f50 <_fstat_r>:
 8009f50:	b538      	push	{r3, r4, r5, lr}
 8009f52:	2300      	movs	r3, #0
 8009f54:	4d06      	ldr	r5, [pc, #24]	; (8009f70 <_fstat_r+0x20>)
 8009f56:	4604      	mov	r4, r0
 8009f58:	4608      	mov	r0, r1
 8009f5a:	4611      	mov	r1, r2
 8009f5c:	602b      	str	r3, [r5, #0]
 8009f5e:	f7f9 fa3c 	bl	80033da <_fstat>
 8009f62:	1c43      	adds	r3, r0, #1
 8009f64:	d102      	bne.n	8009f6c <_fstat_r+0x1c>
 8009f66:	682b      	ldr	r3, [r5, #0]
 8009f68:	b103      	cbz	r3, 8009f6c <_fstat_r+0x1c>
 8009f6a:	6023      	str	r3, [r4, #0]
 8009f6c:	bd38      	pop	{r3, r4, r5, pc}
 8009f6e:	bf00      	nop
 8009f70:	20000924 	.word	0x20000924

08009f74 <_isatty_r>:
 8009f74:	b538      	push	{r3, r4, r5, lr}
 8009f76:	2300      	movs	r3, #0
 8009f78:	4d05      	ldr	r5, [pc, #20]	; (8009f90 <_isatty_r+0x1c>)
 8009f7a:	4604      	mov	r4, r0
 8009f7c:	4608      	mov	r0, r1
 8009f7e:	602b      	str	r3, [r5, #0]
 8009f80:	f7f9 fa3a 	bl	80033f8 <_isatty>
 8009f84:	1c43      	adds	r3, r0, #1
 8009f86:	d102      	bne.n	8009f8e <_isatty_r+0x1a>
 8009f88:	682b      	ldr	r3, [r5, #0]
 8009f8a:	b103      	cbz	r3, 8009f8e <_isatty_r+0x1a>
 8009f8c:	6023      	str	r3, [r4, #0]
 8009f8e:	bd38      	pop	{r3, r4, r5, pc}
 8009f90:	20000924 	.word	0x20000924

08009f94 <_lseek_r>:
 8009f94:	b538      	push	{r3, r4, r5, lr}
 8009f96:	4604      	mov	r4, r0
 8009f98:	4608      	mov	r0, r1
 8009f9a:	4611      	mov	r1, r2
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	4d05      	ldr	r5, [pc, #20]	; (8009fb4 <_lseek_r+0x20>)
 8009fa0:	602a      	str	r2, [r5, #0]
 8009fa2:	461a      	mov	r2, r3
 8009fa4:	f7f9 fa32 	bl	800340c <_lseek>
 8009fa8:	1c43      	adds	r3, r0, #1
 8009faa:	d102      	bne.n	8009fb2 <_lseek_r+0x1e>
 8009fac:	682b      	ldr	r3, [r5, #0]
 8009fae:	b103      	cbz	r3, 8009fb2 <_lseek_r+0x1e>
 8009fb0:	6023      	str	r3, [r4, #0]
 8009fb2:	bd38      	pop	{r3, r4, r5, pc}
 8009fb4:	20000924 	.word	0x20000924

08009fb8 <_read_r>:
 8009fb8:	b538      	push	{r3, r4, r5, lr}
 8009fba:	4604      	mov	r4, r0
 8009fbc:	4608      	mov	r0, r1
 8009fbe:	4611      	mov	r1, r2
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	4d05      	ldr	r5, [pc, #20]	; (8009fd8 <_read_r+0x20>)
 8009fc4:	602a      	str	r2, [r5, #0]
 8009fc6:	461a      	mov	r2, r3
 8009fc8:	f7f9 f9c3 	bl	8003352 <_read>
 8009fcc:	1c43      	adds	r3, r0, #1
 8009fce:	d102      	bne.n	8009fd6 <_read_r+0x1e>
 8009fd0:	682b      	ldr	r3, [r5, #0]
 8009fd2:	b103      	cbz	r3, 8009fd6 <_read_r+0x1e>
 8009fd4:	6023      	str	r3, [r4, #0]
 8009fd6:	bd38      	pop	{r3, r4, r5, pc}
 8009fd8:	20000924 	.word	0x20000924

08009fdc <cos>:
 8009fdc:	b530      	push	{r4, r5, lr}
 8009fde:	4a1e      	ldr	r2, [pc, #120]	; (800a058 <cos+0x7c>)
 8009fe0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009fe4:	4293      	cmp	r3, r2
 8009fe6:	b087      	sub	sp, #28
 8009fe8:	dc04      	bgt.n	8009ff4 <cos+0x18>
 8009fea:	2200      	movs	r2, #0
 8009fec:	2300      	movs	r3, #0
 8009fee:	f000 fb47 	bl	800a680 <__kernel_cos>
 8009ff2:	e006      	b.n	800a002 <cos+0x26>
 8009ff4:	4a19      	ldr	r2, [pc, #100]	; (800a05c <cos+0x80>)
 8009ff6:	4293      	cmp	r3, r2
 8009ff8:	dd05      	ble.n	800a006 <cos+0x2a>
 8009ffa:	4602      	mov	r2, r0
 8009ffc:	460b      	mov	r3, r1
 8009ffe:	f7f6 f91f 	bl	8000240 <__aeabi_dsub>
 800a002:	b007      	add	sp, #28
 800a004:	bd30      	pop	{r4, r5, pc}
 800a006:	aa02      	add	r2, sp, #8
 800a008:	f000 f89e 	bl	800a148 <__ieee754_rem_pio2>
 800a00c:	f000 0003 	and.w	r0, r0, #3
 800a010:	2801      	cmp	r0, #1
 800a012:	d007      	beq.n	800a024 <cos+0x48>
 800a014:	2802      	cmp	r0, #2
 800a016:	d00f      	beq.n	800a038 <cos+0x5c>
 800a018:	b9a8      	cbnz	r0, 800a046 <cos+0x6a>
 800a01a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a01e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a022:	e7e4      	b.n	8009fee <cos+0x12>
 800a024:	9000      	str	r0, [sp, #0]
 800a026:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a02a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a02e:	f000 ff2f 	bl	800ae90 <__kernel_sin>
 800a032:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800a036:	e7e4      	b.n	800a002 <cos+0x26>
 800a038:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a03c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a040:	f000 fb1e 	bl	800a680 <__kernel_cos>
 800a044:	e7f5      	b.n	800a032 <cos+0x56>
 800a046:	2301      	movs	r3, #1
 800a048:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a04c:	9300      	str	r3, [sp, #0]
 800a04e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a052:	f000 ff1d 	bl	800ae90 <__kernel_sin>
 800a056:	e7d4      	b.n	800a002 <cos+0x26>
 800a058:	3fe921fb 	.word	0x3fe921fb
 800a05c:	7fefffff 	.word	0x7fefffff

0800a060 <sin>:
 800a060:	b530      	push	{r4, r5, lr}
 800a062:	4a20      	ldr	r2, [pc, #128]	; (800a0e4 <sin+0x84>)
 800a064:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a068:	4293      	cmp	r3, r2
 800a06a:	b087      	sub	sp, #28
 800a06c:	dc06      	bgt.n	800a07c <sin+0x1c>
 800a06e:	2300      	movs	r3, #0
 800a070:	2200      	movs	r2, #0
 800a072:	9300      	str	r3, [sp, #0]
 800a074:	2300      	movs	r3, #0
 800a076:	f000 ff0b 	bl	800ae90 <__kernel_sin>
 800a07a:	e006      	b.n	800a08a <sin+0x2a>
 800a07c:	4a1a      	ldr	r2, [pc, #104]	; (800a0e8 <sin+0x88>)
 800a07e:	4293      	cmp	r3, r2
 800a080:	dd05      	ble.n	800a08e <sin+0x2e>
 800a082:	4602      	mov	r2, r0
 800a084:	460b      	mov	r3, r1
 800a086:	f7f6 f8db 	bl	8000240 <__aeabi_dsub>
 800a08a:	b007      	add	sp, #28
 800a08c:	bd30      	pop	{r4, r5, pc}
 800a08e:	aa02      	add	r2, sp, #8
 800a090:	f000 f85a 	bl	800a148 <__ieee754_rem_pio2>
 800a094:	f000 0003 	and.w	r0, r0, #3
 800a098:	2801      	cmp	r0, #1
 800a09a:	d009      	beq.n	800a0b0 <sin+0x50>
 800a09c:	2802      	cmp	r0, #2
 800a09e:	d00e      	beq.n	800a0be <sin+0x5e>
 800a0a0:	b9c0      	cbnz	r0, 800a0d4 <sin+0x74>
 800a0a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a0a6:	2301      	movs	r3, #1
 800a0a8:	9300      	str	r3, [sp, #0]
 800a0aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a0ae:	e7e2      	b.n	800a076 <sin+0x16>
 800a0b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a0b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a0b8:	f000 fae2 	bl	800a680 <__kernel_cos>
 800a0bc:	e7e5      	b.n	800a08a <sin+0x2a>
 800a0be:	2301      	movs	r3, #1
 800a0c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a0c4:	9300      	str	r3, [sp, #0]
 800a0c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a0ca:	f000 fee1 	bl	800ae90 <__kernel_sin>
 800a0ce:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800a0d2:	e7da      	b.n	800a08a <sin+0x2a>
 800a0d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a0d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a0dc:	f000 fad0 	bl	800a680 <__kernel_cos>
 800a0e0:	e7f5      	b.n	800a0ce <sin+0x6e>
 800a0e2:	bf00      	nop
 800a0e4:	3fe921fb 	.word	0x3fe921fb
 800a0e8:	7fefffff 	.word	0x7fefffff

0800a0ec <sqrt>:
 800a0ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0ee:	4606      	mov	r6, r0
 800a0f0:	460f      	mov	r7, r1
 800a0f2:	f000 fa19 	bl	800a528 <__ieee754_sqrt>
 800a0f6:	4b12      	ldr	r3, [pc, #72]	; (800a140 <sqrt+0x54>)
 800a0f8:	4604      	mov	r4, r0
 800a0fa:	f993 3000 	ldrsb.w	r3, [r3]
 800a0fe:	460d      	mov	r5, r1
 800a100:	3301      	adds	r3, #1
 800a102:	d019      	beq.n	800a138 <sqrt+0x4c>
 800a104:	4632      	mov	r2, r6
 800a106:	463b      	mov	r3, r7
 800a108:	4630      	mov	r0, r6
 800a10a:	4639      	mov	r1, r7
 800a10c:	f7f6 fcea 	bl	8000ae4 <__aeabi_dcmpun>
 800a110:	b990      	cbnz	r0, 800a138 <sqrt+0x4c>
 800a112:	2200      	movs	r2, #0
 800a114:	2300      	movs	r3, #0
 800a116:	4630      	mov	r0, r6
 800a118:	4639      	mov	r1, r7
 800a11a:	f7f6 fcbb 	bl	8000a94 <__aeabi_dcmplt>
 800a11e:	b158      	cbz	r0, 800a138 <sqrt+0x4c>
 800a120:	f7fb fb00 	bl	8005724 <__errno>
 800a124:	2321      	movs	r3, #33	; 0x21
 800a126:	2200      	movs	r2, #0
 800a128:	6003      	str	r3, [r0, #0]
 800a12a:	2300      	movs	r3, #0
 800a12c:	4610      	mov	r0, r2
 800a12e:	4619      	mov	r1, r3
 800a130:	f7f6 fb68 	bl	8000804 <__aeabi_ddiv>
 800a134:	4604      	mov	r4, r0
 800a136:	460d      	mov	r5, r1
 800a138:	4620      	mov	r0, r4
 800a13a:	4629      	mov	r1, r5
 800a13c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a13e:	bf00      	nop
 800a140:	200001fc 	.word	0x200001fc
 800a144:	00000000 	.word	0x00000000

0800a148 <__ieee754_rem_pio2>:
 800a148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a14c:	4614      	mov	r4, r2
 800a14e:	4ac4      	ldr	r2, [pc, #784]	; (800a460 <__ieee754_rem_pio2+0x318>)
 800a150:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800a154:	b08d      	sub	sp, #52	; 0x34
 800a156:	4592      	cmp	sl, r2
 800a158:	9104      	str	r1, [sp, #16]
 800a15a:	dc07      	bgt.n	800a16c <__ieee754_rem_pio2+0x24>
 800a15c:	2200      	movs	r2, #0
 800a15e:	2300      	movs	r3, #0
 800a160:	e9c4 0100 	strd	r0, r1, [r4]
 800a164:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800a168:	2500      	movs	r5, #0
 800a16a:	e024      	b.n	800a1b6 <__ieee754_rem_pio2+0x6e>
 800a16c:	4abd      	ldr	r2, [pc, #756]	; (800a464 <__ieee754_rem_pio2+0x31c>)
 800a16e:	4592      	cmp	sl, r2
 800a170:	dc72      	bgt.n	800a258 <__ieee754_rem_pio2+0x110>
 800a172:	9b04      	ldr	r3, [sp, #16]
 800a174:	4dbc      	ldr	r5, [pc, #752]	; (800a468 <__ieee754_rem_pio2+0x320>)
 800a176:	2b00      	cmp	r3, #0
 800a178:	a3ab      	add	r3, pc, #684	; (adr r3, 800a428 <__ieee754_rem_pio2+0x2e0>)
 800a17a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a17e:	dd36      	ble.n	800a1ee <__ieee754_rem_pio2+0xa6>
 800a180:	f7f6 f85e 	bl	8000240 <__aeabi_dsub>
 800a184:	45aa      	cmp	sl, r5
 800a186:	4606      	mov	r6, r0
 800a188:	460f      	mov	r7, r1
 800a18a:	d018      	beq.n	800a1be <__ieee754_rem_pio2+0x76>
 800a18c:	a3a8      	add	r3, pc, #672	; (adr r3, 800a430 <__ieee754_rem_pio2+0x2e8>)
 800a18e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a192:	f7f6 f855 	bl	8000240 <__aeabi_dsub>
 800a196:	4602      	mov	r2, r0
 800a198:	460b      	mov	r3, r1
 800a19a:	4630      	mov	r0, r6
 800a19c:	e9c4 2300 	strd	r2, r3, [r4]
 800a1a0:	4639      	mov	r1, r7
 800a1a2:	f7f6 f84d 	bl	8000240 <__aeabi_dsub>
 800a1a6:	a3a2      	add	r3, pc, #648	; (adr r3, 800a430 <__ieee754_rem_pio2+0x2e8>)
 800a1a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ac:	f7f6 f848 	bl	8000240 <__aeabi_dsub>
 800a1b0:	2501      	movs	r5, #1
 800a1b2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a1b6:	4628      	mov	r0, r5
 800a1b8:	b00d      	add	sp, #52	; 0x34
 800a1ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1be:	a39e      	add	r3, pc, #632	; (adr r3, 800a438 <__ieee754_rem_pio2+0x2f0>)
 800a1c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1c4:	f7f6 f83c 	bl	8000240 <__aeabi_dsub>
 800a1c8:	a39d      	add	r3, pc, #628	; (adr r3, 800a440 <__ieee754_rem_pio2+0x2f8>)
 800a1ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ce:	4606      	mov	r6, r0
 800a1d0:	460f      	mov	r7, r1
 800a1d2:	f7f6 f835 	bl	8000240 <__aeabi_dsub>
 800a1d6:	4602      	mov	r2, r0
 800a1d8:	460b      	mov	r3, r1
 800a1da:	4630      	mov	r0, r6
 800a1dc:	e9c4 2300 	strd	r2, r3, [r4]
 800a1e0:	4639      	mov	r1, r7
 800a1e2:	f7f6 f82d 	bl	8000240 <__aeabi_dsub>
 800a1e6:	a396      	add	r3, pc, #600	; (adr r3, 800a440 <__ieee754_rem_pio2+0x2f8>)
 800a1e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ec:	e7de      	b.n	800a1ac <__ieee754_rem_pio2+0x64>
 800a1ee:	f7f6 f829 	bl	8000244 <__adddf3>
 800a1f2:	45aa      	cmp	sl, r5
 800a1f4:	4606      	mov	r6, r0
 800a1f6:	460f      	mov	r7, r1
 800a1f8:	d016      	beq.n	800a228 <__ieee754_rem_pio2+0xe0>
 800a1fa:	a38d      	add	r3, pc, #564	; (adr r3, 800a430 <__ieee754_rem_pio2+0x2e8>)
 800a1fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a200:	f7f6 f820 	bl	8000244 <__adddf3>
 800a204:	4602      	mov	r2, r0
 800a206:	460b      	mov	r3, r1
 800a208:	4630      	mov	r0, r6
 800a20a:	e9c4 2300 	strd	r2, r3, [r4]
 800a20e:	4639      	mov	r1, r7
 800a210:	f7f6 f816 	bl	8000240 <__aeabi_dsub>
 800a214:	a386      	add	r3, pc, #536	; (adr r3, 800a430 <__ieee754_rem_pio2+0x2e8>)
 800a216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a21a:	f7f6 f813 	bl	8000244 <__adddf3>
 800a21e:	f04f 35ff 	mov.w	r5, #4294967295
 800a222:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a226:	e7c6      	b.n	800a1b6 <__ieee754_rem_pio2+0x6e>
 800a228:	a383      	add	r3, pc, #524	; (adr r3, 800a438 <__ieee754_rem_pio2+0x2f0>)
 800a22a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a22e:	f7f6 f809 	bl	8000244 <__adddf3>
 800a232:	a383      	add	r3, pc, #524	; (adr r3, 800a440 <__ieee754_rem_pio2+0x2f8>)
 800a234:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a238:	4606      	mov	r6, r0
 800a23a:	460f      	mov	r7, r1
 800a23c:	f7f6 f802 	bl	8000244 <__adddf3>
 800a240:	4602      	mov	r2, r0
 800a242:	460b      	mov	r3, r1
 800a244:	4630      	mov	r0, r6
 800a246:	e9c4 2300 	strd	r2, r3, [r4]
 800a24a:	4639      	mov	r1, r7
 800a24c:	f7f5 fff8 	bl	8000240 <__aeabi_dsub>
 800a250:	a37b      	add	r3, pc, #492	; (adr r3, 800a440 <__ieee754_rem_pio2+0x2f8>)
 800a252:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a256:	e7e0      	b.n	800a21a <__ieee754_rem_pio2+0xd2>
 800a258:	4a84      	ldr	r2, [pc, #528]	; (800a46c <__ieee754_rem_pio2+0x324>)
 800a25a:	4592      	cmp	sl, r2
 800a25c:	f300 80d5 	bgt.w	800a40a <__ieee754_rem_pio2+0x2c2>
 800a260:	f000 fecc 	bl	800affc <fabs>
 800a264:	a378      	add	r3, pc, #480	; (adr r3, 800a448 <__ieee754_rem_pio2+0x300>)
 800a266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a26a:	4606      	mov	r6, r0
 800a26c:	460f      	mov	r7, r1
 800a26e:	f7f6 f99f 	bl	80005b0 <__aeabi_dmul>
 800a272:	2200      	movs	r2, #0
 800a274:	4b7e      	ldr	r3, [pc, #504]	; (800a470 <__ieee754_rem_pio2+0x328>)
 800a276:	f7f5 ffe5 	bl	8000244 <__adddf3>
 800a27a:	f7f6 fc49 	bl	8000b10 <__aeabi_d2iz>
 800a27e:	4605      	mov	r5, r0
 800a280:	f7f6 f92c 	bl	80004dc <__aeabi_i2d>
 800a284:	4602      	mov	r2, r0
 800a286:	460b      	mov	r3, r1
 800a288:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a28c:	a366      	add	r3, pc, #408	; (adr r3, 800a428 <__ieee754_rem_pio2+0x2e0>)
 800a28e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a292:	f7f6 f98d 	bl	80005b0 <__aeabi_dmul>
 800a296:	4602      	mov	r2, r0
 800a298:	460b      	mov	r3, r1
 800a29a:	4630      	mov	r0, r6
 800a29c:	4639      	mov	r1, r7
 800a29e:	f7f5 ffcf 	bl	8000240 <__aeabi_dsub>
 800a2a2:	a363      	add	r3, pc, #396	; (adr r3, 800a430 <__ieee754_rem_pio2+0x2e8>)
 800a2a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2a8:	4680      	mov	r8, r0
 800a2aa:	4689      	mov	r9, r1
 800a2ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2b0:	f7f6 f97e 	bl	80005b0 <__aeabi_dmul>
 800a2b4:	2d1f      	cmp	r5, #31
 800a2b6:	4606      	mov	r6, r0
 800a2b8:	460f      	mov	r7, r1
 800a2ba:	dc0e      	bgt.n	800a2da <__ieee754_rem_pio2+0x192>
 800a2bc:	4b6d      	ldr	r3, [pc, #436]	; (800a474 <__ieee754_rem_pio2+0x32c>)
 800a2be:	1e6a      	subs	r2, r5, #1
 800a2c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2c4:	4553      	cmp	r3, sl
 800a2c6:	d008      	beq.n	800a2da <__ieee754_rem_pio2+0x192>
 800a2c8:	4632      	mov	r2, r6
 800a2ca:	463b      	mov	r3, r7
 800a2cc:	4640      	mov	r0, r8
 800a2ce:	4649      	mov	r1, r9
 800a2d0:	f7f5 ffb6 	bl	8000240 <__aeabi_dsub>
 800a2d4:	e9c4 0100 	strd	r0, r1, [r4]
 800a2d8:	e013      	b.n	800a302 <__ieee754_rem_pio2+0x1ba>
 800a2da:	463b      	mov	r3, r7
 800a2dc:	4632      	mov	r2, r6
 800a2de:	4640      	mov	r0, r8
 800a2e0:	4649      	mov	r1, r9
 800a2e2:	f7f5 ffad 	bl	8000240 <__aeabi_dsub>
 800a2e6:	ea4f 532a 	mov.w	r3, sl, asr #20
 800a2ea:	9305      	str	r3, [sp, #20]
 800a2ec:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a2f0:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 800a2f4:	f1ba 0f10 	cmp.w	sl, #16
 800a2f8:	dc1f      	bgt.n	800a33a <__ieee754_rem_pio2+0x1f2>
 800a2fa:	4602      	mov	r2, r0
 800a2fc:	460b      	mov	r3, r1
 800a2fe:	e9c4 2300 	strd	r2, r3, [r4]
 800a302:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800a306:	4640      	mov	r0, r8
 800a308:	4653      	mov	r3, sl
 800a30a:	4649      	mov	r1, r9
 800a30c:	f7f5 ff98 	bl	8000240 <__aeabi_dsub>
 800a310:	4632      	mov	r2, r6
 800a312:	463b      	mov	r3, r7
 800a314:	f7f5 ff94 	bl	8000240 <__aeabi_dsub>
 800a318:	460b      	mov	r3, r1
 800a31a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a31e:	9904      	ldr	r1, [sp, #16]
 800a320:	4602      	mov	r2, r0
 800a322:	2900      	cmp	r1, #0
 800a324:	f6bf af47 	bge.w	800a1b6 <__ieee754_rem_pio2+0x6e>
 800a328:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 800a32c:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800a330:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a334:	60e3      	str	r3, [r4, #12]
 800a336:	426d      	negs	r5, r5
 800a338:	e73d      	b.n	800a1b6 <__ieee754_rem_pio2+0x6e>
 800a33a:	a33f      	add	r3, pc, #252	; (adr r3, 800a438 <__ieee754_rem_pio2+0x2f0>)
 800a33c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a340:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a344:	f7f6 f934 	bl	80005b0 <__aeabi_dmul>
 800a348:	4606      	mov	r6, r0
 800a34a:	460f      	mov	r7, r1
 800a34c:	4602      	mov	r2, r0
 800a34e:	460b      	mov	r3, r1
 800a350:	4640      	mov	r0, r8
 800a352:	4649      	mov	r1, r9
 800a354:	f7f5 ff74 	bl	8000240 <__aeabi_dsub>
 800a358:	4602      	mov	r2, r0
 800a35a:	460b      	mov	r3, r1
 800a35c:	4682      	mov	sl, r0
 800a35e:	468b      	mov	fp, r1
 800a360:	4640      	mov	r0, r8
 800a362:	4649      	mov	r1, r9
 800a364:	f7f5 ff6c 	bl	8000240 <__aeabi_dsub>
 800a368:	4632      	mov	r2, r6
 800a36a:	463b      	mov	r3, r7
 800a36c:	f7f5 ff68 	bl	8000240 <__aeabi_dsub>
 800a370:	a333      	add	r3, pc, #204	; (adr r3, 800a440 <__ieee754_rem_pio2+0x2f8>)
 800a372:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a376:	4606      	mov	r6, r0
 800a378:	460f      	mov	r7, r1
 800a37a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a37e:	f7f6 f917 	bl	80005b0 <__aeabi_dmul>
 800a382:	4632      	mov	r2, r6
 800a384:	463b      	mov	r3, r7
 800a386:	f7f5 ff5b 	bl	8000240 <__aeabi_dsub>
 800a38a:	4602      	mov	r2, r0
 800a38c:	460b      	mov	r3, r1
 800a38e:	4606      	mov	r6, r0
 800a390:	460f      	mov	r7, r1
 800a392:	4650      	mov	r0, sl
 800a394:	4659      	mov	r1, fp
 800a396:	f7f5 ff53 	bl	8000240 <__aeabi_dsub>
 800a39a:	9a05      	ldr	r2, [sp, #20]
 800a39c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a3a0:	1ad3      	subs	r3, r2, r3
 800a3a2:	2b31      	cmp	r3, #49	; 0x31
 800a3a4:	dc06      	bgt.n	800a3b4 <__ieee754_rem_pio2+0x26c>
 800a3a6:	4602      	mov	r2, r0
 800a3a8:	460b      	mov	r3, r1
 800a3aa:	46d0      	mov	r8, sl
 800a3ac:	46d9      	mov	r9, fp
 800a3ae:	e9c4 2300 	strd	r2, r3, [r4]
 800a3b2:	e7a6      	b.n	800a302 <__ieee754_rem_pio2+0x1ba>
 800a3b4:	a326      	add	r3, pc, #152	; (adr r3, 800a450 <__ieee754_rem_pio2+0x308>)
 800a3b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a3be:	f7f6 f8f7 	bl	80005b0 <__aeabi_dmul>
 800a3c2:	4606      	mov	r6, r0
 800a3c4:	460f      	mov	r7, r1
 800a3c6:	4602      	mov	r2, r0
 800a3c8:	460b      	mov	r3, r1
 800a3ca:	4650      	mov	r0, sl
 800a3cc:	4659      	mov	r1, fp
 800a3ce:	f7f5 ff37 	bl	8000240 <__aeabi_dsub>
 800a3d2:	4602      	mov	r2, r0
 800a3d4:	460b      	mov	r3, r1
 800a3d6:	4680      	mov	r8, r0
 800a3d8:	4689      	mov	r9, r1
 800a3da:	4650      	mov	r0, sl
 800a3dc:	4659      	mov	r1, fp
 800a3de:	f7f5 ff2f 	bl	8000240 <__aeabi_dsub>
 800a3e2:	4632      	mov	r2, r6
 800a3e4:	463b      	mov	r3, r7
 800a3e6:	f7f5 ff2b 	bl	8000240 <__aeabi_dsub>
 800a3ea:	a31b      	add	r3, pc, #108	; (adr r3, 800a458 <__ieee754_rem_pio2+0x310>)
 800a3ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3f0:	4606      	mov	r6, r0
 800a3f2:	460f      	mov	r7, r1
 800a3f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a3f8:	f7f6 f8da 	bl	80005b0 <__aeabi_dmul>
 800a3fc:	4632      	mov	r2, r6
 800a3fe:	463b      	mov	r3, r7
 800a400:	f7f5 ff1e 	bl	8000240 <__aeabi_dsub>
 800a404:	4606      	mov	r6, r0
 800a406:	460f      	mov	r7, r1
 800a408:	e75e      	b.n	800a2c8 <__ieee754_rem_pio2+0x180>
 800a40a:	4a1b      	ldr	r2, [pc, #108]	; (800a478 <__ieee754_rem_pio2+0x330>)
 800a40c:	4592      	cmp	sl, r2
 800a40e:	dd35      	ble.n	800a47c <__ieee754_rem_pio2+0x334>
 800a410:	4602      	mov	r2, r0
 800a412:	460b      	mov	r3, r1
 800a414:	f7f5 ff14 	bl	8000240 <__aeabi_dsub>
 800a418:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a41c:	e9c4 0100 	strd	r0, r1, [r4]
 800a420:	e6a2      	b.n	800a168 <__ieee754_rem_pio2+0x20>
 800a422:	bf00      	nop
 800a424:	f3af 8000 	nop.w
 800a428:	54400000 	.word	0x54400000
 800a42c:	3ff921fb 	.word	0x3ff921fb
 800a430:	1a626331 	.word	0x1a626331
 800a434:	3dd0b461 	.word	0x3dd0b461
 800a438:	1a600000 	.word	0x1a600000
 800a43c:	3dd0b461 	.word	0x3dd0b461
 800a440:	2e037073 	.word	0x2e037073
 800a444:	3ba3198a 	.word	0x3ba3198a
 800a448:	6dc9c883 	.word	0x6dc9c883
 800a44c:	3fe45f30 	.word	0x3fe45f30
 800a450:	2e000000 	.word	0x2e000000
 800a454:	3ba3198a 	.word	0x3ba3198a
 800a458:	252049c1 	.word	0x252049c1
 800a45c:	397b839a 	.word	0x397b839a
 800a460:	3fe921fb 	.word	0x3fe921fb
 800a464:	4002d97b 	.word	0x4002d97b
 800a468:	3ff921fb 	.word	0x3ff921fb
 800a46c:	413921fb 	.word	0x413921fb
 800a470:	3fe00000 	.word	0x3fe00000
 800a474:	0800b954 	.word	0x0800b954
 800a478:	7fefffff 	.word	0x7fefffff
 800a47c:	ea4f 552a 	mov.w	r5, sl, asr #20
 800a480:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800a484:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 800a488:	460f      	mov	r7, r1
 800a48a:	4606      	mov	r6, r0
 800a48c:	f7f6 fb40 	bl	8000b10 <__aeabi_d2iz>
 800a490:	f7f6 f824 	bl	80004dc <__aeabi_i2d>
 800a494:	4602      	mov	r2, r0
 800a496:	460b      	mov	r3, r1
 800a498:	4630      	mov	r0, r6
 800a49a:	4639      	mov	r1, r7
 800a49c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a4a0:	f7f5 fece 	bl	8000240 <__aeabi_dsub>
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	4b1e      	ldr	r3, [pc, #120]	; (800a520 <__ieee754_rem_pio2+0x3d8>)
 800a4a8:	f7f6 f882 	bl	80005b0 <__aeabi_dmul>
 800a4ac:	460f      	mov	r7, r1
 800a4ae:	4606      	mov	r6, r0
 800a4b0:	f7f6 fb2e 	bl	8000b10 <__aeabi_d2iz>
 800a4b4:	f7f6 f812 	bl	80004dc <__aeabi_i2d>
 800a4b8:	4602      	mov	r2, r0
 800a4ba:	460b      	mov	r3, r1
 800a4bc:	4630      	mov	r0, r6
 800a4be:	4639      	mov	r1, r7
 800a4c0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a4c4:	f7f5 febc 	bl	8000240 <__aeabi_dsub>
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	4b15      	ldr	r3, [pc, #84]	; (800a520 <__ieee754_rem_pio2+0x3d8>)
 800a4cc:	f7f6 f870 	bl	80005b0 <__aeabi_dmul>
 800a4d0:	f04f 0803 	mov.w	r8, #3
 800a4d4:	2600      	movs	r6, #0
 800a4d6:	2700      	movs	r7, #0
 800a4d8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a4dc:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 800a4e0:	4632      	mov	r2, r6
 800a4e2:	e879 0102 	ldrd	r0, r1, [r9], #-8
 800a4e6:	463b      	mov	r3, r7
 800a4e8:	46c2      	mov	sl, r8
 800a4ea:	f108 38ff 	add.w	r8, r8, #4294967295
 800a4ee:	f7f6 fac7 	bl	8000a80 <__aeabi_dcmpeq>
 800a4f2:	2800      	cmp	r0, #0
 800a4f4:	d1f4      	bne.n	800a4e0 <__ieee754_rem_pio2+0x398>
 800a4f6:	4b0b      	ldr	r3, [pc, #44]	; (800a524 <__ieee754_rem_pio2+0x3dc>)
 800a4f8:	462a      	mov	r2, r5
 800a4fa:	9301      	str	r3, [sp, #4]
 800a4fc:	2302      	movs	r3, #2
 800a4fe:	4621      	mov	r1, r4
 800a500:	9300      	str	r3, [sp, #0]
 800a502:	a806      	add	r0, sp, #24
 800a504:	4653      	mov	r3, sl
 800a506:	f000 f979 	bl	800a7fc <__kernel_rem_pio2>
 800a50a:	9b04      	ldr	r3, [sp, #16]
 800a50c:	4605      	mov	r5, r0
 800a50e:	2b00      	cmp	r3, #0
 800a510:	f6bf ae51 	bge.w	800a1b6 <__ieee754_rem_pio2+0x6e>
 800a514:	6863      	ldr	r3, [r4, #4]
 800a516:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a51a:	6063      	str	r3, [r4, #4]
 800a51c:	68e3      	ldr	r3, [r4, #12]
 800a51e:	e707      	b.n	800a330 <__ieee754_rem_pio2+0x1e8>
 800a520:	41700000 	.word	0x41700000
 800a524:	0800b9d4 	.word	0x0800b9d4

0800a528 <__ieee754_sqrt>:
 800a528:	f8df c150 	ldr.w	ip, [pc, #336]	; 800a67c <__ieee754_sqrt+0x154>
 800a52c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a530:	ea3c 0c01 	bics.w	ip, ip, r1
 800a534:	460b      	mov	r3, r1
 800a536:	4606      	mov	r6, r0
 800a538:	460d      	mov	r5, r1
 800a53a:	460a      	mov	r2, r1
 800a53c:	4607      	mov	r7, r0
 800a53e:	4604      	mov	r4, r0
 800a540:	d10e      	bne.n	800a560 <__ieee754_sqrt+0x38>
 800a542:	4602      	mov	r2, r0
 800a544:	f7f6 f834 	bl	80005b0 <__aeabi_dmul>
 800a548:	4602      	mov	r2, r0
 800a54a:	460b      	mov	r3, r1
 800a54c:	4630      	mov	r0, r6
 800a54e:	4629      	mov	r1, r5
 800a550:	f7f5 fe78 	bl	8000244 <__adddf3>
 800a554:	4606      	mov	r6, r0
 800a556:	460d      	mov	r5, r1
 800a558:	4630      	mov	r0, r6
 800a55a:	4629      	mov	r1, r5
 800a55c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a560:	2900      	cmp	r1, #0
 800a562:	dc0d      	bgt.n	800a580 <__ieee754_sqrt+0x58>
 800a564:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800a568:	ea5c 0707 	orrs.w	r7, ip, r7
 800a56c:	d0f4      	beq.n	800a558 <__ieee754_sqrt+0x30>
 800a56e:	b139      	cbz	r1, 800a580 <__ieee754_sqrt+0x58>
 800a570:	4602      	mov	r2, r0
 800a572:	f7f5 fe65 	bl	8000240 <__aeabi_dsub>
 800a576:	4602      	mov	r2, r0
 800a578:	460b      	mov	r3, r1
 800a57a:	f7f6 f943 	bl	8000804 <__aeabi_ddiv>
 800a57e:	e7e9      	b.n	800a554 <__ieee754_sqrt+0x2c>
 800a580:	1512      	asrs	r2, r2, #20
 800a582:	d074      	beq.n	800a66e <__ieee754_sqrt+0x146>
 800a584:	2000      	movs	r0, #0
 800a586:	07d5      	lsls	r5, r2, #31
 800a588:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a58c:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 800a590:	bf5e      	ittt	pl
 800a592:	0fe3      	lsrpl	r3, r4, #31
 800a594:	0064      	lslpl	r4, r4, #1
 800a596:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 800a59a:	0fe3      	lsrs	r3, r4, #31
 800a59c:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800a5a0:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800a5a4:	2516      	movs	r5, #22
 800a5a6:	4601      	mov	r1, r0
 800a5a8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800a5ac:	1076      	asrs	r6, r6, #1
 800a5ae:	0064      	lsls	r4, r4, #1
 800a5b0:	188f      	adds	r7, r1, r2
 800a5b2:	429f      	cmp	r7, r3
 800a5b4:	bfde      	ittt	le
 800a5b6:	1bdb      	suble	r3, r3, r7
 800a5b8:	18b9      	addle	r1, r7, r2
 800a5ba:	1880      	addle	r0, r0, r2
 800a5bc:	005b      	lsls	r3, r3, #1
 800a5be:	3d01      	subs	r5, #1
 800a5c0:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800a5c4:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800a5c8:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800a5cc:	d1f0      	bne.n	800a5b0 <__ieee754_sqrt+0x88>
 800a5ce:	462a      	mov	r2, r5
 800a5d0:	f04f 0e20 	mov.w	lr, #32
 800a5d4:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800a5d8:	428b      	cmp	r3, r1
 800a5da:	eb07 0c05 	add.w	ip, r7, r5
 800a5de:	dc02      	bgt.n	800a5e6 <__ieee754_sqrt+0xbe>
 800a5e0:	d113      	bne.n	800a60a <__ieee754_sqrt+0xe2>
 800a5e2:	45a4      	cmp	ip, r4
 800a5e4:	d811      	bhi.n	800a60a <__ieee754_sqrt+0xe2>
 800a5e6:	f1bc 0f00 	cmp.w	ip, #0
 800a5ea:	eb0c 0507 	add.w	r5, ip, r7
 800a5ee:	da43      	bge.n	800a678 <__ieee754_sqrt+0x150>
 800a5f0:	2d00      	cmp	r5, #0
 800a5f2:	db41      	blt.n	800a678 <__ieee754_sqrt+0x150>
 800a5f4:	f101 0801 	add.w	r8, r1, #1
 800a5f8:	1a5b      	subs	r3, r3, r1
 800a5fa:	4641      	mov	r1, r8
 800a5fc:	45a4      	cmp	ip, r4
 800a5fe:	bf88      	it	hi
 800a600:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800a604:	eba4 040c 	sub.w	r4, r4, ip
 800a608:	443a      	add	r2, r7
 800a60a:	005b      	lsls	r3, r3, #1
 800a60c:	f1be 0e01 	subs.w	lr, lr, #1
 800a610:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800a614:	ea4f 0757 	mov.w	r7, r7, lsr #1
 800a618:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800a61c:	d1dc      	bne.n	800a5d8 <__ieee754_sqrt+0xb0>
 800a61e:	4323      	orrs	r3, r4
 800a620:	d006      	beq.n	800a630 <__ieee754_sqrt+0x108>
 800a622:	1c54      	adds	r4, r2, #1
 800a624:	bf0b      	itete	eq
 800a626:	4672      	moveq	r2, lr
 800a628:	3201      	addne	r2, #1
 800a62a:	3001      	addeq	r0, #1
 800a62c:	f022 0201 	bicne.w	r2, r2, #1
 800a630:	1043      	asrs	r3, r0, #1
 800a632:	07c1      	lsls	r1, r0, #31
 800a634:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800a638:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a63c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a640:	bf48      	it	mi
 800a642:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800a646:	4610      	mov	r0, r2
 800a648:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 800a64c:	e782      	b.n	800a554 <__ieee754_sqrt+0x2c>
 800a64e:	0ae3      	lsrs	r3, r4, #11
 800a650:	3915      	subs	r1, #21
 800a652:	0564      	lsls	r4, r4, #21
 800a654:	2b00      	cmp	r3, #0
 800a656:	d0fa      	beq.n	800a64e <__ieee754_sqrt+0x126>
 800a658:	02de      	lsls	r6, r3, #11
 800a65a:	d50a      	bpl.n	800a672 <__ieee754_sqrt+0x14a>
 800a65c:	f1c2 0020 	rsb	r0, r2, #32
 800a660:	fa24 f000 	lsr.w	r0, r4, r0
 800a664:	1e55      	subs	r5, r2, #1
 800a666:	4094      	lsls	r4, r2
 800a668:	4303      	orrs	r3, r0
 800a66a:	1b4a      	subs	r2, r1, r5
 800a66c:	e78a      	b.n	800a584 <__ieee754_sqrt+0x5c>
 800a66e:	4611      	mov	r1, r2
 800a670:	e7f0      	b.n	800a654 <__ieee754_sqrt+0x12c>
 800a672:	005b      	lsls	r3, r3, #1
 800a674:	3201      	adds	r2, #1
 800a676:	e7ef      	b.n	800a658 <__ieee754_sqrt+0x130>
 800a678:	4688      	mov	r8, r1
 800a67a:	e7bd      	b.n	800a5f8 <__ieee754_sqrt+0xd0>
 800a67c:	7ff00000 	.word	0x7ff00000

0800a680 <__kernel_cos>:
 800a680:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a684:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800a688:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800a68c:	4680      	mov	r8, r0
 800a68e:	460f      	mov	r7, r1
 800a690:	e9cd 2300 	strd	r2, r3, [sp]
 800a694:	da04      	bge.n	800a6a0 <__kernel_cos+0x20>
 800a696:	f7f6 fa3b 	bl	8000b10 <__aeabi_d2iz>
 800a69a:	2800      	cmp	r0, #0
 800a69c:	f000 8086 	beq.w	800a7ac <__kernel_cos+0x12c>
 800a6a0:	4642      	mov	r2, r8
 800a6a2:	463b      	mov	r3, r7
 800a6a4:	4640      	mov	r0, r8
 800a6a6:	4639      	mov	r1, r7
 800a6a8:	f7f5 ff82 	bl	80005b0 <__aeabi_dmul>
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	4b4e      	ldr	r3, [pc, #312]	; (800a7e8 <__kernel_cos+0x168>)
 800a6b0:	4604      	mov	r4, r0
 800a6b2:	460d      	mov	r5, r1
 800a6b4:	f7f5 ff7c 	bl	80005b0 <__aeabi_dmul>
 800a6b8:	a33f      	add	r3, pc, #252	; (adr r3, 800a7b8 <__kernel_cos+0x138>)
 800a6ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6be:	4682      	mov	sl, r0
 800a6c0:	468b      	mov	fp, r1
 800a6c2:	4620      	mov	r0, r4
 800a6c4:	4629      	mov	r1, r5
 800a6c6:	f7f5 ff73 	bl	80005b0 <__aeabi_dmul>
 800a6ca:	a33d      	add	r3, pc, #244	; (adr r3, 800a7c0 <__kernel_cos+0x140>)
 800a6cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6d0:	f7f5 fdb8 	bl	8000244 <__adddf3>
 800a6d4:	4622      	mov	r2, r4
 800a6d6:	462b      	mov	r3, r5
 800a6d8:	f7f5 ff6a 	bl	80005b0 <__aeabi_dmul>
 800a6dc:	a33a      	add	r3, pc, #232	; (adr r3, 800a7c8 <__kernel_cos+0x148>)
 800a6de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6e2:	f7f5 fdad 	bl	8000240 <__aeabi_dsub>
 800a6e6:	4622      	mov	r2, r4
 800a6e8:	462b      	mov	r3, r5
 800a6ea:	f7f5 ff61 	bl	80005b0 <__aeabi_dmul>
 800a6ee:	a338      	add	r3, pc, #224	; (adr r3, 800a7d0 <__kernel_cos+0x150>)
 800a6f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6f4:	f7f5 fda6 	bl	8000244 <__adddf3>
 800a6f8:	4622      	mov	r2, r4
 800a6fa:	462b      	mov	r3, r5
 800a6fc:	f7f5 ff58 	bl	80005b0 <__aeabi_dmul>
 800a700:	a335      	add	r3, pc, #212	; (adr r3, 800a7d8 <__kernel_cos+0x158>)
 800a702:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a706:	f7f5 fd9b 	bl	8000240 <__aeabi_dsub>
 800a70a:	4622      	mov	r2, r4
 800a70c:	462b      	mov	r3, r5
 800a70e:	f7f5 ff4f 	bl	80005b0 <__aeabi_dmul>
 800a712:	a333      	add	r3, pc, #204	; (adr r3, 800a7e0 <__kernel_cos+0x160>)
 800a714:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a718:	f7f5 fd94 	bl	8000244 <__adddf3>
 800a71c:	4622      	mov	r2, r4
 800a71e:	462b      	mov	r3, r5
 800a720:	f7f5 ff46 	bl	80005b0 <__aeabi_dmul>
 800a724:	4622      	mov	r2, r4
 800a726:	462b      	mov	r3, r5
 800a728:	f7f5 ff42 	bl	80005b0 <__aeabi_dmul>
 800a72c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a730:	4604      	mov	r4, r0
 800a732:	460d      	mov	r5, r1
 800a734:	4640      	mov	r0, r8
 800a736:	4639      	mov	r1, r7
 800a738:	f7f5 ff3a 	bl	80005b0 <__aeabi_dmul>
 800a73c:	460b      	mov	r3, r1
 800a73e:	4602      	mov	r2, r0
 800a740:	4629      	mov	r1, r5
 800a742:	4620      	mov	r0, r4
 800a744:	f7f5 fd7c 	bl	8000240 <__aeabi_dsub>
 800a748:	4b28      	ldr	r3, [pc, #160]	; (800a7ec <__kernel_cos+0x16c>)
 800a74a:	4680      	mov	r8, r0
 800a74c:	429e      	cmp	r6, r3
 800a74e:	4689      	mov	r9, r1
 800a750:	dc0e      	bgt.n	800a770 <__kernel_cos+0xf0>
 800a752:	4602      	mov	r2, r0
 800a754:	460b      	mov	r3, r1
 800a756:	4650      	mov	r0, sl
 800a758:	4659      	mov	r1, fp
 800a75a:	f7f5 fd71 	bl	8000240 <__aeabi_dsub>
 800a75e:	4602      	mov	r2, r0
 800a760:	2000      	movs	r0, #0
 800a762:	460b      	mov	r3, r1
 800a764:	4922      	ldr	r1, [pc, #136]	; (800a7f0 <__kernel_cos+0x170>)
 800a766:	f7f5 fd6b 	bl	8000240 <__aeabi_dsub>
 800a76a:	b003      	add	sp, #12
 800a76c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a770:	2400      	movs	r4, #0
 800a772:	4b20      	ldr	r3, [pc, #128]	; (800a7f4 <__kernel_cos+0x174>)
 800a774:	4622      	mov	r2, r4
 800a776:	429e      	cmp	r6, r3
 800a778:	bfcc      	ite	gt
 800a77a:	4d1f      	ldrgt	r5, [pc, #124]	; (800a7f8 <__kernel_cos+0x178>)
 800a77c:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800a780:	462b      	mov	r3, r5
 800a782:	2000      	movs	r0, #0
 800a784:	491a      	ldr	r1, [pc, #104]	; (800a7f0 <__kernel_cos+0x170>)
 800a786:	f7f5 fd5b 	bl	8000240 <__aeabi_dsub>
 800a78a:	4622      	mov	r2, r4
 800a78c:	4606      	mov	r6, r0
 800a78e:	460f      	mov	r7, r1
 800a790:	462b      	mov	r3, r5
 800a792:	4650      	mov	r0, sl
 800a794:	4659      	mov	r1, fp
 800a796:	f7f5 fd53 	bl	8000240 <__aeabi_dsub>
 800a79a:	4642      	mov	r2, r8
 800a79c:	464b      	mov	r3, r9
 800a79e:	f7f5 fd4f 	bl	8000240 <__aeabi_dsub>
 800a7a2:	4602      	mov	r2, r0
 800a7a4:	460b      	mov	r3, r1
 800a7a6:	4630      	mov	r0, r6
 800a7a8:	4639      	mov	r1, r7
 800a7aa:	e7dc      	b.n	800a766 <__kernel_cos+0xe6>
 800a7ac:	2000      	movs	r0, #0
 800a7ae:	4910      	ldr	r1, [pc, #64]	; (800a7f0 <__kernel_cos+0x170>)
 800a7b0:	e7db      	b.n	800a76a <__kernel_cos+0xea>
 800a7b2:	bf00      	nop
 800a7b4:	f3af 8000 	nop.w
 800a7b8:	be8838d4 	.word	0xbe8838d4
 800a7bc:	bda8fae9 	.word	0xbda8fae9
 800a7c0:	bdb4b1c4 	.word	0xbdb4b1c4
 800a7c4:	3e21ee9e 	.word	0x3e21ee9e
 800a7c8:	809c52ad 	.word	0x809c52ad
 800a7cc:	3e927e4f 	.word	0x3e927e4f
 800a7d0:	19cb1590 	.word	0x19cb1590
 800a7d4:	3efa01a0 	.word	0x3efa01a0
 800a7d8:	16c15177 	.word	0x16c15177
 800a7dc:	3f56c16c 	.word	0x3f56c16c
 800a7e0:	5555554c 	.word	0x5555554c
 800a7e4:	3fa55555 	.word	0x3fa55555
 800a7e8:	3fe00000 	.word	0x3fe00000
 800a7ec:	3fd33332 	.word	0x3fd33332
 800a7f0:	3ff00000 	.word	0x3ff00000
 800a7f4:	3fe90000 	.word	0x3fe90000
 800a7f8:	3fd20000 	.word	0x3fd20000

0800a7fc <__kernel_rem_pio2>:
 800a7fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a800:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800a804:	9308      	str	r3, [sp, #32]
 800a806:	9101      	str	r1, [sp, #4]
 800a808:	4bc0      	ldr	r3, [pc, #768]	; (800ab0c <__kernel_rem_pio2+0x310>)
 800a80a:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800a80c:	f112 0f14 	cmn.w	r2, #20
 800a810:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a814:	bfa8      	it	ge
 800a816:	1ed4      	subge	r4, r2, #3
 800a818:	9304      	str	r3, [sp, #16]
 800a81a:	9b08      	ldr	r3, [sp, #32]
 800a81c:	bfb8      	it	lt
 800a81e:	2400      	movlt	r4, #0
 800a820:	f103 33ff 	add.w	r3, r3, #4294967295
 800a824:	9306      	str	r3, [sp, #24]
 800a826:	bfa4      	itt	ge
 800a828:	2318      	movge	r3, #24
 800a82a:	fb94 f4f3 	sdivge	r4, r4, r3
 800a82e:	f06f 0317 	mvn.w	r3, #23
 800a832:	fb04 3303 	mla	r3, r4, r3, r3
 800a836:	eb03 0a02 	add.w	sl, r3, r2
 800a83a:	9a06      	ldr	r2, [sp, #24]
 800a83c:	9b04      	ldr	r3, [sp, #16]
 800a83e:	1aa7      	subs	r7, r4, r2
 800a840:	eb03 0802 	add.w	r8, r3, r2
 800a844:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800a846:	2500      	movs	r5, #0
 800a848:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800a84c:	2200      	movs	r2, #0
 800a84e:	2300      	movs	r3, #0
 800a850:	9009      	str	r0, [sp, #36]	; 0x24
 800a852:	ae20      	add	r6, sp, #128	; 0x80
 800a854:	4545      	cmp	r5, r8
 800a856:	dd19      	ble.n	800a88c <__kernel_rem_pio2+0x90>
 800a858:	9b08      	ldr	r3, [sp, #32]
 800a85a:	aa20      	add	r2, sp, #128	; 0x80
 800a85c:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800a860:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800a864:	f1c3 0301 	rsb	r3, r3, #1
 800a868:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800a86c:	9307      	str	r3, [sp, #28]
 800a86e:	9b07      	ldr	r3, [sp, #28]
 800a870:	9a04      	ldr	r2, [sp, #16]
 800a872:	4443      	add	r3, r8
 800a874:	429a      	cmp	r2, r3
 800a876:	db35      	blt.n	800a8e4 <__kernel_rem_pio2+0xe8>
 800a878:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a87a:	2200      	movs	r2, #0
 800a87c:	f1a3 0908 	sub.w	r9, r3, #8
 800a880:	2300      	movs	r3, #0
 800a882:	462f      	mov	r7, r5
 800a884:	2600      	movs	r6, #0
 800a886:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a88a:	e01f      	b.n	800a8cc <__kernel_rem_pio2+0xd0>
 800a88c:	42ef      	cmn	r7, r5
 800a88e:	d40b      	bmi.n	800a8a8 <__kernel_rem_pio2+0xac>
 800a890:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a894:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a898:	f7f5 fe20 	bl	80004dc <__aeabi_i2d>
 800a89c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a8a0:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a8a4:	3501      	adds	r5, #1
 800a8a6:	e7d5      	b.n	800a854 <__kernel_rem_pio2+0x58>
 800a8a8:	4610      	mov	r0, r2
 800a8aa:	4619      	mov	r1, r3
 800a8ac:	e7f8      	b.n	800a8a0 <__kernel_rem_pio2+0xa4>
 800a8ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a8b2:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800a8b6:	f7f5 fe7b 	bl	80005b0 <__aeabi_dmul>
 800a8ba:	4602      	mov	r2, r0
 800a8bc:	460b      	mov	r3, r1
 800a8be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a8c2:	f7f5 fcbf 	bl	8000244 <__adddf3>
 800a8c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a8ca:	3601      	adds	r6, #1
 800a8cc:	9b06      	ldr	r3, [sp, #24]
 800a8ce:	3f08      	subs	r7, #8
 800a8d0:	429e      	cmp	r6, r3
 800a8d2:	ddec      	ble.n	800a8ae <__kernel_rem_pio2+0xb2>
 800a8d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a8d8:	3508      	adds	r5, #8
 800a8da:	e8eb 2302 	strd	r2, r3, [fp], #8
 800a8de:	f108 0801 	add.w	r8, r8, #1
 800a8e2:	e7c4      	b.n	800a86e <__kernel_rem_pio2+0x72>
 800a8e4:	9b04      	ldr	r3, [sp, #16]
 800a8e6:	aa0c      	add	r2, sp, #48	; 0x30
 800a8e8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a8ec:	930b      	str	r3, [sp, #44]	; 0x2c
 800a8ee:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800a8f0:	9f04      	ldr	r7, [sp, #16]
 800a8f2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a8f6:	930a      	str	r3, [sp, #40]	; 0x28
 800a8f8:	463e      	mov	r6, r7
 800a8fa:	ab98      	add	r3, sp, #608	; 0x260
 800a8fc:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800a900:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a904:	f8cd b008 	str.w	fp, [sp, #8]
 800a908:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 800a90c:	2e00      	cmp	r6, #0
 800a90e:	dc71      	bgt.n	800a9f4 <__kernel_rem_pio2+0x1f8>
 800a910:	4652      	mov	r2, sl
 800a912:	4620      	mov	r0, r4
 800a914:	4629      	mov	r1, r5
 800a916:	f000 fbf7 	bl	800b108 <scalbn>
 800a91a:	2200      	movs	r2, #0
 800a91c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800a920:	4604      	mov	r4, r0
 800a922:	460d      	mov	r5, r1
 800a924:	f7f5 fe44 	bl	80005b0 <__aeabi_dmul>
 800a928:	f000 fb6e 	bl	800b008 <floor>
 800a92c:	2200      	movs	r2, #0
 800a92e:	4b78      	ldr	r3, [pc, #480]	; (800ab10 <__kernel_rem_pio2+0x314>)
 800a930:	f7f5 fe3e 	bl	80005b0 <__aeabi_dmul>
 800a934:	4602      	mov	r2, r0
 800a936:	460b      	mov	r3, r1
 800a938:	4620      	mov	r0, r4
 800a93a:	4629      	mov	r1, r5
 800a93c:	f7f5 fc80 	bl	8000240 <__aeabi_dsub>
 800a940:	460d      	mov	r5, r1
 800a942:	4604      	mov	r4, r0
 800a944:	f7f6 f8e4 	bl	8000b10 <__aeabi_d2iz>
 800a948:	9007      	str	r0, [sp, #28]
 800a94a:	f7f5 fdc7 	bl	80004dc <__aeabi_i2d>
 800a94e:	4602      	mov	r2, r0
 800a950:	460b      	mov	r3, r1
 800a952:	4620      	mov	r0, r4
 800a954:	4629      	mov	r1, r5
 800a956:	f7f5 fc73 	bl	8000240 <__aeabi_dsub>
 800a95a:	f1ba 0f00 	cmp.w	sl, #0
 800a95e:	4680      	mov	r8, r0
 800a960:	4689      	mov	r9, r1
 800a962:	dd70      	ble.n	800aa46 <__kernel_rem_pio2+0x24a>
 800a964:	1e7a      	subs	r2, r7, #1
 800a966:	ab0c      	add	r3, sp, #48	; 0x30
 800a968:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800a96c:	9c07      	ldr	r4, [sp, #28]
 800a96e:	f1ca 0118 	rsb	r1, sl, #24
 800a972:	fa40 f301 	asr.w	r3, r0, r1
 800a976:	441c      	add	r4, r3
 800a978:	408b      	lsls	r3, r1
 800a97a:	1ac0      	subs	r0, r0, r3
 800a97c:	ab0c      	add	r3, sp, #48	; 0x30
 800a97e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800a982:	f1ca 0317 	rsb	r3, sl, #23
 800a986:	9407      	str	r4, [sp, #28]
 800a988:	fa40 f303 	asr.w	r3, r0, r3
 800a98c:	9302      	str	r3, [sp, #8]
 800a98e:	9b02      	ldr	r3, [sp, #8]
 800a990:	2b00      	cmp	r3, #0
 800a992:	dd66      	ble.n	800aa62 <__kernel_rem_pio2+0x266>
 800a994:	2200      	movs	r2, #0
 800a996:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800a99a:	4614      	mov	r4, r2
 800a99c:	9b07      	ldr	r3, [sp, #28]
 800a99e:	3301      	adds	r3, #1
 800a9a0:	9307      	str	r3, [sp, #28]
 800a9a2:	4297      	cmp	r7, r2
 800a9a4:	f300 809f 	bgt.w	800aae6 <__kernel_rem_pio2+0x2ea>
 800a9a8:	f1ba 0f00 	cmp.w	sl, #0
 800a9ac:	dd07      	ble.n	800a9be <__kernel_rem_pio2+0x1c2>
 800a9ae:	f1ba 0f01 	cmp.w	sl, #1
 800a9b2:	f000 80b9 	beq.w	800ab28 <__kernel_rem_pio2+0x32c>
 800a9b6:	f1ba 0f02 	cmp.w	sl, #2
 800a9ba:	f000 80bf 	beq.w	800ab3c <__kernel_rem_pio2+0x340>
 800a9be:	9b02      	ldr	r3, [sp, #8]
 800a9c0:	2b02      	cmp	r3, #2
 800a9c2:	d14e      	bne.n	800aa62 <__kernel_rem_pio2+0x266>
 800a9c4:	4642      	mov	r2, r8
 800a9c6:	464b      	mov	r3, r9
 800a9c8:	2000      	movs	r0, #0
 800a9ca:	4952      	ldr	r1, [pc, #328]	; (800ab14 <__kernel_rem_pio2+0x318>)
 800a9cc:	f7f5 fc38 	bl	8000240 <__aeabi_dsub>
 800a9d0:	4680      	mov	r8, r0
 800a9d2:	4689      	mov	r9, r1
 800a9d4:	2c00      	cmp	r4, #0
 800a9d6:	d044      	beq.n	800aa62 <__kernel_rem_pio2+0x266>
 800a9d8:	4652      	mov	r2, sl
 800a9da:	2000      	movs	r0, #0
 800a9dc:	494d      	ldr	r1, [pc, #308]	; (800ab14 <__kernel_rem_pio2+0x318>)
 800a9de:	f000 fb93 	bl	800b108 <scalbn>
 800a9e2:	4602      	mov	r2, r0
 800a9e4:	460b      	mov	r3, r1
 800a9e6:	4640      	mov	r0, r8
 800a9e8:	4649      	mov	r1, r9
 800a9ea:	f7f5 fc29 	bl	8000240 <__aeabi_dsub>
 800a9ee:	4680      	mov	r8, r0
 800a9f0:	4689      	mov	r9, r1
 800a9f2:	e036      	b.n	800aa62 <__kernel_rem_pio2+0x266>
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	4b48      	ldr	r3, [pc, #288]	; (800ab18 <__kernel_rem_pio2+0x31c>)
 800a9f8:	4620      	mov	r0, r4
 800a9fa:	4629      	mov	r1, r5
 800a9fc:	f7f5 fdd8 	bl	80005b0 <__aeabi_dmul>
 800aa00:	f7f6 f886 	bl	8000b10 <__aeabi_d2iz>
 800aa04:	f7f5 fd6a 	bl	80004dc <__aeabi_i2d>
 800aa08:	2200      	movs	r2, #0
 800aa0a:	4b44      	ldr	r3, [pc, #272]	; (800ab1c <__kernel_rem_pio2+0x320>)
 800aa0c:	4680      	mov	r8, r0
 800aa0e:	4689      	mov	r9, r1
 800aa10:	f7f5 fdce 	bl	80005b0 <__aeabi_dmul>
 800aa14:	4602      	mov	r2, r0
 800aa16:	460b      	mov	r3, r1
 800aa18:	4620      	mov	r0, r4
 800aa1a:	4629      	mov	r1, r5
 800aa1c:	f7f5 fc10 	bl	8000240 <__aeabi_dsub>
 800aa20:	f7f6 f876 	bl	8000b10 <__aeabi_d2iz>
 800aa24:	9b02      	ldr	r3, [sp, #8]
 800aa26:	3e01      	subs	r6, #1
 800aa28:	f843 0b04 	str.w	r0, [r3], #4
 800aa2c:	9302      	str	r3, [sp, #8]
 800aa2e:	ab70      	add	r3, sp, #448	; 0x1c0
 800aa30:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800aa34:	4640      	mov	r0, r8
 800aa36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa3a:	4649      	mov	r1, r9
 800aa3c:	f7f5 fc02 	bl	8000244 <__adddf3>
 800aa40:	4604      	mov	r4, r0
 800aa42:	460d      	mov	r5, r1
 800aa44:	e762      	b.n	800a90c <__kernel_rem_pio2+0x110>
 800aa46:	d105      	bne.n	800aa54 <__kernel_rem_pio2+0x258>
 800aa48:	1e7b      	subs	r3, r7, #1
 800aa4a:	aa0c      	add	r2, sp, #48	; 0x30
 800aa4c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800aa50:	15c3      	asrs	r3, r0, #23
 800aa52:	e79b      	b.n	800a98c <__kernel_rem_pio2+0x190>
 800aa54:	2200      	movs	r2, #0
 800aa56:	4b32      	ldr	r3, [pc, #200]	; (800ab20 <__kernel_rem_pio2+0x324>)
 800aa58:	f7f6 f830 	bl	8000abc <__aeabi_dcmpge>
 800aa5c:	2800      	cmp	r0, #0
 800aa5e:	d13f      	bne.n	800aae0 <__kernel_rem_pio2+0x2e4>
 800aa60:	9002      	str	r0, [sp, #8]
 800aa62:	2200      	movs	r2, #0
 800aa64:	2300      	movs	r3, #0
 800aa66:	4640      	mov	r0, r8
 800aa68:	4649      	mov	r1, r9
 800aa6a:	f7f6 f809 	bl	8000a80 <__aeabi_dcmpeq>
 800aa6e:	2800      	cmp	r0, #0
 800aa70:	f000 80b5 	beq.w	800abde <__kernel_rem_pio2+0x3e2>
 800aa74:	1e7c      	subs	r4, r7, #1
 800aa76:	4623      	mov	r3, r4
 800aa78:	2200      	movs	r2, #0
 800aa7a:	9904      	ldr	r1, [sp, #16]
 800aa7c:	428b      	cmp	r3, r1
 800aa7e:	da64      	bge.n	800ab4a <__kernel_rem_pio2+0x34e>
 800aa80:	2a00      	cmp	r2, #0
 800aa82:	d078      	beq.n	800ab76 <__kernel_rem_pio2+0x37a>
 800aa84:	ab0c      	add	r3, sp, #48	; 0x30
 800aa86:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800aa8a:	f1aa 0a18 	sub.w	sl, sl, #24
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	f000 80a3 	beq.w	800abda <__kernel_rem_pio2+0x3de>
 800aa94:	4652      	mov	r2, sl
 800aa96:	2000      	movs	r0, #0
 800aa98:	491e      	ldr	r1, [pc, #120]	; (800ab14 <__kernel_rem_pio2+0x318>)
 800aa9a:	f000 fb35 	bl	800b108 <scalbn>
 800aa9e:	46a2      	mov	sl, r4
 800aaa0:	4606      	mov	r6, r0
 800aaa2:	460f      	mov	r7, r1
 800aaa4:	f04f 0800 	mov.w	r8, #0
 800aaa8:	00e3      	lsls	r3, r4, #3
 800aaaa:	9306      	str	r3, [sp, #24]
 800aaac:	f8df 9068 	ldr.w	r9, [pc, #104]	; 800ab18 <__kernel_rem_pio2+0x31c>
 800aab0:	ab70      	add	r3, sp, #448	; 0x1c0
 800aab2:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 800aab6:	f1ba 0f00 	cmp.w	sl, #0
 800aaba:	f280 80c6 	bge.w	800ac4a <__kernel_rem_pio2+0x44e>
 800aabe:	4627      	mov	r7, r4
 800aac0:	f04f 0800 	mov.w	r8, #0
 800aac4:	2f00      	cmp	r7, #0
 800aac6:	f2c0 80f3 	blt.w	800acb0 <__kernel_rem_pio2+0x4b4>
 800aaca:	4b16      	ldr	r3, [pc, #88]	; (800ab24 <__kernel_rem_pio2+0x328>)
 800aacc:	f04f 0a00 	mov.w	sl, #0
 800aad0:	461d      	mov	r5, r3
 800aad2:	ab70      	add	r3, sp, #448	; 0x1c0
 800aad4:	f04f 0b00 	mov.w	fp, #0
 800aad8:	2600      	movs	r6, #0
 800aada:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800aade:	e0d9      	b.n	800ac94 <__kernel_rem_pio2+0x498>
 800aae0:	2302      	movs	r3, #2
 800aae2:	9302      	str	r3, [sp, #8]
 800aae4:	e756      	b.n	800a994 <__kernel_rem_pio2+0x198>
 800aae6:	f8db 3000 	ldr.w	r3, [fp]
 800aaea:	b954      	cbnz	r4, 800ab02 <__kernel_rem_pio2+0x306>
 800aaec:	b123      	cbz	r3, 800aaf8 <__kernel_rem_pio2+0x2fc>
 800aaee:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800aaf2:	f8cb 3000 	str.w	r3, [fp]
 800aaf6:	2301      	movs	r3, #1
 800aaf8:	461c      	mov	r4, r3
 800aafa:	3201      	adds	r2, #1
 800aafc:	f10b 0b04 	add.w	fp, fp, #4
 800ab00:	e74f      	b.n	800a9a2 <__kernel_rem_pio2+0x1a6>
 800ab02:	1acb      	subs	r3, r1, r3
 800ab04:	f8cb 3000 	str.w	r3, [fp]
 800ab08:	4623      	mov	r3, r4
 800ab0a:	e7f5      	b.n	800aaf8 <__kernel_rem_pio2+0x2fc>
 800ab0c:	0800bb20 	.word	0x0800bb20
 800ab10:	40200000 	.word	0x40200000
 800ab14:	3ff00000 	.word	0x3ff00000
 800ab18:	3e700000 	.word	0x3e700000
 800ab1c:	41700000 	.word	0x41700000
 800ab20:	3fe00000 	.word	0x3fe00000
 800ab24:	0800bae0 	.word	0x0800bae0
 800ab28:	1e7a      	subs	r2, r7, #1
 800ab2a:	ab0c      	add	r3, sp, #48	; 0x30
 800ab2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab30:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ab34:	a90c      	add	r1, sp, #48	; 0x30
 800ab36:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800ab3a:	e740      	b.n	800a9be <__kernel_rem_pio2+0x1c2>
 800ab3c:	1e7a      	subs	r2, r7, #1
 800ab3e:	ab0c      	add	r3, sp, #48	; 0x30
 800ab40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab44:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ab48:	e7f4      	b.n	800ab34 <__kernel_rem_pio2+0x338>
 800ab4a:	a90c      	add	r1, sp, #48	; 0x30
 800ab4c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800ab50:	3b01      	subs	r3, #1
 800ab52:	430a      	orrs	r2, r1
 800ab54:	e791      	b.n	800aa7a <__kernel_rem_pio2+0x27e>
 800ab56:	3401      	adds	r4, #1
 800ab58:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ab5c:	2a00      	cmp	r2, #0
 800ab5e:	d0fa      	beq.n	800ab56 <__kernel_rem_pio2+0x35a>
 800ab60:	9b08      	ldr	r3, [sp, #32]
 800ab62:	1c7e      	adds	r6, r7, #1
 800ab64:	18fd      	adds	r5, r7, r3
 800ab66:	ab20      	add	r3, sp, #128	; 0x80
 800ab68:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800ab6c:	443c      	add	r4, r7
 800ab6e:	42b4      	cmp	r4, r6
 800ab70:	da04      	bge.n	800ab7c <__kernel_rem_pio2+0x380>
 800ab72:	4627      	mov	r7, r4
 800ab74:	e6c0      	b.n	800a8f8 <__kernel_rem_pio2+0xfc>
 800ab76:	2401      	movs	r4, #1
 800ab78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab7a:	e7ed      	b.n	800ab58 <__kernel_rem_pio2+0x35c>
 800ab7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab7e:	462f      	mov	r7, r5
 800ab80:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800ab84:	f7f5 fcaa 	bl	80004dc <__aeabi_i2d>
 800ab88:	f04f 0b00 	mov.w	fp, #0
 800ab8c:	f04f 0800 	mov.w	r8, #0
 800ab90:	f04f 0900 	mov.w	r9, #0
 800ab94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab96:	e8e7 0102 	strd	r0, r1, [r7], #8
 800ab9a:	3b08      	subs	r3, #8
 800ab9c:	9302      	str	r3, [sp, #8]
 800ab9e:	9b06      	ldr	r3, [sp, #24]
 800aba0:	459b      	cmp	fp, r3
 800aba2:	dd07      	ble.n	800abb4 <__kernel_rem_pio2+0x3b8>
 800aba4:	ab70      	add	r3, sp, #448	; 0x1c0
 800aba6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800abaa:	463d      	mov	r5, r7
 800abac:	e9c3 8900 	strd	r8, r9, [r3]
 800abb0:	3601      	adds	r6, #1
 800abb2:	e7dc      	b.n	800ab6e <__kernel_rem_pio2+0x372>
 800abb4:	9902      	ldr	r1, [sp, #8]
 800abb6:	f10b 0b01 	add.w	fp, fp, #1
 800abba:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800abbe:	9102      	str	r1, [sp, #8]
 800abc0:	e875 0102 	ldrd	r0, r1, [r5], #-8
 800abc4:	f7f5 fcf4 	bl	80005b0 <__aeabi_dmul>
 800abc8:	4602      	mov	r2, r0
 800abca:	460b      	mov	r3, r1
 800abcc:	4640      	mov	r0, r8
 800abce:	4649      	mov	r1, r9
 800abd0:	f7f5 fb38 	bl	8000244 <__adddf3>
 800abd4:	4680      	mov	r8, r0
 800abd6:	4689      	mov	r9, r1
 800abd8:	e7e1      	b.n	800ab9e <__kernel_rem_pio2+0x3a2>
 800abda:	3c01      	subs	r4, #1
 800abdc:	e752      	b.n	800aa84 <__kernel_rem_pio2+0x288>
 800abde:	f1ca 0200 	rsb	r2, sl, #0
 800abe2:	4640      	mov	r0, r8
 800abe4:	4649      	mov	r1, r9
 800abe6:	f000 fa8f 	bl	800b108 <scalbn>
 800abea:	2200      	movs	r2, #0
 800abec:	4ba5      	ldr	r3, [pc, #660]	; (800ae84 <__kernel_rem_pio2+0x688>)
 800abee:	4604      	mov	r4, r0
 800abf0:	460d      	mov	r5, r1
 800abf2:	f7f5 ff63 	bl	8000abc <__aeabi_dcmpge>
 800abf6:	b1f8      	cbz	r0, 800ac38 <__kernel_rem_pio2+0x43c>
 800abf8:	2200      	movs	r2, #0
 800abfa:	4ba3      	ldr	r3, [pc, #652]	; (800ae88 <__kernel_rem_pio2+0x68c>)
 800abfc:	4620      	mov	r0, r4
 800abfe:	4629      	mov	r1, r5
 800ac00:	f7f5 fcd6 	bl	80005b0 <__aeabi_dmul>
 800ac04:	f7f5 ff84 	bl	8000b10 <__aeabi_d2iz>
 800ac08:	4606      	mov	r6, r0
 800ac0a:	f7f5 fc67 	bl	80004dc <__aeabi_i2d>
 800ac0e:	2200      	movs	r2, #0
 800ac10:	4b9c      	ldr	r3, [pc, #624]	; (800ae84 <__kernel_rem_pio2+0x688>)
 800ac12:	f7f5 fccd 	bl	80005b0 <__aeabi_dmul>
 800ac16:	460b      	mov	r3, r1
 800ac18:	4602      	mov	r2, r0
 800ac1a:	4629      	mov	r1, r5
 800ac1c:	4620      	mov	r0, r4
 800ac1e:	f7f5 fb0f 	bl	8000240 <__aeabi_dsub>
 800ac22:	f7f5 ff75 	bl	8000b10 <__aeabi_d2iz>
 800ac26:	1c7c      	adds	r4, r7, #1
 800ac28:	ab0c      	add	r3, sp, #48	; 0x30
 800ac2a:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800ac2e:	f10a 0a18 	add.w	sl, sl, #24
 800ac32:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 800ac36:	e72d      	b.n	800aa94 <__kernel_rem_pio2+0x298>
 800ac38:	4620      	mov	r0, r4
 800ac3a:	4629      	mov	r1, r5
 800ac3c:	f7f5 ff68 	bl	8000b10 <__aeabi_d2iz>
 800ac40:	ab0c      	add	r3, sp, #48	; 0x30
 800ac42:	463c      	mov	r4, r7
 800ac44:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800ac48:	e724      	b.n	800aa94 <__kernel_rem_pio2+0x298>
 800ac4a:	ab0c      	add	r3, sp, #48	; 0x30
 800ac4c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800ac50:	f7f5 fc44 	bl	80004dc <__aeabi_i2d>
 800ac54:	4632      	mov	r2, r6
 800ac56:	463b      	mov	r3, r7
 800ac58:	f7f5 fcaa 	bl	80005b0 <__aeabi_dmul>
 800ac5c:	4642      	mov	r2, r8
 800ac5e:	e86b 0102 	strd	r0, r1, [fp], #-8
 800ac62:	464b      	mov	r3, r9
 800ac64:	4630      	mov	r0, r6
 800ac66:	4639      	mov	r1, r7
 800ac68:	f7f5 fca2 	bl	80005b0 <__aeabi_dmul>
 800ac6c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ac70:	4606      	mov	r6, r0
 800ac72:	460f      	mov	r7, r1
 800ac74:	e71f      	b.n	800aab6 <__kernel_rem_pio2+0x2ba>
 800ac76:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800ac7a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800ac7e:	f7f5 fc97 	bl	80005b0 <__aeabi_dmul>
 800ac82:	4602      	mov	r2, r0
 800ac84:	460b      	mov	r3, r1
 800ac86:	4650      	mov	r0, sl
 800ac88:	4659      	mov	r1, fp
 800ac8a:	f7f5 fadb 	bl	8000244 <__adddf3>
 800ac8e:	4682      	mov	sl, r0
 800ac90:	468b      	mov	fp, r1
 800ac92:	3601      	adds	r6, #1
 800ac94:	9b04      	ldr	r3, [sp, #16]
 800ac96:	429e      	cmp	r6, r3
 800ac98:	dc01      	bgt.n	800ac9e <__kernel_rem_pio2+0x4a2>
 800ac9a:	45b0      	cmp	r8, r6
 800ac9c:	daeb      	bge.n	800ac76 <__kernel_rem_pio2+0x47a>
 800ac9e:	ab48      	add	r3, sp, #288	; 0x120
 800aca0:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800aca4:	e9c3 ab00 	strd	sl, fp, [r3]
 800aca8:	3f01      	subs	r7, #1
 800acaa:	f108 0801 	add.w	r8, r8, #1
 800acae:	e709      	b.n	800aac4 <__kernel_rem_pio2+0x2c8>
 800acb0:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800acb2:	2b02      	cmp	r3, #2
 800acb4:	dc09      	bgt.n	800acca <__kernel_rem_pio2+0x4ce>
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	dc34      	bgt.n	800ad24 <__kernel_rem_pio2+0x528>
 800acba:	d05e      	beq.n	800ad7a <__kernel_rem_pio2+0x57e>
 800acbc:	9b07      	ldr	r3, [sp, #28]
 800acbe:	f003 0007 	and.w	r0, r3, #7
 800acc2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800acc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acca:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800accc:	2b03      	cmp	r3, #3
 800acce:	d1f5      	bne.n	800acbc <__kernel_rem_pio2+0x4c0>
 800acd0:	9a06      	ldr	r2, [sp, #24]
 800acd2:	ab48      	add	r3, sp, #288	; 0x120
 800acd4:	441a      	add	r2, r3
 800acd6:	4615      	mov	r5, r2
 800acd8:	4692      	mov	sl, r2
 800acda:	46a3      	mov	fp, r4
 800acdc:	f1bb 0f00 	cmp.w	fp, #0
 800ace0:	dc7a      	bgt.n	800add8 <__kernel_rem_pio2+0x5dc>
 800ace2:	46aa      	mov	sl, r5
 800ace4:	46a3      	mov	fp, r4
 800ace6:	f1bb 0f01 	cmp.w	fp, #1
 800acea:	f300 8094 	bgt.w	800ae16 <__kernel_rem_pio2+0x61a>
 800acee:	2700      	movs	r7, #0
 800acf0:	463e      	mov	r6, r7
 800acf2:	2c01      	cmp	r4, #1
 800acf4:	f300 80ae 	bgt.w	800ae54 <__kernel_rem_pio2+0x658>
 800acf8:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 800acfc:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 800ad00:	9b02      	ldr	r3, [sp, #8]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	f040 80b0 	bne.w	800ae68 <__kernel_rem_pio2+0x66c>
 800ad08:	4603      	mov	r3, r0
 800ad0a:	462a      	mov	r2, r5
 800ad0c:	9801      	ldr	r0, [sp, #4]
 800ad0e:	e9c0 2300 	strd	r2, r3, [r0]
 800ad12:	4622      	mov	r2, r4
 800ad14:	460b      	mov	r3, r1
 800ad16:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800ad1a:	463a      	mov	r2, r7
 800ad1c:	4633      	mov	r3, r6
 800ad1e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800ad22:	e7cb      	b.n	800acbc <__kernel_rem_pio2+0x4c0>
 800ad24:	2000      	movs	r0, #0
 800ad26:	9a06      	ldr	r2, [sp, #24]
 800ad28:	ab48      	add	r3, sp, #288	; 0x120
 800ad2a:	441a      	add	r2, r3
 800ad2c:	4615      	mov	r5, r2
 800ad2e:	46a0      	mov	r8, r4
 800ad30:	4601      	mov	r1, r0
 800ad32:	f1b8 0f00 	cmp.w	r8, #0
 800ad36:	da3c      	bge.n	800adb2 <__kernel_rem_pio2+0x5b6>
 800ad38:	9b02      	ldr	r3, [sp, #8]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d040      	beq.n	800adc0 <__kernel_rem_pio2+0x5c4>
 800ad3e:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 800ad42:	4602      	mov	r2, r0
 800ad44:	462b      	mov	r3, r5
 800ad46:	9d01      	ldr	r5, [sp, #4]
 800ad48:	2601      	movs	r6, #1
 800ad4a:	e9c5 2300 	strd	r2, r3, [r5]
 800ad4e:	460b      	mov	r3, r1
 800ad50:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800ad54:	f7f5 fa74 	bl	8000240 <__aeabi_dsub>
 800ad58:	4684      	mov	ip, r0
 800ad5a:	460f      	mov	r7, r1
 800ad5c:	ad48      	add	r5, sp, #288	; 0x120
 800ad5e:	42b4      	cmp	r4, r6
 800ad60:	f105 0508 	add.w	r5, r5, #8
 800ad64:	da2e      	bge.n	800adc4 <__kernel_rem_pio2+0x5c8>
 800ad66:	9b02      	ldr	r3, [sp, #8]
 800ad68:	b10b      	cbz	r3, 800ad6e <__kernel_rem_pio2+0x572>
 800ad6a:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800ad6e:	4662      	mov	r2, ip
 800ad70:	463b      	mov	r3, r7
 800ad72:	9901      	ldr	r1, [sp, #4]
 800ad74:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800ad78:	e7a0      	b.n	800acbc <__kernel_rem_pio2+0x4c0>
 800ad7a:	9a06      	ldr	r2, [sp, #24]
 800ad7c:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 800ad7e:	ab48      	add	r3, sp, #288	; 0x120
 800ad80:	441a      	add	r2, r3
 800ad82:	4615      	mov	r5, r2
 800ad84:	4637      	mov	r7, r6
 800ad86:	2c00      	cmp	r4, #0
 800ad88:	da09      	bge.n	800ad9e <__kernel_rem_pio2+0x5a2>
 800ad8a:	9b02      	ldr	r3, [sp, #8]
 800ad8c:	b10b      	cbz	r3, 800ad92 <__kernel_rem_pio2+0x596>
 800ad8e:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800ad92:	4632      	mov	r2, r6
 800ad94:	463b      	mov	r3, r7
 800ad96:	9901      	ldr	r1, [sp, #4]
 800ad98:	e9c1 2300 	strd	r2, r3, [r1]
 800ad9c:	e78e      	b.n	800acbc <__kernel_rem_pio2+0x4c0>
 800ad9e:	4630      	mov	r0, r6
 800ada0:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800ada4:	4639      	mov	r1, r7
 800ada6:	f7f5 fa4d 	bl	8000244 <__adddf3>
 800adaa:	3c01      	subs	r4, #1
 800adac:	4606      	mov	r6, r0
 800adae:	460f      	mov	r7, r1
 800adb0:	e7e9      	b.n	800ad86 <__kernel_rem_pio2+0x58a>
 800adb2:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800adb6:	f7f5 fa45 	bl	8000244 <__adddf3>
 800adba:	f108 38ff 	add.w	r8, r8, #4294967295
 800adbe:	e7b8      	b.n	800ad32 <__kernel_rem_pio2+0x536>
 800adc0:	460d      	mov	r5, r1
 800adc2:	e7be      	b.n	800ad42 <__kernel_rem_pio2+0x546>
 800adc4:	4660      	mov	r0, ip
 800adc6:	e9d5 2300 	ldrd	r2, r3, [r5]
 800adca:	4639      	mov	r1, r7
 800adcc:	f7f5 fa3a 	bl	8000244 <__adddf3>
 800add0:	3601      	adds	r6, #1
 800add2:	4684      	mov	ip, r0
 800add4:	460f      	mov	r7, r1
 800add6:	e7c2      	b.n	800ad5e <__kernel_rem_pio2+0x562>
 800add8:	e9da 6700 	ldrd	r6, r7, [sl]
 800addc:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 800ade0:	4632      	mov	r2, r6
 800ade2:	463b      	mov	r3, r7
 800ade4:	4640      	mov	r0, r8
 800ade6:	4649      	mov	r1, r9
 800ade8:	f7f5 fa2c 	bl	8000244 <__adddf3>
 800adec:	4602      	mov	r2, r0
 800adee:	460b      	mov	r3, r1
 800adf0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800adf4:	4640      	mov	r0, r8
 800adf6:	4649      	mov	r1, r9
 800adf8:	f7f5 fa22 	bl	8000240 <__aeabi_dsub>
 800adfc:	4632      	mov	r2, r6
 800adfe:	463b      	mov	r3, r7
 800ae00:	f7f5 fa20 	bl	8000244 <__adddf3>
 800ae04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ae08:	e86a 0102 	strd	r0, r1, [sl], #-8
 800ae0c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ae10:	e9ca 2300 	strd	r2, r3, [sl]
 800ae14:	e762      	b.n	800acdc <__kernel_rem_pio2+0x4e0>
 800ae16:	e9da 8900 	ldrd	r8, r9, [sl]
 800ae1a:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 800ae1e:	4642      	mov	r2, r8
 800ae20:	464b      	mov	r3, r9
 800ae22:	4630      	mov	r0, r6
 800ae24:	4639      	mov	r1, r7
 800ae26:	f7f5 fa0d 	bl	8000244 <__adddf3>
 800ae2a:	4602      	mov	r2, r0
 800ae2c:	460b      	mov	r3, r1
 800ae2e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ae32:	4630      	mov	r0, r6
 800ae34:	4639      	mov	r1, r7
 800ae36:	f7f5 fa03 	bl	8000240 <__aeabi_dsub>
 800ae3a:	4642      	mov	r2, r8
 800ae3c:	464b      	mov	r3, r9
 800ae3e:	f7f5 fa01 	bl	8000244 <__adddf3>
 800ae42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ae46:	e86a 0102 	strd	r0, r1, [sl], #-8
 800ae4a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ae4e:	e9ca 2300 	strd	r2, r3, [sl]
 800ae52:	e748      	b.n	800ace6 <__kernel_rem_pio2+0x4ea>
 800ae54:	4638      	mov	r0, r7
 800ae56:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800ae5a:	4631      	mov	r1, r6
 800ae5c:	f7f5 f9f2 	bl	8000244 <__adddf3>
 800ae60:	3c01      	subs	r4, #1
 800ae62:	4607      	mov	r7, r0
 800ae64:	460e      	mov	r6, r1
 800ae66:	e744      	b.n	800acf2 <__kernel_rem_pio2+0x4f6>
 800ae68:	9b01      	ldr	r3, [sp, #4]
 800ae6a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800ae6e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800ae72:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800ae76:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800ae7a:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800ae7e:	601d      	str	r5, [r3, #0]
 800ae80:	615e      	str	r6, [r3, #20]
 800ae82:	e71b      	b.n	800acbc <__kernel_rem_pio2+0x4c0>
 800ae84:	41700000 	.word	0x41700000
 800ae88:	3e700000 	.word	0x3e700000
 800ae8c:	00000000 	.word	0x00000000

0800ae90 <__kernel_sin>:
 800ae90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae94:	b086      	sub	sp, #24
 800ae96:	e9cd 2300 	strd	r2, r3, [sp]
 800ae9a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ae9e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800aea2:	4682      	mov	sl, r0
 800aea4:	460c      	mov	r4, r1
 800aea6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800aea8:	da03      	bge.n	800aeb2 <__kernel_sin+0x22>
 800aeaa:	f7f5 fe31 	bl	8000b10 <__aeabi_d2iz>
 800aeae:	2800      	cmp	r0, #0
 800aeb0:	d050      	beq.n	800af54 <__kernel_sin+0xc4>
 800aeb2:	4652      	mov	r2, sl
 800aeb4:	4623      	mov	r3, r4
 800aeb6:	4650      	mov	r0, sl
 800aeb8:	4621      	mov	r1, r4
 800aeba:	f7f5 fb79 	bl	80005b0 <__aeabi_dmul>
 800aebe:	4606      	mov	r6, r0
 800aec0:	460f      	mov	r7, r1
 800aec2:	4602      	mov	r2, r0
 800aec4:	460b      	mov	r3, r1
 800aec6:	4650      	mov	r0, sl
 800aec8:	4621      	mov	r1, r4
 800aeca:	f7f5 fb71 	bl	80005b0 <__aeabi_dmul>
 800aece:	a33e      	add	r3, pc, #248	; (adr r3, 800afc8 <__kernel_sin+0x138>)
 800aed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aed4:	4680      	mov	r8, r0
 800aed6:	4689      	mov	r9, r1
 800aed8:	4630      	mov	r0, r6
 800aeda:	4639      	mov	r1, r7
 800aedc:	f7f5 fb68 	bl	80005b0 <__aeabi_dmul>
 800aee0:	a33b      	add	r3, pc, #236	; (adr r3, 800afd0 <__kernel_sin+0x140>)
 800aee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aee6:	f7f5 f9ab 	bl	8000240 <__aeabi_dsub>
 800aeea:	4632      	mov	r2, r6
 800aeec:	463b      	mov	r3, r7
 800aeee:	f7f5 fb5f 	bl	80005b0 <__aeabi_dmul>
 800aef2:	a339      	add	r3, pc, #228	; (adr r3, 800afd8 <__kernel_sin+0x148>)
 800aef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aef8:	f7f5 f9a4 	bl	8000244 <__adddf3>
 800aefc:	4632      	mov	r2, r6
 800aefe:	463b      	mov	r3, r7
 800af00:	f7f5 fb56 	bl	80005b0 <__aeabi_dmul>
 800af04:	a336      	add	r3, pc, #216	; (adr r3, 800afe0 <__kernel_sin+0x150>)
 800af06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af0a:	f7f5 f999 	bl	8000240 <__aeabi_dsub>
 800af0e:	4632      	mov	r2, r6
 800af10:	463b      	mov	r3, r7
 800af12:	f7f5 fb4d 	bl	80005b0 <__aeabi_dmul>
 800af16:	a334      	add	r3, pc, #208	; (adr r3, 800afe8 <__kernel_sin+0x158>)
 800af18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af1c:	f7f5 f992 	bl	8000244 <__adddf3>
 800af20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800af24:	b9dd      	cbnz	r5, 800af5e <__kernel_sin+0xce>
 800af26:	4602      	mov	r2, r0
 800af28:	460b      	mov	r3, r1
 800af2a:	4630      	mov	r0, r6
 800af2c:	4639      	mov	r1, r7
 800af2e:	f7f5 fb3f 	bl	80005b0 <__aeabi_dmul>
 800af32:	a32f      	add	r3, pc, #188	; (adr r3, 800aff0 <__kernel_sin+0x160>)
 800af34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af38:	f7f5 f982 	bl	8000240 <__aeabi_dsub>
 800af3c:	4642      	mov	r2, r8
 800af3e:	464b      	mov	r3, r9
 800af40:	f7f5 fb36 	bl	80005b0 <__aeabi_dmul>
 800af44:	4602      	mov	r2, r0
 800af46:	460b      	mov	r3, r1
 800af48:	4650      	mov	r0, sl
 800af4a:	4621      	mov	r1, r4
 800af4c:	f7f5 f97a 	bl	8000244 <__adddf3>
 800af50:	4682      	mov	sl, r0
 800af52:	460c      	mov	r4, r1
 800af54:	4650      	mov	r0, sl
 800af56:	4621      	mov	r1, r4
 800af58:	b006      	add	sp, #24
 800af5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af5e:	2200      	movs	r2, #0
 800af60:	e9dd 0100 	ldrd	r0, r1, [sp]
 800af64:	4b24      	ldr	r3, [pc, #144]	; (800aff8 <__kernel_sin+0x168>)
 800af66:	f7f5 fb23 	bl	80005b0 <__aeabi_dmul>
 800af6a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800af6e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800af72:	4640      	mov	r0, r8
 800af74:	4649      	mov	r1, r9
 800af76:	f7f5 fb1b 	bl	80005b0 <__aeabi_dmul>
 800af7a:	4602      	mov	r2, r0
 800af7c:	460b      	mov	r3, r1
 800af7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800af82:	f7f5 f95d 	bl	8000240 <__aeabi_dsub>
 800af86:	4632      	mov	r2, r6
 800af88:	463b      	mov	r3, r7
 800af8a:	f7f5 fb11 	bl	80005b0 <__aeabi_dmul>
 800af8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800af92:	f7f5 f955 	bl	8000240 <__aeabi_dsub>
 800af96:	a316      	add	r3, pc, #88	; (adr r3, 800aff0 <__kernel_sin+0x160>)
 800af98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af9c:	4606      	mov	r6, r0
 800af9e:	460f      	mov	r7, r1
 800afa0:	4640      	mov	r0, r8
 800afa2:	4649      	mov	r1, r9
 800afa4:	f7f5 fb04 	bl	80005b0 <__aeabi_dmul>
 800afa8:	4602      	mov	r2, r0
 800afaa:	460b      	mov	r3, r1
 800afac:	4630      	mov	r0, r6
 800afae:	4639      	mov	r1, r7
 800afb0:	f7f5 f948 	bl	8000244 <__adddf3>
 800afb4:	4602      	mov	r2, r0
 800afb6:	460b      	mov	r3, r1
 800afb8:	4650      	mov	r0, sl
 800afba:	4621      	mov	r1, r4
 800afbc:	f7f5 f940 	bl	8000240 <__aeabi_dsub>
 800afc0:	e7c6      	b.n	800af50 <__kernel_sin+0xc0>
 800afc2:	bf00      	nop
 800afc4:	f3af 8000 	nop.w
 800afc8:	5acfd57c 	.word	0x5acfd57c
 800afcc:	3de5d93a 	.word	0x3de5d93a
 800afd0:	8a2b9ceb 	.word	0x8a2b9ceb
 800afd4:	3e5ae5e6 	.word	0x3e5ae5e6
 800afd8:	57b1fe7d 	.word	0x57b1fe7d
 800afdc:	3ec71de3 	.word	0x3ec71de3
 800afe0:	19c161d5 	.word	0x19c161d5
 800afe4:	3f2a01a0 	.word	0x3f2a01a0
 800afe8:	1110f8a6 	.word	0x1110f8a6
 800afec:	3f811111 	.word	0x3f811111
 800aff0:	55555549 	.word	0x55555549
 800aff4:	3fc55555 	.word	0x3fc55555
 800aff8:	3fe00000 	.word	0x3fe00000

0800affc <fabs>:
 800affc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800b000:	4770      	bx	lr
 800b002:	0000      	movs	r0, r0
 800b004:	0000      	movs	r0, r0
	...

0800b008 <floor>:
 800b008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b00c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800b010:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800b014:	2e13      	cmp	r6, #19
 800b016:	4602      	mov	r2, r0
 800b018:	460b      	mov	r3, r1
 800b01a:	4607      	mov	r7, r0
 800b01c:	460c      	mov	r4, r1
 800b01e:	4605      	mov	r5, r0
 800b020:	dc34      	bgt.n	800b08c <floor+0x84>
 800b022:	2e00      	cmp	r6, #0
 800b024:	da15      	bge.n	800b052 <floor+0x4a>
 800b026:	a334      	add	r3, pc, #208	; (adr r3, 800b0f8 <floor+0xf0>)
 800b028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b02c:	f7f5 f90a 	bl	8000244 <__adddf3>
 800b030:	2200      	movs	r2, #0
 800b032:	2300      	movs	r3, #0
 800b034:	f7f5 fd4c 	bl	8000ad0 <__aeabi_dcmpgt>
 800b038:	b140      	cbz	r0, 800b04c <floor+0x44>
 800b03a:	2c00      	cmp	r4, #0
 800b03c:	da59      	bge.n	800b0f2 <floor+0xea>
 800b03e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800b042:	ea57 0503 	orrs.w	r5, r7, r3
 800b046:	d001      	beq.n	800b04c <floor+0x44>
 800b048:	2500      	movs	r5, #0
 800b04a:	4c2d      	ldr	r4, [pc, #180]	; (800b100 <floor+0xf8>)
 800b04c:	4623      	mov	r3, r4
 800b04e:	462f      	mov	r7, r5
 800b050:	e025      	b.n	800b09e <floor+0x96>
 800b052:	4a2c      	ldr	r2, [pc, #176]	; (800b104 <floor+0xfc>)
 800b054:	fa42 f806 	asr.w	r8, r2, r6
 800b058:	ea01 0208 	and.w	r2, r1, r8
 800b05c:	4302      	orrs	r2, r0
 800b05e:	d01e      	beq.n	800b09e <floor+0x96>
 800b060:	a325      	add	r3, pc, #148	; (adr r3, 800b0f8 <floor+0xf0>)
 800b062:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b066:	f7f5 f8ed 	bl	8000244 <__adddf3>
 800b06a:	2200      	movs	r2, #0
 800b06c:	2300      	movs	r3, #0
 800b06e:	f7f5 fd2f 	bl	8000ad0 <__aeabi_dcmpgt>
 800b072:	2800      	cmp	r0, #0
 800b074:	d0ea      	beq.n	800b04c <floor+0x44>
 800b076:	2c00      	cmp	r4, #0
 800b078:	bfbe      	ittt	lt
 800b07a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800b07e:	fa43 f606 	asrlt.w	r6, r3, r6
 800b082:	19a4      	addlt	r4, r4, r6
 800b084:	2500      	movs	r5, #0
 800b086:	ea24 0408 	bic.w	r4, r4, r8
 800b08a:	e7df      	b.n	800b04c <floor+0x44>
 800b08c:	2e33      	cmp	r6, #51	; 0x33
 800b08e:	dd0a      	ble.n	800b0a6 <floor+0x9e>
 800b090:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b094:	d103      	bne.n	800b09e <floor+0x96>
 800b096:	f7f5 f8d5 	bl	8000244 <__adddf3>
 800b09a:	4607      	mov	r7, r0
 800b09c:	460b      	mov	r3, r1
 800b09e:	4638      	mov	r0, r7
 800b0a0:	4619      	mov	r1, r3
 800b0a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0a6:	f04f 32ff 	mov.w	r2, #4294967295
 800b0aa:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800b0ae:	fa22 f808 	lsr.w	r8, r2, r8
 800b0b2:	ea18 0f00 	tst.w	r8, r0
 800b0b6:	d0f2      	beq.n	800b09e <floor+0x96>
 800b0b8:	a30f      	add	r3, pc, #60	; (adr r3, 800b0f8 <floor+0xf0>)
 800b0ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0be:	f7f5 f8c1 	bl	8000244 <__adddf3>
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	f7f5 fd03 	bl	8000ad0 <__aeabi_dcmpgt>
 800b0ca:	2800      	cmp	r0, #0
 800b0cc:	d0be      	beq.n	800b04c <floor+0x44>
 800b0ce:	2c00      	cmp	r4, #0
 800b0d0:	da02      	bge.n	800b0d8 <floor+0xd0>
 800b0d2:	2e14      	cmp	r6, #20
 800b0d4:	d103      	bne.n	800b0de <floor+0xd6>
 800b0d6:	3401      	adds	r4, #1
 800b0d8:	ea25 0508 	bic.w	r5, r5, r8
 800b0dc:	e7b6      	b.n	800b04c <floor+0x44>
 800b0de:	2301      	movs	r3, #1
 800b0e0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800b0e4:	fa03 f606 	lsl.w	r6, r3, r6
 800b0e8:	4435      	add	r5, r6
 800b0ea:	42bd      	cmp	r5, r7
 800b0ec:	bf38      	it	cc
 800b0ee:	18e4      	addcc	r4, r4, r3
 800b0f0:	e7f2      	b.n	800b0d8 <floor+0xd0>
 800b0f2:	2500      	movs	r5, #0
 800b0f4:	462c      	mov	r4, r5
 800b0f6:	e7a9      	b.n	800b04c <floor+0x44>
 800b0f8:	8800759c 	.word	0x8800759c
 800b0fc:	7e37e43c 	.word	0x7e37e43c
 800b100:	bff00000 	.word	0xbff00000
 800b104:	000fffff 	.word	0x000fffff

0800b108 <scalbn>:
 800b108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b10a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800b10e:	4604      	mov	r4, r0
 800b110:	460d      	mov	r5, r1
 800b112:	4617      	mov	r7, r2
 800b114:	460b      	mov	r3, r1
 800b116:	b996      	cbnz	r6, 800b13e <scalbn+0x36>
 800b118:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b11c:	4303      	orrs	r3, r0
 800b11e:	d039      	beq.n	800b194 <scalbn+0x8c>
 800b120:	4b35      	ldr	r3, [pc, #212]	; (800b1f8 <scalbn+0xf0>)
 800b122:	2200      	movs	r2, #0
 800b124:	f7f5 fa44 	bl	80005b0 <__aeabi_dmul>
 800b128:	4b34      	ldr	r3, [pc, #208]	; (800b1fc <scalbn+0xf4>)
 800b12a:	4604      	mov	r4, r0
 800b12c:	429f      	cmp	r7, r3
 800b12e:	460d      	mov	r5, r1
 800b130:	da0f      	bge.n	800b152 <scalbn+0x4a>
 800b132:	a32d      	add	r3, pc, #180	; (adr r3, 800b1e8 <scalbn+0xe0>)
 800b134:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b138:	f7f5 fa3a 	bl	80005b0 <__aeabi_dmul>
 800b13c:	e006      	b.n	800b14c <scalbn+0x44>
 800b13e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800b142:	4296      	cmp	r6, r2
 800b144:	d10a      	bne.n	800b15c <scalbn+0x54>
 800b146:	4602      	mov	r2, r0
 800b148:	f7f5 f87c 	bl	8000244 <__adddf3>
 800b14c:	4604      	mov	r4, r0
 800b14e:	460d      	mov	r5, r1
 800b150:	e020      	b.n	800b194 <scalbn+0x8c>
 800b152:	460b      	mov	r3, r1
 800b154:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800b158:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800b15c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800b160:	19b9      	adds	r1, r7, r6
 800b162:	4291      	cmp	r1, r2
 800b164:	dd0e      	ble.n	800b184 <scalbn+0x7c>
 800b166:	a322      	add	r3, pc, #136	; (adr r3, 800b1f0 <scalbn+0xe8>)
 800b168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b16c:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800b170:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800b174:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800b178:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800b17c:	4820      	ldr	r0, [pc, #128]	; (800b200 <scalbn+0xf8>)
 800b17e:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800b182:	e7d9      	b.n	800b138 <scalbn+0x30>
 800b184:	2900      	cmp	r1, #0
 800b186:	dd08      	ble.n	800b19a <scalbn+0x92>
 800b188:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b18c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b190:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800b194:	4620      	mov	r0, r4
 800b196:	4629      	mov	r1, r5
 800b198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b19a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800b19e:	da16      	bge.n	800b1ce <scalbn+0xc6>
 800b1a0:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b1a4:	429f      	cmp	r7, r3
 800b1a6:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800b1aa:	dd08      	ble.n	800b1be <scalbn+0xb6>
 800b1ac:	4c15      	ldr	r4, [pc, #84]	; (800b204 <scalbn+0xfc>)
 800b1ae:	4814      	ldr	r0, [pc, #80]	; (800b200 <scalbn+0xf8>)
 800b1b0:	f363 74df 	bfi	r4, r3, #31, #1
 800b1b4:	a30e      	add	r3, pc, #56	; (adr r3, 800b1f0 <scalbn+0xe8>)
 800b1b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ba:	4621      	mov	r1, r4
 800b1bc:	e7bc      	b.n	800b138 <scalbn+0x30>
 800b1be:	4c12      	ldr	r4, [pc, #72]	; (800b208 <scalbn+0x100>)
 800b1c0:	4812      	ldr	r0, [pc, #72]	; (800b20c <scalbn+0x104>)
 800b1c2:	f363 74df 	bfi	r4, r3, #31, #1
 800b1c6:	a308      	add	r3, pc, #32	; (adr r3, 800b1e8 <scalbn+0xe0>)
 800b1c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1cc:	e7f5      	b.n	800b1ba <scalbn+0xb2>
 800b1ce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b1d2:	3136      	adds	r1, #54	; 0x36
 800b1d4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b1d8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800b1dc:	4620      	mov	r0, r4
 800b1de:	4629      	mov	r1, r5
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	4b0b      	ldr	r3, [pc, #44]	; (800b210 <scalbn+0x108>)
 800b1e4:	e7a8      	b.n	800b138 <scalbn+0x30>
 800b1e6:	bf00      	nop
 800b1e8:	c2f8f359 	.word	0xc2f8f359
 800b1ec:	01a56e1f 	.word	0x01a56e1f
 800b1f0:	8800759c 	.word	0x8800759c
 800b1f4:	7e37e43c 	.word	0x7e37e43c
 800b1f8:	43500000 	.word	0x43500000
 800b1fc:	ffff3cb0 	.word	0xffff3cb0
 800b200:	8800759c 	.word	0x8800759c
 800b204:	7e37e43c 	.word	0x7e37e43c
 800b208:	01a56e1f 	.word	0x01a56e1f
 800b20c:	c2f8f359 	.word	0xc2f8f359
 800b210:	3c900000 	.word	0x3c900000

0800b214 <_init>:
 800b214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b216:	bf00      	nop
 800b218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b21a:	bc08      	pop	{r3}
 800b21c:	469e      	mov	lr, r3
 800b21e:	4770      	bx	lr

0800b220 <_fini>:
 800b220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b222:	bf00      	nop
 800b224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b226:	bc08      	pop	{r3}
 800b228:	469e      	mov	lr, r3
 800b22a:	4770      	bx	lr
